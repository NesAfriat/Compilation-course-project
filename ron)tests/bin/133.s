;;; All the macros and the scheme-object printing procedure
;;; are defined in compiler.s
%include "compiler.s"
section .bss
;;; This pointer is used to manage allocations on our heap.
malloc_pointer:
    resq 1
;;; here we REServe enough Quad-words (64-bit "cells") for the free variables
;;; each free variable has 8 bytes reserved for a 64-bit pointer to its value
fvar_tbl:
    resq 48
section .data
const_tbl:
db T_VOID
db T_NIL
db T_BOOL ,0
db T_BOOL ,1
MAKE_LITERAL_STRING "whatever"
MAKE_LITERAL_SYMBOL(const_tbl+6)
MAKE_LITERAL_CHAR(0)
MAKE_LITERAL_RATIONAL(1, 1)
MAKE_LITERAL_RATIONAL(0, 1)
MAKE_LITERAL_RATIONAL(-1, 1)
MAKE_LITERAL_RATIONAL(2, 1)
MAKE_LITERAL_RATIONAL(3, 1)
MAKE_LITERAL_RATIONAL(4, 1)
MAKE_LITERAL_RATIONAL(5, 1)
MAKE_LITERAL_RATIONAL(6, 1)
MAKE_LITERAL_RATIONAL(7, 1)
MAKE_LITERAL_RATIONAL(8, 1)
MAKE_LITERAL_RATIONAL(9, 1)
MAKE_LITERAL_RATIONAL(10, 1)
MAKE_LITERAL_RATIONAL(11, 1)
MAKE_LITERAL_RATIONAL(12, 1)
MAKE_LITERAL_RATIONAL(13, 1)
MAKE_LITERAL_RATIONAL(14, 1)
MAKE_LITERAL_RATIONAL(15, 1)
MAKE_LITERAL_RATIONAL(16, 1)
MAKE_LITERAL_RATIONAL(17, 1)
MAKE_LITERAL_RATIONAL(18, 1)
MAKE_LITERAL_RATIONAL(19, 1)
MAKE_LITERAL_RATIONAL(20, 1)
MAKE_LITERAL_RATIONAL(21, 1)
MAKE_LITERAL_RATIONAL(22, 1)
MAKE_LITERAL_RATIONAL(23, 1)
MAKE_LITERAL_RATIONAL(24, 1)
MAKE_LITERAL_RATIONAL(25, 1)
MAKE_LITERAL_RATIONAL(26, 1)
MAKE_LITERAL_RATIONAL(27, 1)
MAKE_LITERAL_RATIONAL(28, 1)
MAKE_LITERAL_RATIONAL(29, 1)
MAKE_LITERAL_RATIONAL(30, 1)
MAKE_LITERAL_RATIONAL(31, 1)
MAKE_LITERAL_RATIONAL(32, 1)
MAKE_LITERAL_RATIONAL(33, 1)
MAKE_LITERAL_RATIONAL(34, 1)
MAKE_LITERAL_RATIONAL(35, 1)
MAKE_LITERAL_RATIONAL(36, 1)
MAKE_LITERAL_RATIONAL(37, 1)
MAKE_LITERAL_RATIONAL(38, 1)
MAKE_LITERAL_RATIONAL(39, 1)
MAKE_LITERAL_RATIONAL(40, 1)
MAKE_LITERAL_RATIONAL(41, 1)
MAKE_LITERAL_RATIONAL(42, 1)
MAKE_LITERAL_RATIONAL(43, 1)
MAKE_LITERAL_RATIONAL(44, 1)
MAKE_LITERAL_RATIONAL(45, 1)
MAKE_LITERAL_RATIONAL(46, 1)
MAKE_LITERAL_RATIONAL(47, 1)
MAKE_LITERAL_RATIONAL(48, 1)
MAKE_LITERAL_RATIONAL(49, 1)
MAKE_LITERAL_RATIONAL(50, 1)
MAKE_LITERAL_RATIONAL(51, 1)
MAKE_LITERAL_RATIONAL(52, 1)
MAKE_LITERAL_RATIONAL(53, 1)
MAKE_LITERAL_RATIONAL(54, 1)
MAKE_LITERAL_RATIONAL(55, 1)
MAKE_LITERAL_RATIONAL(56, 1)
MAKE_LITERAL_RATIONAL(57, 1)
MAKE_LITERAL_RATIONAL(58, 1)
MAKE_LITERAL_RATIONAL(59, 1)
MAKE_LITERAL_RATIONAL(60, 1)
MAKE_LITERAL_RATIONAL(61, 1)
MAKE_LITERAL_RATIONAL(62, 1)
MAKE_LITERAL_RATIONAL(63, 1)
MAKE_LITERAL_RATIONAL(64, 1)
MAKE_LITERAL_RATIONAL(65, 1)
MAKE_LITERAL_RATIONAL(66, 1)
MAKE_LITERAL_RATIONAL(67, 1)
MAKE_LITERAL_RATIONAL(68, 1)
MAKE_LITERAL_RATIONAL(69, 1)
MAKE_LITERAL_RATIONAL(70, 1)
MAKE_LITERAL_RATIONAL(71, 1)
MAKE_LITERAL_RATIONAL(72, 1)
MAKE_LITERAL_RATIONAL(73, 1)
MAKE_LITERAL_RATIONAL(74, 1)
MAKE_LITERAL_RATIONAL(75, 1)
MAKE_LITERAL_RATIONAL(76, 1)
MAKE_LITERAL_RATIONAL(77, 1)
MAKE_LITERAL_RATIONAL(78, 1)
MAKE_LITERAL_RATIONAL(79, 1)
MAKE_LITERAL_RATIONAL(80, 1)
MAKE_LITERAL_RATIONAL(81, 1)
MAKE_LITERAL_RATIONAL(82, 1)
MAKE_LITERAL_RATIONAL(83, 1)
MAKE_LITERAL_RATIONAL(84, 1)
MAKE_LITERAL_RATIONAL(85, 1)
MAKE_LITERAL_RATIONAL(86, 1)
MAKE_LITERAL_RATIONAL(87, 1)
MAKE_LITERAL_RATIONAL(88, 1)
MAKE_LITERAL_RATIONAL(89, 1)
MAKE_LITERAL_RATIONAL(90, 1)
MAKE_LITERAL_RATIONAL(91, 1)
MAKE_LITERAL_RATIONAL(92, 1)
MAKE_LITERAL_RATIONAL(93, 1)
MAKE_LITERAL_RATIONAL(94, 1)
MAKE_LITERAL_RATIONAL(95, 1)
MAKE_LITERAL_RATIONAL(96, 1)
MAKE_LITERAL_RATIONAL(97, 1)
MAKE_LITERAL_RATIONAL(98, 1)
MAKE_LITERAL_RATIONAL(99, 1)
MAKE_LITERAL_RATIONAL(100, 1)
MAKE_LITERAL_RATIONAL(101, 1)
MAKE_LITERAL_RATIONAL(102, 1)
MAKE_LITERAL_RATIONAL(103, 1)
MAKE_LITERAL_RATIONAL(104, 1)
MAKE_LITERAL_RATIONAL(105, 1)
MAKE_LITERAL_RATIONAL(106, 1)
MAKE_LITERAL_RATIONAL(107, 1)
MAKE_LITERAL_RATIONAL(108, 1)
MAKE_LITERAL_RATIONAL(109, 1)
MAKE_LITERAL_RATIONAL(110, 1)
MAKE_LITERAL_RATIONAL(111, 1)
MAKE_LITERAL_RATIONAL(112, 1)
MAKE_LITERAL_RATIONAL(113, 1)
MAKE_LITERAL_RATIONAL(114, 1)
MAKE_LITERAL_RATIONAL(115, 1)
MAKE_LITERAL_RATIONAL(116, 1)
MAKE_LITERAL_RATIONAL(117, 1)
MAKE_LITERAL_RATIONAL(118, 1)
MAKE_LITERAL_RATIONAL(119, 1)
MAKE_LITERAL_RATIONAL(120, 1)
MAKE_LITERAL_RATIONAL(121, 1)
MAKE_LITERAL_RATIONAL(122, 1)
MAKE_LITERAL_RATIONAL(123, 1)
MAKE_LITERAL_RATIONAL(124, 1)
MAKE_LITERAL_RATIONAL(125, 1)
MAKE_LITERAL_RATIONAL(126, 1)
MAKE_LITERAL_RATIONAL(127, 1)
MAKE_LITERAL_RATIONAL(128, 1)
MAKE_LITERAL_RATIONAL(129, 1)
MAKE_LITERAL_RATIONAL(130, 1)
MAKE_LITERAL_RATIONAL(131, 1)
MAKE_LITERAL_RATIONAL(132, 1)
MAKE_LITERAL_RATIONAL(133, 1)
MAKE_LITERAL_RATIONAL(134, 1)
MAKE_LITERAL_RATIONAL(135, 1)
MAKE_LITERAL_RATIONAL(136, 1)
MAKE_LITERAL_RATIONAL(137, 1)
MAKE_LITERAL_RATIONAL(138, 1)
MAKE_LITERAL_RATIONAL(139, 1)
MAKE_LITERAL_RATIONAL(140, 1)
MAKE_LITERAL_RATIONAL(141, 1)
MAKE_LITERAL_RATIONAL(142, 1)
MAKE_LITERAL_RATIONAL(143, 1)
MAKE_LITERAL_RATIONAL(144, 1)
MAKE_LITERAL_RATIONAL(145, 1)
MAKE_LITERAL_RATIONAL(146, 1)
MAKE_LITERAL_RATIONAL(147, 1)
MAKE_LITERAL_RATIONAL(148, 1)
MAKE_LITERAL_RATIONAL(149, 1)
MAKE_LITERAL_RATIONAL(150, 1)
MAKE_LITERAL_RATIONAL(151, 1)
MAKE_LITERAL_RATIONAL(152, 1)
MAKE_LITERAL_RATIONAL(153, 1)
MAKE_LITERAL_RATIONAL(154, 1)
MAKE_LITERAL_RATIONAL(155, 1)
MAKE_LITERAL_RATIONAL(156, 1)
MAKE_LITERAL_RATIONAL(157, 1)
MAKE_LITERAL_RATIONAL(158, 1)
MAKE_LITERAL_RATIONAL(159, 1)
MAKE_LITERAL_RATIONAL(160, 1)
MAKE_LITERAL_RATIONAL(161, 1)
MAKE_LITERAL_RATIONAL(162, 1)
MAKE_LITERAL_RATIONAL(163, 1)
MAKE_LITERAL_RATIONAL(164, 1)
MAKE_LITERAL_RATIONAL(165, 1)
MAKE_LITERAL_RATIONAL(166, 1)
MAKE_LITERAL_RATIONAL(167, 1)
MAKE_LITERAL_RATIONAL(168, 1)
MAKE_LITERAL_RATIONAL(169, 1)
MAKE_LITERAL_RATIONAL(170, 1)
MAKE_LITERAL_RATIONAL(171, 1)
MAKE_LITERAL_RATIONAL(172, 1)
MAKE_LITERAL_RATIONAL(173, 1)
MAKE_LITERAL_RATIONAL(174, 1)
MAKE_LITERAL_RATIONAL(175, 1)
MAKE_LITERAL_RATIONAL(176, 1)
MAKE_LITERAL_RATIONAL(177, 1)
MAKE_LITERAL_RATIONAL(178, 1)
MAKE_LITERAL_RATIONAL(179, 1)
MAKE_LITERAL_RATIONAL(180, 1)
MAKE_LITERAL_RATIONAL(181, 1)
MAKE_LITERAL_RATIONAL(182, 1)
MAKE_LITERAL_RATIONAL(183, 1)
MAKE_LITERAL_RATIONAL(184, 1)
MAKE_LITERAL_RATIONAL(185, 1)
MAKE_LITERAL_RATIONAL(186, 1)
MAKE_LITERAL_RATIONAL(187, 1)
MAKE_LITERAL_RATIONAL(188, 1)
MAKE_LITERAL_RATIONAL(189, 1)
MAKE_LITERAL_RATIONAL(190, 1)
MAKE_LITERAL_RATIONAL(191, 1)
MAKE_LITERAL_RATIONAL(192, 1)
MAKE_LITERAL_RATIONAL(193, 1)
MAKE_LITERAL_RATIONAL(194, 1)
MAKE_LITERAL_RATIONAL(195, 1)
MAKE_LITERAL_RATIONAL(196, 1)
MAKE_LITERAL_RATIONAL(197, 1)
MAKE_LITERAL_RATIONAL(198, 1)
MAKE_LITERAL_RATIONAL(199, 1)
MAKE_LITERAL_RATIONAL(200, 1)
MAKE_LITERAL_RATIONAL(201, 1)
MAKE_LITERAL_RATIONAL(202, 1)
MAKE_LITERAL_RATIONAL(203, 1)
MAKE_LITERAL_RATIONAL(204, 1)
MAKE_LITERAL_RATIONAL(205, 1)
MAKE_LITERAL_RATIONAL(206, 1)
MAKE_LITERAL_RATIONAL(207, 1)
MAKE_LITERAL_RATIONAL(208, 1)
MAKE_LITERAL_RATIONAL(209, 1)
MAKE_LITERAL_RATIONAL(210, 1)
MAKE_LITERAL_RATIONAL(211, 1)
MAKE_LITERAL_RATIONAL(212, 1)
MAKE_LITERAL_RATIONAL(213, 1)
MAKE_LITERAL_RATIONAL(214, 1)
MAKE_LITERAL_RATIONAL(215, 1)
MAKE_LITERAL_RATIONAL(216, 1)
MAKE_LITERAL_RATIONAL(217, 1)
MAKE_LITERAL_RATIONAL(218, 1)
MAKE_LITERAL_RATIONAL(219, 1)
MAKE_LITERAL_RATIONAL(220, 1)
MAKE_LITERAL_RATIONAL(221, 1)
MAKE_LITERAL_RATIONAL(222, 1)
MAKE_LITERAL_RATIONAL(223, 1)
MAKE_LITERAL_RATIONAL(224, 1)
MAKE_LITERAL_RATIONAL(225, 1)
MAKE_LITERAL_RATIONAL(226, 1)
MAKE_LITERAL_RATIONAL(227, 1)
MAKE_LITERAL_RATIONAL(228, 1)
MAKE_LITERAL_RATIONAL(229, 1)
MAKE_LITERAL_RATIONAL(230, 1)
MAKE_LITERAL_RATIONAL(231, 1)
MAKE_LITERAL_RATIONAL(232, 1)
MAKE_LITERAL_RATIONAL(233, 1)
MAKE_LITERAL_RATIONAL(234, 1)
MAKE_LITERAL_RATIONAL(235, 1)
MAKE_LITERAL_RATIONAL(236, 1)
MAKE_LITERAL_RATIONAL(237, 1)
MAKE_LITERAL_RATIONAL(238, 1)
MAKE_LITERAL_RATIONAL(239, 1)
MAKE_LITERAL_RATIONAL(240, 1)
MAKE_LITERAL_RATIONAL(241, 1)
MAKE_LITERAL_RATIONAL(242, 1)
MAKE_LITERAL_RATIONAL(243, 1)
MAKE_LITERAL_RATIONAL(244, 1)
MAKE_LITERAL_RATIONAL(245, 1)
MAKE_LITERAL_RATIONAL(246, 1)
MAKE_LITERAL_RATIONAL(247, 1)
MAKE_LITERAL_RATIONAL(248, 1)
MAKE_LITERAL_RATIONAL(249, 1)
MAKE_LITERAL_RATIONAL(250, 1)
MAKE_LITERAL_RATIONAL(251, 1)
MAKE_LITERAL_RATIONAL(252, 1)
MAKE_LITERAL_RATIONAL(253, 1)
MAKE_LITERAL_RATIONAL(254, 1)
MAKE_LITERAL_RATIONAL(255, 1)
MAKE_LITERAL_RATIONAL(256, 1)
MAKE_LITERAL_RATIONAL(257, 1)
MAKE_LITERAL_RATIONAL(258, 1)
MAKE_LITERAL_RATIONAL(259, 1)
MAKE_LITERAL_RATIONAL(260, 1)
MAKE_LITERAL_RATIONAL(261, 1)
MAKE_LITERAL_RATIONAL(262, 1)
MAKE_LITERAL_RATIONAL(263, 1)
MAKE_LITERAL_RATIONAL(264, 1)
MAKE_LITERAL_RATIONAL(265, 1)
MAKE_LITERAL_RATIONAL(266, 1)
MAKE_LITERAL_RATIONAL(267, 1)
MAKE_LITERAL_RATIONAL(268, 1)
MAKE_LITERAL_RATIONAL(269, 1)
MAKE_LITERAL_RATIONAL(270, 1)
MAKE_LITERAL_RATIONAL(271, 1)
MAKE_LITERAL_RATIONAL(272, 1)
MAKE_LITERAL_RATIONAL(273, 1)
MAKE_LITERAL_RATIONAL(274, 1)
MAKE_LITERAL_RATIONAL(275, 1)
MAKE_LITERAL_RATIONAL(276, 1)
MAKE_LITERAL_RATIONAL(277, 1)
MAKE_LITERAL_RATIONAL(278, 1)
MAKE_LITERAL_RATIONAL(279, 1)
MAKE_LITERAL_RATIONAL(280, 1)
MAKE_LITERAL_RATIONAL(281, 1)
MAKE_LITERAL_RATIONAL(282, 1)
MAKE_LITERAL_RATIONAL(283, 1)
MAKE_LITERAL_RATIONAL(284, 1)
MAKE_LITERAL_RATIONAL(285, 1)
MAKE_LITERAL_RATIONAL(286, 1)
MAKE_LITERAL_RATIONAL(287, 1)
MAKE_LITERAL_RATIONAL(288, 1)
MAKE_LITERAL_RATIONAL(289, 1)
MAKE_LITERAL_RATIONAL(290, 1)
MAKE_LITERAL_RATIONAL(291, 1)
MAKE_LITERAL_RATIONAL(292, 1)
MAKE_LITERAL_RATIONAL(293, 1)
MAKE_LITERAL_RATIONAL(294, 1)
MAKE_LITERAL_RATIONAL(295, 1)
MAKE_LITERAL_RATIONAL(296, 1)
MAKE_LITERAL_RATIONAL(297, 1)
MAKE_LITERAL_RATIONAL(298, 1)
MAKE_LITERAL_RATIONAL(299, 1)
MAKE_LITERAL_RATIONAL(300, 1)
MAKE_LITERAL_RATIONAL(301, 1)
MAKE_LITERAL_RATIONAL(302, 1)
MAKE_LITERAL_RATIONAL(303, 1)
MAKE_LITERAL_RATIONAL(304, 1)
MAKE_LITERAL_RATIONAL(305, 1)
MAKE_LITERAL_RATIONAL(306, 1)
MAKE_LITERAL_RATIONAL(307, 1)
MAKE_LITERAL_RATIONAL(308, 1)
MAKE_LITERAL_RATIONAL(309, 1)
MAKE_LITERAL_RATIONAL(310, 1)
MAKE_LITERAL_RATIONAL(311, 1)
MAKE_LITERAL_RATIONAL(312, 1)
MAKE_LITERAL_RATIONAL(313, 1)
MAKE_LITERAL_RATIONAL(314, 1)
MAKE_LITERAL_RATIONAL(315, 1)
MAKE_LITERAL_RATIONAL(316, 1)
MAKE_LITERAL_RATIONAL(317, 1)
MAKE_LITERAL_RATIONAL(318, 1)
MAKE_LITERAL_RATIONAL(319, 1)
MAKE_LITERAL_RATIONAL(320, 1)
MAKE_LITERAL_RATIONAL(321, 1)
MAKE_LITERAL_RATIONAL(322, 1)
MAKE_LITERAL_RATIONAL(323, 1)
MAKE_LITERAL_RATIONAL(324, 1)
MAKE_LITERAL_RATIONAL(325, 1)
MAKE_LITERAL_RATIONAL(326, 1)
MAKE_LITERAL_RATIONAL(327, 1)
MAKE_LITERAL_RATIONAL(328, 1)
MAKE_LITERAL_RATIONAL(329, 1)
MAKE_LITERAL_RATIONAL(330, 1)
MAKE_LITERAL_RATIONAL(331, 1)
MAKE_LITERAL_RATIONAL(332, 1)
MAKE_LITERAL_RATIONAL(333, 1)
MAKE_LITERAL_RATIONAL(334, 1)
MAKE_LITERAL_RATIONAL(335, 1)
MAKE_LITERAL_RATIONAL(336, 1)
MAKE_LITERAL_RATIONAL(337, 1)
MAKE_LITERAL_RATIONAL(338, 1)
MAKE_LITERAL_RATIONAL(339, 1)
MAKE_LITERAL_RATIONAL(340, 1)
MAKE_LITERAL_RATIONAL(341, 1)
MAKE_LITERAL_RATIONAL(342, 1)
MAKE_LITERAL_RATIONAL(343, 1)
MAKE_LITERAL_RATIONAL(344, 1)
MAKE_LITERAL_RATIONAL(345, 1)
MAKE_LITERAL_RATIONAL(346, 1)
MAKE_LITERAL_RATIONAL(347, 1)
MAKE_LITERAL_RATIONAL(348, 1)
MAKE_LITERAL_RATIONAL(349, 1)
MAKE_LITERAL_RATIONAL(350, 1)
MAKE_LITERAL_RATIONAL(351, 1)
MAKE_LITERAL_RATIONAL(352, 1)
MAKE_LITERAL_RATIONAL(353, 1)
MAKE_LITERAL_RATIONAL(354, 1)
MAKE_LITERAL_RATIONAL(355, 1)
MAKE_LITERAL_RATIONAL(356, 1)
MAKE_LITERAL_RATIONAL(357, 1)
MAKE_LITERAL_RATIONAL(358, 1)
MAKE_LITERAL_RATIONAL(359, 1)
MAKE_LITERAL_RATIONAL(360, 1)
MAKE_LITERAL_RATIONAL(361, 1)
MAKE_LITERAL_RATIONAL(362, 1)
MAKE_LITERAL_RATIONAL(363, 1)
MAKE_LITERAL_RATIONAL(364, 1)
MAKE_LITERAL_RATIONAL(365, 1)
MAKE_LITERAL_RATIONAL(366, 1)
MAKE_LITERAL_RATIONAL(367, 1)
MAKE_LITERAL_RATIONAL(368, 1)
MAKE_LITERAL_RATIONAL(369, 1)
MAKE_LITERAL_RATIONAL(370, 1)
MAKE_LITERAL_RATIONAL(371, 1)
MAKE_LITERAL_RATIONAL(372, 1)
MAKE_LITERAL_RATIONAL(373, 1)
MAKE_LITERAL_RATIONAL(374, 1)
MAKE_LITERAL_RATIONAL(375, 1)
MAKE_LITERAL_RATIONAL(376, 1)
MAKE_LITERAL_RATIONAL(377, 1)
MAKE_LITERAL_RATIONAL(378, 1)
MAKE_LITERAL_RATIONAL(379, 1)
MAKE_LITERAL_RATIONAL(380, 1)
MAKE_LITERAL_RATIONAL(381, 1)
MAKE_LITERAL_RATIONAL(382, 1)
MAKE_LITERAL_RATIONAL(383, 1)
MAKE_LITERAL_RATIONAL(384, 1)
MAKE_LITERAL_RATIONAL(385, 1)
MAKE_LITERAL_RATIONAL(386, 1)
MAKE_LITERAL_RATIONAL(387, 1)
MAKE_LITERAL_RATIONAL(388, 1)
MAKE_LITERAL_RATIONAL(389, 1)
MAKE_LITERAL_RATIONAL(390, 1)
MAKE_LITERAL_RATIONAL(391, 1)
MAKE_LITERAL_RATIONAL(392, 1)
MAKE_LITERAL_RATIONAL(393, 1)
MAKE_LITERAL_RATIONAL(394, 1)
MAKE_LITERAL_RATIONAL(395, 1)
MAKE_LITERAL_RATIONAL(396, 1)
MAKE_LITERAL_RATIONAL(397, 1)
MAKE_LITERAL_RATIONAL(398, 1)
MAKE_LITERAL_RATIONAL(399, 1)
MAKE_LITERAL_RATIONAL(400, 1)
MAKE_LITERAL_RATIONAL(401, 1)
MAKE_LITERAL_RATIONAL(402, 1)
MAKE_LITERAL_RATIONAL(403, 1)
MAKE_LITERAL_RATIONAL(404, 1)
MAKE_LITERAL_RATIONAL(405, 1)
MAKE_LITERAL_RATIONAL(406, 1)
MAKE_LITERAL_RATIONAL(407, 1)
MAKE_LITERAL_RATIONAL(408, 1)
MAKE_LITERAL_RATIONAL(409, 1)
MAKE_LITERAL_RATIONAL(410, 1)
MAKE_LITERAL_RATIONAL(411, 1)
MAKE_LITERAL_RATIONAL(412, 1)
MAKE_LITERAL_RATIONAL(413, 1)
MAKE_LITERAL_RATIONAL(414, 1)
MAKE_LITERAL_RATIONAL(415, 1)
MAKE_LITERAL_RATIONAL(416, 1)
MAKE_LITERAL_RATIONAL(417, 1)
MAKE_LITERAL_RATIONAL(418, 1)
MAKE_LITERAL_RATIONAL(419, 1)
MAKE_LITERAL_RATIONAL(420, 1)
MAKE_LITERAL_RATIONAL(421, 1)
MAKE_LITERAL_RATIONAL(422, 1)
MAKE_LITERAL_RATIONAL(423, 1)
MAKE_LITERAL_RATIONAL(424, 1)
MAKE_LITERAL_RATIONAL(425, 1)
MAKE_LITERAL_RATIONAL(426, 1)
MAKE_LITERAL_RATIONAL(427, 1)
MAKE_LITERAL_RATIONAL(428, 1)
MAKE_LITERAL_RATIONAL(429, 1)
MAKE_LITERAL_RATIONAL(430, 1)
MAKE_LITERAL_RATIONAL(431, 1)
MAKE_LITERAL_RATIONAL(432, 1)
MAKE_LITERAL_RATIONAL(433, 1)
MAKE_LITERAL_RATIONAL(434, 1)
MAKE_LITERAL_RATIONAL(435, 1)
MAKE_LITERAL_RATIONAL(436, 1)
MAKE_LITERAL_RATIONAL(437, 1)
MAKE_LITERAL_RATIONAL(438, 1)
MAKE_LITERAL_RATIONAL(439, 1)
MAKE_LITERAL_RATIONAL(440, 1)
MAKE_LITERAL_RATIONAL(441, 1)
MAKE_LITERAL_RATIONAL(442, 1)
MAKE_LITERAL_RATIONAL(443, 1)
MAKE_LITERAL_RATIONAL(444, 1)
MAKE_LITERAL_RATIONAL(445, 1)
MAKE_LITERAL_RATIONAL(446, 1)
MAKE_LITERAL_RATIONAL(447, 1)
MAKE_LITERAL_RATIONAL(448, 1)
MAKE_LITERAL_RATIONAL(449, 1)
MAKE_LITERAL_RATIONAL(450, 1)
MAKE_LITERAL_RATIONAL(451, 1)
MAKE_LITERAL_RATIONAL(452, 1)
MAKE_LITERAL_RATIONAL(453, 1)
MAKE_LITERAL_RATIONAL(454, 1)
MAKE_LITERAL_RATIONAL(455, 1)
MAKE_LITERAL_RATIONAL(456, 1)
MAKE_LITERAL_RATIONAL(457, 1)
MAKE_LITERAL_RATIONAL(458, 1)
MAKE_LITERAL_RATIONAL(459, 1)
MAKE_LITERAL_RATIONAL(460, 1)
MAKE_LITERAL_RATIONAL(461, 1)
MAKE_LITERAL_RATIONAL(462, 1)
MAKE_LITERAL_RATIONAL(463, 1)
MAKE_LITERAL_RATIONAL(464, 1)
MAKE_LITERAL_RATIONAL(465, 1)
MAKE_LITERAL_RATIONAL(466, 1)
MAKE_LITERAL_RATIONAL(467, 1)
MAKE_LITERAL_RATIONAL(468, 1)
MAKE_LITERAL_RATIONAL(469, 1)
MAKE_LITERAL_RATIONAL(470, 1)
MAKE_LITERAL_RATIONAL(471, 1)
MAKE_LITERAL_RATIONAL(472, 1)
MAKE_LITERAL_RATIONAL(473, 1)
MAKE_LITERAL_RATIONAL(474, 1)
MAKE_LITERAL_RATIONAL(475, 1)
MAKE_LITERAL_RATIONAL(476, 1)
MAKE_LITERAL_RATIONAL(477, 1)
MAKE_LITERAL_RATIONAL(478, 1)
MAKE_LITERAL_RATIONAL(479, 1)
MAKE_LITERAL_RATIONAL(480, 1)
MAKE_LITERAL_RATIONAL(481, 1)
MAKE_LITERAL_RATIONAL(482, 1)
MAKE_LITERAL_RATIONAL(483, 1)
MAKE_LITERAL_RATIONAL(484, 1)
MAKE_LITERAL_RATIONAL(485, 1)
MAKE_LITERAL_RATIONAL(486, 1)
MAKE_LITERAL_RATIONAL(487, 1)
MAKE_LITERAL_RATIONAL(488, 1)
MAKE_LITERAL_RATIONAL(489, 1)
MAKE_LITERAL_RATIONAL(490, 1)
MAKE_LITERAL_RATIONAL(491, 1)
MAKE_LITERAL_RATIONAL(492, 1)
MAKE_LITERAL_RATIONAL(493, 1)
MAKE_LITERAL_RATIONAL(494, 1)
MAKE_LITERAL_RATIONAL(495, 1)
MAKE_LITERAL_RATIONAL(496, 1)
MAKE_LITERAL_RATIONAL(497, 1)
MAKE_LITERAL_RATIONAL(498, 1)
MAKE_LITERAL_RATIONAL(499, 1)
MAKE_LITERAL_RATIONAL(500, 1)
MAKE_LITERAL_RATIONAL(501, 1)
MAKE_LITERAL_RATIONAL(502, 1)
MAKE_LITERAL_RATIONAL(503, 1)
MAKE_LITERAL_RATIONAL(504, 1)
MAKE_LITERAL_RATIONAL(505, 1)
MAKE_LITERAL_RATIONAL(506, 1)
MAKE_LITERAL_RATIONAL(507, 1)
MAKE_LITERAL_RATIONAL(508, 1)
MAKE_LITERAL_RATIONAL(509, 1)
MAKE_LITERAL_RATIONAL(510, 1)
MAKE_LITERAL_RATIONAL(511, 1)
MAKE_LITERAL_RATIONAL(512, 1)
MAKE_LITERAL_RATIONAL(513, 1)
MAKE_LITERAL_RATIONAL(514, 1)
MAKE_LITERAL_RATIONAL(515, 1)
MAKE_LITERAL_RATIONAL(516, 1)
MAKE_LITERAL_RATIONAL(517, 1)
MAKE_LITERAL_RATIONAL(518, 1)
MAKE_LITERAL_RATIONAL(519, 1)
MAKE_LITERAL_RATIONAL(520, 1)
MAKE_LITERAL_RATIONAL(521, 1)
MAKE_LITERAL_RATIONAL(522, 1)
MAKE_LITERAL_RATIONAL(523, 1)
MAKE_LITERAL_RATIONAL(524, 1)
MAKE_LITERAL_RATIONAL(525, 1)
MAKE_LITERAL_RATIONAL(526, 1)
MAKE_LITERAL_RATIONAL(527, 1)
MAKE_LITERAL_RATIONAL(528, 1)
MAKE_LITERAL_RATIONAL(529, 1)
MAKE_LITERAL_RATIONAL(530, 1)
MAKE_LITERAL_RATIONAL(531, 1)
MAKE_LITERAL_RATIONAL(532, 1)
MAKE_LITERAL_RATIONAL(533, 1)
MAKE_LITERAL_RATIONAL(534, 1)
MAKE_LITERAL_RATIONAL(535, 1)
MAKE_LITERAL_RATIONAL(536, 1)
MAKE_LITERAL_RATIONAL(537, 1)
MAKE_LITERAL_RATIONAL(538, 1)
MAKE_LITERAL_RATIONAL(539, 1)
MAKE_LITERAL_RATIONAL(540, 1)
MAKE_LITERAL_RATIONAL(541, 1)
MAKE_LITERAL_RATIONAL(542, 1)
MAKE_LITERAL_RATIONAL(543, 1)
MAKE_LITERAL_RATIONAL(544, 1)
MAKE_LITERAL_RATIONAL(545, 1)
MAKE_LITERAL_RATIONAL(546, 1)
MAKE_LITERAL_RATIONAL(547, 1)
MAKE_LITERAL_RATIONAL(548, 1)
MAKE_LITERAL_RATIONAL(549, 1)
MAKE_LITERAL_RATIONAL(550, 1)
MAKE_LITERAL_RATIONAL(551, 1)
MAKE_LITERAL_RATIONAL(552, 1)
MAKE_LITERAL_RATIONAL(553, 1)
MAKE_LITERAL_RATIONAL(554, 1)
MAKE_LITERAL_RATIONAL(555, 1)
MAKE_LITERAL_RATIONAL(556, 1)
MAKE_LITERAL_RATIONAL(557, 1)
MAKE_LITERAL_RATIONAL(558, 1)
MAKE_LITERAL_RATIONAL(559, 1)
MAKE_LITERAL_RATIONAL(560, 1)
MAKE_LITERAL_RATIONAL(561, 1)
MAKE_LITERAL_RATIONAL(562, 1)
MAKE_LITERAL_RATIONAL(563, 1)
MAKE_LITERAL_RATIONAL(564, 1)
MAKE_LITERAL_RATIONAL(565, 1)
MAKE_LITERAL_RATIONAL(566, 1)
MAKE_LITERAL_RATIONAL(567, 1)
MAKE_LITERAL_RATIONAL(568, 1)
MAKE_LITERAL_RATIONAL(569, 1)
MAKE_LITERAL_RATIONAL(570, 1)
MAKE_LITERAL_RATIONAL(571, 1)
MAKE_LITERAL_RATIONAL(572, 1)
MAKE_LITERAL_RATIONAL(573, 1)
MAKE_LITERAL_RATIONAL(574, 1)
MAKE_LITERAL_RATIONAL(575, 1)
MAKE_LITERAL_RATIONAL(576, 1)
MAKE_LITERAL_RATIONAL(577, 1)
MAKE_LITERAL_RATIONAL(578, 1)
MAKE_LITERAL_RATIONAL(579, 1)
MAKE_LITERAL_RATIONAL(580, 1)
MAKE_LITERAL_RATIONAL(581, 1)
MAKE_LITERAL_RATIONAL(582, 1)
MAKE_LITERAL_RATIONAL(583, 1)
MAKE_LITERAL_RATIONAL(584, 1)
MAKE_LITERAL_RATIONAL(585, 1)
MAKE_LITERAL_RATIONAL(586, 1)
MAKE_LITERAL_RATIONAL(587, 1)
MAKE_LITERAL_RATIONAL(588, 1)
MAKE_LITERAL_RATIONAL(589, 1)
MAKE_LITERAL_RATIONAL(590, 1)
MAKE_LITERAL_RATIONAL(591, 1)
MAKE_LITERAL_RATIONAL(592, 1)
MAKE_LITERAL_RATIONAL(593, 1)
MAKE_LITERAL_RATIONAL(594, 1)
MAKE_LITERAL_RATIONAL(595, 1)
MAKE_LITERAL_RATIONAL(596, 1)
MAKE_LITERAL_RATIONAL(597, 1)
MAKE_LITERAL_RATIONAL(598, 1)
MAKE_LITERAL_RATIONAL(599, 1)
MAKE_LITERAL_RATIONAL(600, 1)
MAKE_LITERAL_RATIONAL(601, 1)
MAKE_LITERAL_RATIONAL(602, 1)
MAKE_LITERAL_RATIONAL(603, 1)
MAKE_LITERAL_RATIONAL(604, 1)
MAKE_LITERAL_RATIONAL(605, 1)
MAKE_LITERAL_RATIONAL(606, 1)
MAKE_LITERAL_RATIONAL(607, 1)
MAKE_LITERAL_RATIONAL(608, 1)
MAKE_LITERAL_RATIONAL(609, 1)
MAKE_LITERAL_RATIONAL(610, 1)
MAKE_LITERAL_RATIONAL(611, 1)
MAKE_LITERAL_RATIONAL(612, 1)
MAKE_LITERAL_RATIONAL(613, 1)
MAKE_LITERAL_RATIONAL(614, 1)
MAKE_LITERAL_RATIONAL(615, 1)
MAKE_LITERAL_RATIONAL(616, 1)
MAKE_LITERAL_RATIONAL(617, 1)
MAKE_LITERAL_RATIONAL(618, 1)
MAKE_LITERAL_RATIONAL(619, 1)
MAKE_LITERAL_RATIONAL(620, 1)
MAKE_LITERAL_RATIONAL(621, 1)
MAKE_LITERAL_RATIONAL(622, 1)
MAKE_LITERAL_RATIONAL(623, 1)
MAKE_LITERAL_RATIONAL(624, 1)
MAKE_LITERAL_RATIONAL(625, 1)
MAKE_LITERAL_RATIONAL(626, 1)
MAKE_LITERAL_RATIONAL(627, 1)
MAKE_LITERAL_RATIONAL(628, 1)
MAKE_LITERAL_RATIONAL(629, 1)
MAKE_LITERAL_RATIONAL(630, 1)
MAKE_LITERAL_RATIONAL(631, 1)
MAKE_LITERAL_RATIONAL(632, 1)
MAKE_LITERAL_RATIONAL(633, 1)
MAKE_LITERAL_RATIONAL(634, 1)
MAKE_LITERAL_RATIONAL(635, 1)
MAKE_LITERAL_RATIONAL(636, 1)
MAKE_LITERAL_RATIONAL(637, 1)
MAKE_LITERAL_RATIONAL(638, 1)
MAKE_LITERAL_RATIONAL(639, 1)
MAKE_LITERAL_RATIONAL(640, 1)
MAKE_LITERAL_RATIONAL(641, 1)
MAKE_LITERAL_RATIONAL(642, 1)
MAKE_LITERAL_RATIONAL(643, 1)
MAKE_LITERAL_RATIONAL(644, 1)
MAKE_LITERAL_RATIONAL(645, 1)
MAKE_LITERAL_RATIONAL(646, 1)
MAKE_LITERAL_RATIONAL(647, 1)
MAKE_LITERAL_RATIONAL(648, 1)
MAKE_LITERAL_RATIONAL(649, 1)
MAKE_LITERAL_RATIONAL(650, 1)
MAKE_LITERAL_RATIONAL(651, 1)
MAKE_LITERAL_RATIONAL(652, 1)
MAKE_LITERAL_RATIONAL(653, 1)
MAKE_LITERAL_RATIONAL(654, 1)
MAKE_LITERAL_RATIONAL(655, 1)
MAKE_LITERAL_RATIONAL(656, 1)
MAKE_LITERAL_RATIONAL(657, 1)
MAKE_LITERAL_RATIONAL(658, 1)
MAKE_LITERAL_RATIONAL(659, 1)
MAKE_LITERAL_RATIONAL(660, 1)
MAKE_LITERAL_RATIONAL(661, 1)
MAKE_LITERAL_RATIONAL(662, 1)
MAKE_LITERAL_RATIONAL(663, 1)
MAKE_LITERAL_RATIONAL(664, 1)
MAKE_LITERAL_RATIONAL(665, 1)
MAKE_LITERAL_RATIONAL(666, 1)
MAKE_LITERAL_RATIONAL(667, 1)
MAKE_LITERAL_RATIONAL(668, 1)
MAKE_LITERAL_RATIONAL(669, 1)
MAKE_LITERAL_RATIONAL(670, 1)
MAKE_LITERAL_RATIONAL(671, 1)
MAKE_LITERAL_RATIONAL(672, 1)
MAKE_LITERAL_RATIONAL(673, 1)
MAKE_LITERAL_RATIONAL(674, 1)
MAKE_LITERAL_RATIONAL(675, 1)
MAKE_LITERAL_RATIONAL(676, 1)
MAKE_LITERAL_RATIONAL(677, 1)
MAKE_LITERAL_RATIONAL(678, 1)
MAKE_LITERAL_RATIONAL(679, 1)
MAKE_LITERAL_RATIONAL(680, 1)
MAKE_LITERAL_RATIONAL(681, 1)
MAKE_LITERAL_RATIONAL(682, 1)
MAKE_LITERAL_RATIONAL(683, 1)
MAKE_LITERAL_RATIONAL(684, 1)
MAKE_LITERAL_RATIONAL(685, 1)
MAKE_LITERAL_RATIONAL(686, 1)
MAKE_LITERAL_RATIONAL(687, 1)
MAKE_LITERAL_RATIONAL(688, 1)
MAKE_LITERAL_RATIONAL(689, 1)
MAKE_LITERAL_RATIONAL(690, 1)
MAKE_LITERAL_RATIONAL(691, 1)
MAKE_LITERAL_RATIONAL(692, 1)
MAKE_LITERAL_RATIONAL(693, 1)
MAKE_LITERAL_RATIONAL(694, 1)
MAKE_LITERAL_RATIONAL(695, 1)
MAKE_LITERAL_RATIONAL(696, 1)
MAKE_LITERAL_RATIONAL(697, 1)
MAKE_LITERAL_RATIONAL(698, 1)
MAKE_LITERAL_RATIONAL(699, 1)
MAKE_LITERAL_RATIONAL(700, 1)
MAKE_LITERAL_RATIONAL(701, 1)
MAKE_LITERAL_RATIONAL(702, 1)
MAKE_LITERAL_RATIONAL(703, 1)
MAKE_LITERAL_RATIONAL(704, 1)
MAKE_LITERAL_RATIONAL(705, 1)
MAKE_LITERAL_RATIONAL(706, 1)
MAKE_LITERAL_RATIONAL(707, 1)
MAKE_LITERAL_RATIONAL(708, 1)
MAKE_LITERAL_RATIONAL(709, 1)
MAKE_LITERAL_RATIONAL(710, 1)
MAKE_LITERAL_RATIONAL(711, 1)
MAKE_LITERAL_RATIONAL(712, 1)
MAKE_LITERAL_RATIONAL(713, 1)
MAKE_LITERAL_RATIONAL(714, 1)
MAKE_LITERAL_RATIONAL(715, 1)
MAKE_LITERAL_RATIONAL(716, 1)
MAKE_LITERAL_RATIONAL(717, 1)
MAKE_LITERAL_RATIONAL(718, 1)
MAKE_LITERAL_RATIONAL(719, 1)
MAKE_LITERAL_RATIONAL(720, 1)
MAKE_LITERAL_RATIONAL(721, 1)
MAKE_LITERAL_RATIONAL(722, 1)
MAKE_LITERAL_RATIONAL(723, 1)
MAKE_LITERAL_RATIONAL(724, 1)
MAKE_LITERAL_RATIONAL(725, 1)
MAKE_LITERAL_RATIONAL(726, 1)
MAKE_LITERAL_RATIONAL(727, 1)
MAKE_LITERAL_RATIONAL(728, 1)
MAKE_LITERAL_RATIONAL(729, 1)
MAKE_LITERAL_RATIONAL(730, 1)
MAKE_LITERAL_RATIONAL(731, 1)
MAKE_LITERAL_RATIONAL(732, 1)
MAKE_LITERAL_RATIONAL(733, 1)
MAKE_LITERAL_RATIONAL(734, 1)
MAKE_LITERAL_RATIONAL(735, 1)
MAKE_LITERAL_RATIONAL(736, 1)
MAKE_LITERAL_RATIONAL(737, 1)
MAKE_LITERAL_RATIONAL(738, 1)
MAKE_LITERAL_RATIONAL(739, 1)
MAKE_LITERAL_RATIONAL(740, 1)
MAKE_LITERAL_RATIONAL(741, 1)
MAKE_LITERAL_RATIONAL(742, 1)
MAKE_LITERAL_RATIONAL(743, 1)
MAKE_LITERAL_RATIONAL(744, 1)
MAKE_LITERAL_RATIONAL(745, 1)
MAKE_LITERAL_RATIONAL(746, 1)
MAKE_LITERAL_RATIONAL(747, 1)
MAKE_LITERAL_RATIONAL(748, 1)
MAKE_LITERAL_RATIONAL(749, 1)
MAKE_LITERAL_RATIONAL(750, 1)
MAKE_LITERAL_RATIONAL(751, 1)
MAKE_LITERAL_RATIONAL(752, 1)
MAKE_LITERAL_RATIONAL(753, 1)
MAKE_LITERAL_RATIONAL(754, 1)
MAKE_LITERAL_RATIONAL(755, 1)
MAKE_LITERAL_RATIONAL(756, 1)
MAKE_LITERAL_RATIONAL(757, 1)
MAKE_LITERAL_RATIONAL(758, 1)
MAKE_LITERAL_RATIONAL(759, 1)
MAKE_LITERAL_RATIONAL(760, 1)
MAKE_LITERAL_RATIONAL(761, 1)
MAKE_LITERAL_RATIONAL(762, 1)
MAKE_LITERAL_RATIONAL(763, 1)
MAKE_LITERAL_RATIONAL(764, 1)
MAKE_LITERAL_RATIONAL(765, 1)
MAKE_LITERAL_RATIONAL(766, 1)
MAKE_LITERAL_RATIONAL(767, 1)
MAKE_LITERAL_RATIONAL(768, 1)
MAKE_LITERAL_RATIONAL(769, 1)
MAKE_LITERAL_RATIONAL(770, 1)
MAKE_LITERAL_RATIONAL(771, 1)
MAKE_LITERAL_RATIONAL(772, 1)
MAKE_LITERAL_RATIONAL(773, 1)
MAKE_LITERAL_RATIONAL(774, 1)
MAKE_LITERAL_RATIONAL(775, 1)
MAKE_LITERAL_RATIONAL(776, 1)
MAKE_LITERAL_RATIONAL(777, 1)
MAKE_LITERAL_RATIONAL(778, 1)
MAKE_LITERAL_RATIONAL(779, 1)
MAKE_LITERAL_RATIONAL(780, 1)
MAKE_LITERAL_RATIONAL(781, 1)
MAKE_LITERAL_RATIONAL(782, 1)
MAKE_LITERAL_RATIONAL(783, 1)
MAKE_LITERAL_RATIONAL(784, 1)
MAKE_LITERAL_RATIONAL(785, 1)
MAKE_LITERAL_RATIONAL(786, 1)
MAKE_LITERAL_RATIONAL(787, 1)
MAKE_LITERAL_RATIONAL(788, 1)
MAKE_LITERAL_RATIONAL(789, 1)
MAKE_LITERAL_RATIONAL(790, 1)
MAKE_LITERAL_RATIONAL(791, 1)
MAKE_LITERAL_RATIONAL(792, 1)
MAKE_LITERAL_RATIONAL(793, 1)
MAKE_LITERAL_RATIONAL(794, 1)
MAKE_LITERAL_RATIONAL(795, 1)
MAKE_LITERAL_RATIONAL(796, 1)
MAKE_LITERAL_RATIONAL(797, 1)
MAKE_LITERAL_RATIONAL(798, 1)
MAKE_LITERAL_RATIONAL(799, 1)
MAKE_LITERAL_RATIONAL(800, 1)
MAKE_LITERAL_RATIONAL(801, 1)
MAKE_LITERAL_RATIONAL(802, 1)
MAKE_LITERAL_RATIONAL(803, 1)
MAKE_LITERAL_RATIONAL(804, 1)
MAKE_LITERAL_RATIONAL(805, 1)
MAKE_LITERAL_RATIONAL(806, 1)
MAKE_LITERAL_RATIONAL(807, 1)
MAKE_LITERAL_RATIONAL(808, 1)
MAKE_LITERAL_RATIONAL(809, 1)
MAKE_LITERAL_RATIONAL(810, 1)
MAKE_LITERAL_RATIONAL(811, 1)
MAKE_LITERAL_RATIONAL(812, 1)
MAKE_LITERAL_RATIONAL(813, 1)
MAKE_LITERAL_RATIONAL(814, 1)
MAKE_LITERAL_RATIONAL(815, 1)
MAKE_LITERAL_RATIONAL(816, 1)
MAKE_LITERAL_RATIONAL(817, 1)
MAKE_LITERAL_RATIONAL(818, 1)
MAKE_LITERAL_RATIONAL(819, 1)
MAKE_LITERAL_RATIONAL(820, 1)
MAKE_LITERAL_RATIONAL(821, 1)
MAKE_LITERAL_RATIONAL(822, 1)
MAKE_LITERAL_RATIONAL(823, 1)
MAKE_LITERAL_RATIONAL(824, 1)
MAKE_LITERAL_RATIONAL(825, 1)
MAKE_LITERAL_RATIONAL(826, 1)
MAKE_LITERAL_RATIONAL(827, 1)
MAKE_LITERAL_RATIONAL(828, 1)
MAKE_LITERAL_RATIONAL(829, 1)
MAKE_LITERAL_RATIONAL(830, 1)
MAKE_LITERAL_RATIONAL(831, 1)
MAKE_LITERAL_RATIONAL(832, 1)
MAKE_LITERAL_RATIONAL(833, 1)
MAKE_LITERAL_RATIONAL(834, 1)
MAKE_LITERAL_RATIONAL(835, 1)
MAKE_LITERAL_RATIONAL(836, 1)
MAKE_LITERAL_RATIONAL(837, 1)
MAKE_LITERAL_RATIONAL(838, 1)
MAKE_LITERAL_RATIONAL(839, 1)
MAKE_LITERAL_RATIONAL(840, 1)
MAKE_LITERAL_RATIONAL(841, 1)
MAKE_LITERAL_RATIONAL(842, 1)
MAKE_LITERAL_RATIONAL(843, 1)
MAKE_LITERAL_RATIONAL(844, 1)
MAKE_LITERAL_RATIONAL(845, 1)
MAKE_LITERAL_RATIONAL(846, 1)
MAKE_LITERAL_RATIONAL(847, 1)
MAKE_LITERAL_RATIONAL(848, 1)
MAKE_LITERAL_RATIONAL(849, 1)
MAKE_LITERAL_RATIONAL(850, 1)
MAKE_LITERAL_RATIONAL(851, 1)
MAKE_LITERAL_RATIONAL(852, 1)
MAKE_LITERAL_RATIONAL(853, 1)
MAKE_LITERAL_RATIONAL(854, 1)
MAKE_LITERAL_RATIONAL(855, 1)
MAKE_LITERAL_RATIONAL(856, 1)
MAKE_LITERAL_RATIONAL(857, 1)
MAKE_LITERAL_RATIONAL(858, 1)
MAKE_LITERAL_RATIONAL(859, 1)
MAKE_LITERAL_RATIONAL(860, 1)
MAKE_LITERAL_RATIONAL(861, 1)
MAKE_LITERAL_RATIONAL(862, 1)
MAKE_LITERAL_RATIONAL(863, 1)
MAKE_LITERAL_RATIONAL(864, 1)
MAKE_LITERAL_RATIONAL(865, 1)
MAKE_LITERAL_RATIONAL(866, 1)
MAKE_LITERAL_RATIONAL(867, 1)
MAKE_LITERAL_RATIONAL(868, 1)
MAKE_LITERAL_RATIONAL(869, 1)
MAKE_LITERAL_RATIONAL(870, 1)
MAKE_LITERAL_RATIONAL(871, 1)
MAKE_LITERAL_RATIONAL(872, 1)
MAKE_LITERAL_RATIONAL(873, 1)
MAKE_LITERAL_RATIONAL(874, 1)
MAKE_LITERAL_RATIONAL(875, 1)
MAKE_LITERAL_RATIONAL(876, 1)
MAKE_LITERAL_RATIONAL(877, 1)
MAKE_LITERAL_RATIONAL(878, 1)
MAKE_LITERAL_RATIONAL(879, 1)
MAKE_LITERAL_RATIONAL(880, 1)
MAKE_LITERAL_RATIONAL(881, 1)
MAKE_LITERAL_RATIONAL(882, 1)
MAKE_LITERAL_RATIONAL(883, 1)
MAKE_LITERAL_RATIONAL(884, 1)
MAKE_LITERAL_RATIONAL(885, 1)
MAKE_LITERAL_RATIONAL(886, 1)
MAKE_LITERAL_RATIONAL(887, 1)
MAKE_LITERAL_RATIONAL(888, 1)
MAKE_LITERAL_RATIONAL(889, 1)
MAKE_LITERAL_RATIONAL(890, 1)
MAKE_LITERAL_RATIONAL(891, 1)
MAKE_LITERAL_RATIONAL(892, 1)
MAKE_LITERAL_RATIONAL(893, 1)
MAKE_LITERAL_RATIONAL(894, 1)
MAKE_LITERAL_RATIONAL(895, 1)
MAKE_LITERAL_RATIONAL(896, 1)
MAKE_LITERAL_RATIONAL(897, 1)
MAKE_LITERAL_RATIONAL(898, 1)
MAKE_LITERAL_RATIONAL(899, 1)
MAKE_LITERAL_RATIONAL(900, 1)
MAKE_LITERAL_RATIONAL(901, 1)
MAKE_LITERAL_RATIONAL(902, 1)
MAKE_LITERAL_RATIONAL(903, 1)
MAKE_LITERAL_RATIONAL(904, 1)
MAKE_LITERAL_RATIONAL(905, 1)
MAKE_LITERAL_RATIONAL(906, 1)
MAKE_LITERAL_RATIONAL(907, 1)
MAKE_LITERAL_RATIONAL(908, 1)
MAKE_LITERAL_RATIONAL(909, 1)
MAKE_LITERAL_RATIONAL(910, 1)
MAKE_LITERAL_RATIONAL(911, 1)
MAKE_LITERAL_RATIONAL(912, 1)
MAKE_LITERAL_RATIONAL(913, 1)
MAKE_LITERAL_RATIONAL(914, 1)
MAKE_LITERAL_RATIONAL(915, 1)
MAKE_LITERAL_RATIONAL(916, 1)
MAKE_LITERAL_RATIONAL(917, 1)
MAKE_LITERAL_RATIONAL(918, 1)
MAKE_LITERAL_RATIONAL(919, 1)
MAKE_LITERAL_RATIONAL(920, 1)
MAKE_LITERAL_RATIONAL(921, 1)
MAKE_LITERAL_RATIONAL(922, 1)
MAKE_LITERAL_RATIONAL(923, 1)
MAKE_LITERAL_RATIONAL(924, 1)
MAKE_LITERAL_RATIONAL(925, 1)
MAKE_LITERAL_RATIONAL(926, 1)
MAKE_LITERAL_RATIONAL(927, 1)
MAKE_LITERAL_RATIONAL(928, 1)
MAKE_LITERAL_RATIONAL(929, 1)
MAKE_LITERAL_RATIONAL(930, 1)
MAKE_LITERAL_RATIONAL(931, 1)
MAKE_LITERAL_RATIONAL(932, 1)
MAKE_LITERAL_RATIONAL(933, 1)
MAKE_LITERAL_RATIONAL(934, 1)
MAKE_LITERAL_RATIONAL(935, 1)
MAKE_LITERAL_RATIONAL(936, 1)
MAKE_LITERAL_RATIONAL(937, 1)
MAKE_LITERAL_RATIONAL(938, 1)
MAKE_LITERAL_RATIONAL(939, 1)
MAKE_LITERAL_RATIONAL(940, 1)
MAKE_LITERAL_RATIONAL(941, 1)
MAKE_LITERAL_RATIONAL(942, 1)
MAKE_LITERAL_RATIONAL(943, 1)
MAKE_LITERAL_RATIONAL(944, 1)
MAKE_LITERAL_RATIONAL(945, 1)
MAKE_LITERAL_RATIONAL(946, 1)
MAKE_LITERAL_RATIONAL(947, 1)
MAKE_LITERAL_RATIONAL(948, 1)
MAKE_LITERAL_RATIONAL(949, 1)
MAKE_LITERAL_RATIONAL(950, 1)
MAKE_LITERAL_RATIONAL(951, 1)
MAKE_LITERAL_RATIONAL(952, 1)
MAKE_LITERAL_RATIONAL(953, 1)
MAKE_LITERAL_RATIONAL(954, 1)
MAKE_LITERAL_RATIONAL(955, 1)
MAKE_LITERAL_RATIONAL(956, 1)
MAKE_LITERAL_RATIONAL(957, 1)
MAKE_LITERAL_RATIONAL(958, 1)
MAKE_LITERAL_RATIONAL(959, 1)
MAKE_LITERAL_RATIONAL(960, 1)
MAKE_LITERAL_RATIONAL(961, 1)
MAKE_LITERAL_RATIONAL(962, 1)
MAKE_LITERAL_RATIONAL(963, 1)
MAKE_LITERAL_RATIONAL(964, 1)
MAKE_LITERAL_RATIONAL(965, 1)
MAKE_LITERAL_RATIONAL(966, 1)
MAKE_LITERAL_RATIONAL(967, 1)
MAKE_LITERAL_RATIONAL(968, 1)
MAKE_LITERAL_RATIONAL(969, 1)
MAKE_LITERAL_RATIONAL(970, 1)
MAKE_LITERAL_RATIONAL(971, 1)
MAKE_LITERAL_RATIONAL(972, 1)
MAKE_LITERAL_RATIONAL(973, 1)
MAKE_LITERAL_RATIONAL(974, 1)
MAKE_LITERAL_RATIONAL(975, 1)
MAKE_LITERAL_RATIONAL(976, 1)
MAKE_LITERAL_RATIONAL(977, 1)
MAKE_LITERAL_RATIONAL(978, 1)
MAKE_LITERAL_RATIONAL(979, 1)
MAKE_LITERAL_RATIONAL(980, 1)
MAKE_LITERAL_RATIONAL(981, 1)
MAKE_LITERAL_RATIONAL(982, 1)
MAKE_LITERAL_RATIONAL(983, 1)
MAKE_LITERAL_RATIONAL(984, 1)
MAKE_LITERAL_RATIONAL(985, 1)
MAKE_LITERAL_RATIONAL(986, 1)
MAKE_LITERAL_RATIONAL(987, 1)
MAKE_LITERAL_RATIONAL(988, 1)
MAKE_LITERAL_RATIONAL(989, 1)
MAKE_LITERAL_RATIONAL(990, 1)
MAKE_LITERAL_RATIONAL(991, 1)
MAKE_LITERAL_RATIONAL(992, 1)
MAKE_LITERAL_RATIONAL(993, 1)
MAKE_LITERAL_RATIONAL(994, 1)
MAKE_LITERAL_RATIONAL(995, 1)
MAKE_LITERAL_RATIONAL(996, 1)
MAKE_LITERAL_RATIONAL(997, 1)
MAKE_LITERAL_RATIONAL(998, 1)
MAKE_LITERAL_RATIONAL(999, 1)
MAKE_LITERAL_RATIONAL(1000, 1)
MAKE_LITERAL_RATIONAL(1001, 1)
MAKE_LITERAL_RATIONAL(1002, 1)
MAKE_LITERAL_RATIONAL(1003, 1)
MAKE_LITERAL_RATIONAL(1004, 1)
MAKE_LITERAL_RATIONAL(1005, 1)
MAKE_LITERAL_RATIONAL(1006, 1)
MAKE_LITERAL_RATIONAL(1007, 1)
MAKE_LITERAL_RATIONAL(1008, 1)
MAKE_LITERAL_RATIONAL(1009, 1)
MAKE_LITERAL_RATIONAL(1010, 1)
MAKE_LITERAL_RATIONAL(1011, 1)
MAKE_LITERAL_RATIONAL(1012, 1)
MAKE_LITERAL_RATIONAL(1013, 1)
MAKE_LITERAL_RATIONAL(1014, 1)
MAKE_LITERAL_RATIONAL(1015, 1)
MAKE_LITERAL_RATIONAL(1016, 1)
MAKE_LITERAL_RATIONAL(1017, 1)
MAKE_LITERAL_RATIONAL(1018, 1)
MAKE_LITERAL_RATIONAL(1019, 1)
MAKE_LITERAL_RATIONAL(1020, 1)
MAKE_LITERAL_RATIONAL(1021, 1)
MAKE_LITERAL_RATIONAL(1022, 1)
MAKE_LITERAL_RATIONAL(1023, 1)
MAKE_LITERAL_RATIONAL(1024, 1)
MAKE_LITERAL_RATIONAL(1025, 1)
MAKE_LITERAL_RATIONAL(1026, 1)
MAKE_LITERAL_RATIONAL(1027, 1)
MAKE_LITERAL_RATIONAL(1028, 1)
MAKE_LITERAL_RATIONAL(1029, 1)
MAKE_LITERAL_RATIONAL(1030, 1)
MAKE_LITERAL_RATIONAL(1031, 1)
MAKE_LITERAL_RATIONAL(1032, 1)
MAKE_LITERAL_RATIONAL(1033, 1)
MAKE_LITERAL_RATIONAL(1034, 1)
MAKE_LITERAL_RATIONAL(1035, 1)
MAKE_LITERAL_RATIONAL(1036, 1)
MAKE_LITERAL_RATIONAL(1037, 1)
MAKE_LITERAL_RATIONAL(1038, 1)
MAKE_LITERAL_RATIONAL(1039, 1)
MAKE_LITERAL_RATIONAL(1040, 1)
MAKE_LITERAL_RATIONAL(1041, 1)
MAKE_LITERAL_RATIONAL(1042, 1)
MAKE_LITERAL_RATIONAL(1043, 1)
MAKE_LITERAL_RATIONAL(1044, 1)
MAKE_LITERAL_RATIONAL(1045, 1)
MAKE_LITERAL_RATIONAL(1046, 1)
MAKE_LITERAL_RATIONAL(1047, 1)
MAKE_LITERAL_RATIONAL(1048, 1)
MAKE_LITERAL_RATIONAL(1049, 1)
MAKE_LITERAL_RATIONAL(1050, 1)
MAKE_LITERAL_RATIONAL(1051, 1)
MAKE_LITERAL_RATIONAL(1052, 1)
MAKE_LITERAL_RATIONAL(1053, 1)
MAKE_LITERAL_RATIONAL(1054, 1)
MAKE_LITERAL_RATIONAL(1055, 1)
MAKE_LITERAL_RATIONAL(1056, 1)
MAKE_LITERAL_RATIONAL(1057, 1)
MAKE_LITERAL_RATIONAL(1058, 1)
MAKE_LITERAL_RATIONAL(1059, 1)
MAKE_LITERAL_RATIONAL(1060, 1)
MAKE_LITERAL_RATIONAL(1061, 1)
MAKE_LITERAL_RATIONAL(1062, 1)
MAKE_LITERAL_RATIONAL(1063, 1)
MAKE_LITERAL_RATIONAL(1064, 1)
MAKE_LITERAL_RATIONAL(1065, 1)
MAKE_LITERAL_RATIONAL(1066, 1)
MAKE_LITERAL_RATIONAL(1067, 1)
MAKE_LITERAL_RATIONAL(1068, 1)
MAKE_LITERAL_RATIONAL(1069, 1)
MAKE_LITERAL_RATIONAL(1070, 1)
MAKE_LITERAL_RATIONAL(1071, 1)
MAKE_LITERAL_RATIONAL(1072, 1)
MAKE_LITERAL_RATIONAL(1073, 1)
MAKE_LITERAL_RATIONAL(1074, 1)
MAKE_LITERAL_RATIONAL(1075, 1)
MAKE_LITERAL_RATIONAL(1076, 1)
MAKE_LITERAL_RATIONAL(1077, 1)
MAKE_LITERAL_RATIONAL(1078, 1)
MAKE_LITERAL_RATIONAL(1079, 1)
MAKE_LITERAL_RATIONAL(1080, 1)
MAKE_LITERAL_RATIONAL(1081, 1)
MAKE_LITERAL_RATIONAL(1082, 1)
MAKE_LITERAL_RATIONAL(1083, 1)
MAKE_LITERAL_RATIONAL(1084, 1)
MAKE_LITERAL_RATIONAL(1085, 1)
MAKE_LITERAL_RATIONAL(1086, 1)
MAKE_LITERAL_RATIONAL(1087, 1)
MAKE_LITERAL_RATIONAL(1088, 1)
MAKE_LITERAL_RATIONAL(1089, 1)
MAKE_LITERAL_RATIONAL(1090, 1)
MAKE_LITERAL_RATIONAL(1091, 1)
MAKE_LITERAL_RATIONAL(1092, 1)
MAKE_LITERAL_RATIONAL(1093, 1)
MAKE_LITERAL_RATIONAL(1094, 1)
MAKE_LITERAL_RATIONAL(1095, 1)
MAKE_LITERAL_RATIONAL(1096, 1)
MAKE_LITERAL_RATIONAL(1097, 1)
MAKE_LITERAL_RATIONAL(1098, 1)
MAKE_LITERAL_RATIONAL(1099, 1)
MAKE_LITERAL_RATIONAL(1100, 1)
MAKE_LITERAL_RATIONAL(1101, 1)
MAKE_LITERAL_RATIONAL(1102, 1)
MAKE_LITERAL_RATIONAL(1103, 1)
MAKE_LITERAL_RATIONAL(1104, 1)
MAKE_LITERAL_RATIONAL(1105, 1)
MAKE_LITERAL_RATIONAL(1106, 1)
MAKE_LITERAL_RATIONAL(1107, 1)
MAKE_LITERAL_RATIONAL(1108, 1)
MAKE_LITERAL_RATIONAL(1109, 1)
MAKE_LITERAL_RATIONAL(1110, 1)
MAKE_LITERAL_RATIONAL(1111, 1)
MAKE_LITERAL_RATIONAL(1112, 1)
MAKE_LITERAL_RATIONAL(1113, 1)
MAKE_LITERAL_RATIONAL(1114, 1)
MAKE_LITERAL_RATIONAL(1115, 1)
MAKE_LITERAL_RATIONAL(1116, 1)
MAKE_LITERAL_RATIONAL(1117, 1)
MAKE_LITERAL_RATIONAL(1118, 1)
MAKE_LITERAL_RATIONAL(1119, 1)
MAKE_LITERAL_RATIONAL(1120, 1)
MAKE_LITERAL_RATIONAL(1121, 1)
MAKE_LITERAL_RATIONAL(1122, 1)
MAKE_LITERAL_RATIONAL(1123, 1)
MAKE_LITERAL_RATIONAL(1124, 1)
MAKE_LITERAL_RATIONAL(1125, 1)
MAKE_LITERAL_RATIONAL(1126, 1)
MAKE_LITERAL_RATIONAL(1127, 1)
MAKE_LITERAL_RATIONAL(1128, 1)
MAKE_LITERAL_RATIONAL(1129, 1)
MAKE_LITERAL_RATIONAL(1130, 1)
MAKE_LITERAL_RATIONAL(1131, 1)
MAKE_LITERAL_RATIONAL(1132, 1)
MAKE_LITERAL_RATIONAL(1133, 1)
MAKE_LITERAL_RATIONAL(1134, 1)
MAKE_LITERAL_RATIONAL(1135, 1)
MAKE_LITERAL_RATIONAL(1136, 1)
MAKE_LITERAL_RATIONAL(1137, 1)
MAKE_LITERAL_RATIONAL(1138, 1)
MAKE_LITERAL_RATIONAL(1139, 1)
MAKE_LITERAL_RATIONAL(1140, 1)
MAKE_LITERAL_RATIONAL(1141, 1)
MAKE_LITERAL_RATIONAL(1142, 1)
MAKE_LITERAL_RATIONAL(1143, 1)
MAKE_LITERAL_RATIONAL(1144, 1)
MAKE_LITERAL_RATIONAL(1145, 1)
MAKE_LITERAL_RATIONAL(1146, 1)
MAKE_LITERAL_RATIONAL(1147, 1)
MAKE_LITERAL_RATIONAL(1148, 1)
MAKE_LITERAL_RATIONAL(1149, 1)
MAKE_LITERAL_RATIONAL(1150, 1)
MAKE_LITERAL_RATIONAL(1151, 1)
MAKE_LITERAL_RATIONAL(1152, 1)
MAKE_LITERAL_RATIONAL(1153, 1)
MAKE_LITERAL_RATIONAL(1154, 1)
MAKE_LITERAL_RATIONAL(1155, 1)
MAKE_LITERAL_RATIONAL(1156, 1)
MAKE_LITERAL_RATIONAL(1157, 1)
MAKE_LITERAL_RATIONAL(1158, 1)
MAKE_LITERAL_RATIONAL(1159, 1)
MAKE_LITERAL_RATIONAL(1160, 1)
MAKE_LITERAL_RATIONAL(1161, 1)
MAKE_LITERAL_RATIONAL(1162, 1)
MAKE_LITERAL_RATIONAL(1163, 1)
MAKE_LITERAL_RATIONAL(1164, 1)
MAKE_LITERAL_RATIONAL(1165, 1)
MAKE_LITERAL_RATIONAL(1166, 1)
MAKE_LITERAL_RATIONAL(1167, 1)
MAKE_LITERAL_RATIONAL(1168, 1)
MAKE_LITERAL_RATIONAL(1169, 1)
MAKE_LITERAL_RATIONAL(1170, 1)
MAKE_LITERAL_RATIONAL(1171, 1)
MAKE_LITERAL_RATIONAL(1172, 1)
MAKE_LITERAL_RATIONAL(1173, 1)
MAKE_LITERAL_RATIONAL(1174, 1)
MAKE_LITERAL_RATIONAL(1175, 1)
MAKE_LITERAL_RATIONAL(1176, 1)
MAKE_LITERAL_RATIONAL(1177, 1)
MAKE_LITERAL_RATIONAL(1178, 1)
MAKE_LITERAL_RATIONAL(1179, 1)
MAKE_LITERAL_RATIONAL(1180, 1)
MAKE_LITERAL_RATIONAL(1181, 1)
MAKE_LITERAL_RATIONAL(1182, 1)
MAKE_LITERAL_RATIONAL(1183, 1)
MAKE_LITERAL_RATIONAL(1184, 1)
MAKE_LITERAL_RATIONAL(1185, 1)
MAKE_LITERAL_RATIONAL(1186, 1)
MAKE_LITERAL_RATIONAL(1187, 1)
MAKE_LITERAL_RATIONAL(1188, 1)
MAKE_LITERAL_RATIONAL(1189, 1)
MAKE_LITERAL_RATIONAL(1190, 1)
MAKE_LITERAL_RATIONAL(1191, 1)
MAKE_LITERAL_RATIONAL(1192, 1)
MAKE_LITERAL_RATIONAL(1193, 1)
MAKE_LITERAL_RATIONAL(1194, 1)
MAKE_LITERAL_RATIONAL(1195, 1)
MAKE_LITERAL_RATIONAL(1196, 1)
MAKE_LITERAL_RATIONAL(1197, 1)
MAKE_LITERAL_RATIONAL(1198, 1)
MAKE_LITERAL_RATIONAL(1199, 1)
MAKE_LITERAL_RATIONAL(1200, 1)
MAKE_LITERAL_RATIONAL(1201, 1)
MAKE_LITERAL_RATIONAL(1202, 1)
MAKE_LITERAL_RATIONAL(1203, 1)
MAKE_LITERAL_RATIONAL(1204, 1)
MAKE_LITERAL_RATIONAL(1205, 1)
MAKE_LITERAL_RATIONAL(1206, 1)
MAKE_LITERAL_RATIONAL(1207, 1)
MAKE_LITERAL_RATIONAL(1208, 1)
MAKE_LITERAL_RATIONAL(1209, 1)
MAKE_LITERAL_RATIONAL(1210, 1)
MAKE_LITERAL_RATIONAL(1211, 1)
MAKE_LITERAL_RATIONAL(1212, 1)
MAKE_LITERAL_RATIONAL(1213, 1)
MAKE_LITERAL_RATIONAL(1214, 1)
MAKE_LITERAL_RATIONAL(1215, 1)
MAKE_LITERAL_RATIONAL(1216, 1)
MAKE_LITERAL_RATIONAL(1217, 1)
MAKE_LITERAL_RATIONAL(1218, 1)
MAKE_LITERAL_RATIONAL(1219, 1)
MAKE_LITERAL_RATIONAL(1220, 1)
MAKE_LITERAL_RATIONAL(1221, 1)
MAKE_LITERAL_RATIONAL(1222, 1)
MAKE_LITERAL_RATIONAL(1223, 1)
MAKE_LITERAL_RATIONAL(1224, 1)
MAKE_LITERAL_RATIONAL(1225, 1)
MAKE_LITERAL_RATIONAL(1226, 1)
MAKE_LITERAL_RATIONAL(1227, 1)
MAKE_LITERAL_RATIONAL(1228, 1)
MAKE_LITERAL_RATIONAL(1229, 1)
MAKE_LITERAL_RATIONAL(1230, 1)
MAKE_LITERAL_RATIONAL(1231, 1)
MAKE_LITERAL_RATIONAL(1232, 1)
MAKE_LITERAL_RATIONAL(1233, 1)
MAKE_LITERAL_RATIONAL(1234, 1)
MAKE_LITERAL_RATIONAL(1235, 1)
MAKE_LITERAL_RATIONAL(1236, 1)
MAKE_LITERAL_RATIONAL(1237, 1)
MAKE_LITERAL_RATIONAL(1238, 1)
MAKE_LITERAL_RATIONAL(1239, 1)
MAKE_LITERAL_RATIONAL(1240, 1)
MAKE_LITERAL_RATIONAL(1241, 1)
MAKE_LITERAL_RATIONAL(1242, 1)
MAKE_LITERAL_RATIONAL(1243, 1)
MAKE_LITERAL_RATIONAL(1244, 1)
MAKE_LITERAL_RATIONAL(1245, 1)
MAKE_LITERAL_RATIONAL(1246, 1)
MAKE_LITERAL_RATIONAL(1247, 1)
MAKE_LITERAL_RATIONAL(1248, 1)
MAKE_LITERAL_RATIONAL(1249, 1)
MAKE_LITERAL_RATIONAL(1250, 1)
MAKE_LITERAL_RATIONAL(1251, 1)
MAKE_LITERAL_RATIONAL(1252, 1)
MAKE_LITERAL_RATIONAL(1253, 1)
MAKE_LITERAL_RATIONAL(1254, 1)
MAKE_LITERAL_RATIONAL(1255, 1)
MAKE_LITERAL_RATIONAL(1256, 1)
MAKE_LITERAL_RATIONAL(1257, 1)
MAKE_LITERAL_RATIONAL(1258, 1)
MAKE_LITERAL_RATIONAL(1259, 1)
MAKE_LITERAL_RATIONAL(1260, 1)
MAKE_LITERAL_RATIONAL(1261, 1)
MAKE_LITERAL_RATIONAL(1262, 1)
MAKE_LITERAL_RATIONAL(1263, 1)
MAKE_LITERAL_RATIONAL(1264, 1)
MAKE_LITERAL_RATIONAL(1265, 1)
MAKE_LITERAL_RATIONAL(1266, 1)
MAKE_LITERAL_RATIONAL(1267, 1)
MAKE_LITERAL_RATIONAL(1268, 1)
MAKE_LITERAL_RATIONAL(1269, 1)
MAKE_LITERAL_RATIONAL(1270, 1)
MAKE_LITERAL_RATIONAL(1271, 1)
MAKE_LITERAL_RATIONAL(1272, 1)
MAKE_LITERAL_RATIONAL(1273, 1)
MAKE_LITERAL_RATIONAL(1274, 1)
MAKE_LITERAL_RATIONAL(1275, 1)
MAKE_LITERAL_RATIONAL(1276, 1)
MAKE_LITERAL_RATIONAL(1277, 1)
MAKE_LITERAL_RATIONAL(1278, 1)
MAKE_LITERAL_RATIONAL(1279, 1)
MAKE_LITERAL_RATIONAL(1280, 1)
MAKE_LITERAL_RATIONAL(1281, 1)
MAKE_LITERAL_RATIONAL(1282, 1)
MAKE_LITERAL_RATIONAL(1283, 1)
MAKE_LITERAL_RATIONAL(1284, 1)
MAKE_LITERAL_RATIONAL(1285, 1)
MAKE_LITERAL_RATIONAL(1286, 1)
MAKE_LITERAL_RATIONAL(1287, 1)
MAKE_LITERAL_RATIONAL(1288, 1)
MAKE_LITERAL_RATIONAL(1289, 1)
MAKE_LITERAL_RATIONAL(1290, 1)
MAKE_LITERAL_RATIONAL(1291, 1)
MAKE_LITERAL_RATIONAL(1292, 1)
MAKE_LITERAL_RATIONAL(1293, 1)
MAKE_LITERAL_RATIONAL(1294, 1)
MAKE_LITERAL_RATIONAL(1295, 1)
MAKE_LITERAL_RATIONAL(1296, 1)
MAKE_LITERAL_RATIONAL(1297, 1)
MAKE_LITERAL_RATIONAL(1298, 1)
MAKE_LITERAL_RATIONAL(1299, 1)
MAKE_LITERAL_RATIONAL(1300, 1)
MAKE_LITERAL_RATIONAL(1301, 1)
MAKE_LITERAL_RATIONAL(1302, 1)
MAKE_LITERAL_RATIONAL(1303, 1)
MAKE_LITERAL_RATIONAL(1304, 1)
MAKE_LITERAL_RATIONAL(1305, 1)
MAKE_LITERAL_RATIONAL(1306, 1)
MAKE_LITERAL_RATIONAL(1307, 1)
MAKE_LITERAL_RATIONAL(1308, 1)
MAKE_LITERAL_RATIONAL(1309, 1)
MAKE_LITERAL_RATIONAL(1310, 1)
MAKE_LITERAL_RATIONAL(1311, 1)
MAKE_LITERAL_RATIONAL(1312, 1)
MAKE_LITERAL_RATIONAL(1313, 1)
MAKE_LITERAL_RATIONAL(1314, 1)
MAKE_LITERAL_RATIONAL(1315, 1)
MAKE_LITERAL_RATIONAL(1316, 1)
MAKE_LITERAL_RATIONAL(1317, 1)
MAKE_LITERAL_RATIONAL(1318, 1)
MAKE_LITERAL_RATIONAL(1319, 1)
MAKE_LITERAL_RATIONAL(1320, 1)
MAKE_LITERAL_RATIONAL(1321, 1)
MAKE_LITERAL_RATIONAL(1322, 1)
MAKE_LITERAL_RATIONAL(1323, 1)
MAKE_LITERAL_RATIONAL(1324, 1)
MAKE_LITERAL_RATIONAL(1325, 1)
MAKE_LITERAL_RATIONAL(1326, 1)
MAKE_LITERAL_RATIONAL(1327, 1)
MAKE_LITERAL_RATIONAL(1328, 1)
MAKE_LITERAL_RATIONAL(1329, 1)
MAKE_LITERAL_RATIONAL(1330, 1)
MAKE_LITERAL_RATIONAL(1331, 1)
MAKE_LITERAL_RATIONAL(1332, 1)
MAKE_LITERAL_RATIONAL(1333, 1)
MAKE_LITERAL_RATIONAL(1334, 1)
MAKE_LITERAL_RATIONAL(1335, 1)
MAKE_LITERAL_RATIONAL(1336, 1)
MAKE_LITERAL_RATIONAL(1337, 1)
MAKE_LITERAL_RATIONAL(1338, 1)
MAKE_LITERAL_RATIONAL(1339, 1)
MAKE_LITERAL_RATIONAL(1340, 1)
MAKE_LITERAL_RATIONAL(1341, 1)
MAKE_LITERAL_RATIONAL(1342, 1)
MAKE_LITERAL_RATIONAL(1343, 1)
MAKE_LITERAL_RATIONAL(1344, 1)
MAKE_LITERAL_RATIONAL(1345, 1)
MAKE_LITERAL_RATIONAL(1346, 1)
MAKE_LITERAL_RATIONAL(1347, 1)
MAKE_LITERAL_RATIONAL(1348, 1)
MAKE_LITERAL_RATIONAL(1349, 1)
MAKE_LITERAL_RATIONAL(1350, 1)
MAKE_LITERAL_RATIONAL(1351, 1)
MAKE_LITERAL_RATIONAL(1352, 1)
MAKE_LITERAL_RATIONAL(1353, 1)
MAKE_LITERAL_RATIONAL(1354, 1)
MAKE_LITERAL_RATIONAL(1355, 1)
MAKE_LITERAL_RATIONAL(1356, 1)
MAKE_LITERAL_RATIONAL(1357, 1)
MAKE_LITERAL_RATIONAL(1358, 1)
MAKE_LITERAL_RATIONAL(1359, 1)
MAKE_LITERAL_RATIONAL(1360, 1)
MAKE_LITERAL_RATIONAL(1361, 1)
MAKE_LITERAL_RATIONAL(1362, 1)
MAKE_LITERAL_RATIONAL(1363, 1)
MAKE_LITERAL_RATIONAL(1364, 1)
MAKE_LITERAL_RATIONAL(1365, 1)
MAKE_LITERAL_RATIONAL(1366, 1)
MAKE_LITERAL_RATIONAL(1367, 1)
MAKE_LITERAL_RATIONAL(1368, 1)
MAKE_LITERAL_RATIONAL(1369, 1)
MAKE_LITERAL_RATIONAL(1370, 1)
MAKE_LITERAL_RATIONAL(1371, 1)
MAKE_LITERAL_RATIONAL(1372, 1)
MAKE_LITERAL_RATIONAL(1373, 1)
MAKE_LITERAL_RATIONAL(1374, 1)
MAKE_LITERAL_RATIONAL(1375, 1)
MAKE_LITERAL_RATIONAL(1376, 1)
MAKE_LITERAL_RATIONAL(1377, 1)
MAKE_LITERAL_RATIONAL(1378, 1)
MAKE_LITERAL_RATIONAL(1379, 1)
MAKE_LITERAL_RATIONAL(1380, 1)
MAKE_LITERAL_RATIONAL(1381, 1)
MAKE_LITERAL_RATIONAL(1382, 1)
MAKE_LITERAL_RATIONAL(1383, 1)
MAKE_LITERAL_RATIONAL(1384, 1)
MAKE_LITERAL_RATIONAL(1385, 1)
MAKE_LITERAL_RATIONAL(1386, 1)
MAKE_LITERAL_RATIONAL(1387, 1)
MAKE_LITERAL_RATIONAL(1388, 1)
MAKE_LITERAL_RATIONAL(1389, 1)
MAKE_LITERAL_RATIONAL(1390, 1)
MAKE_LITERAL_RATIONAL(1391, 1)
MAKE_LITERAL_RATIONAL(1392, 1)
MAKE_LITERAL_RATIONAL(1393, 1)
MAKE_LITERAL_RATIONAL(1394, 1)
MAKE_LITERAL_RATIONAL(1395, 1)
MAKE_LITERAL_RATIONAL(1396, 1)
MAKE_LITERAL_RATIONAL(1397, 1)
MAKE_LITERAL_RATIONAL(1398, 1)
MAKE_LITERAL_RATIONAL(1399, 1)
MAKE_LITERAL_RATIONAL(1400, 1)
MAKE_LITERAL_RATIONAL(1401, 1)
MAKE_LITERAL_RATIONAL(1402, 1)
MAKE_LITERAL_RATIONAL(1403, 1)
MAKE_LITERAL_RATIONAL(1404, 1)
MAKE_LITERAL_RATIONAL(1405, 1)
MAKE_LITERAL_RATIONAL(1406, 1)
MAKE_LITERAL_RATIONAL(1407, 1)
MAKE_LITERAL_RATIONAL(1408, 1)
MAKE_LITERAL_RATIONAL(1409, 1)
MAKE_LITERAL_RATIONAL(1410, 1)
MAKE_LITERAL_RATIONAL(1411, 1)
MAKE_LITERAL_RATIONAL(1412, 1)
MAKE_LITERAL_RATIONAL(1413, 1)
MAKE_LITERAL_RATIONAL(1414, 1)
MAKE_LITERAL_RATIONAL(1415, 1)
MAKE_LITERAL_RATIONAL(1416, 1)
MAKE_LITERAL_RATIONAL(1417, 1)
MAKE_LITERAL_RATIONAL(1418, 1)
MAKE_LITERAL_RATIONAL(1419, 1)
MAKE_LITERAL_RATIONAL(1420, 1)
MAKE_LITERAL_RATIONAL(1421, 1)
MAKE_LITERAL_RATIONAL(1422, 1)
MAKE_LITERAL_RATIONAL(1423, 1)
MAKE_LITERAL_RATIONAL(1424, 1)
MAKE_LITERAL_RATIONAL(1425, 1)
MAKE_LITERAL_RATIONAL(1426, 1)
MAKE_LITERAL_RATIONAL(1427, 1)
MAKE_LITERAL_RATIONAL(1428, 1)
MAKE_LITERAL_RATIONAL(1429, 1)
MAKE_LITERAL_RATIONAL(1430, 1)
MAKE_LITERAL_RATIONAL(1431, 1)
MAKE_LITERAL_RATIONAL(1432, 1)
MAKE_LITERAL_RATIONAL(1433, 1)
MAKE_LITERAL_RATIONAL(1434, 1)
MAKE_LITERAL_RATIONAL(1435, 1)
MAKE_LITERAL_RATIONAL(1436, 1)
MAKE_LITERAL_RATIONAL(1437, 1)
MAKE_LITERAL_RATIONAL(1438, 1)
MAKE_LITERAL_RATIONAL(1439, 1)
MAKE_LITERAL_RATIONAL(1440, 1)
MAKE_LITERAL_RATIONAL(1441, 1)
MAKE_LITERAL_RATIONAL(1442, 1)
MAKE_LITERAL_RATIONAL(1443, 1)
MAKE_LITERAL_RATIONAL(1444, 1)
MAKE_LITERAL_RATIONAL(1445, 1)
MAKE_LITERAL_RATIONAL(1446, 1)
MAKE_LITERAL_RATIONAL(1447, 1)
MAKE_LITERAL_RATIONAL(1448, 1)
MAKE_LITERAL_RATIONAL(1449, 1)
MAKE_LITERAL_RATIONAL(1450, 1)
MAKE_LITERAL_RATIONAL(1451, 1)
MAKE_LITERAL_RATIONAL(1452, 1)
MAKE_LITERAL_RATIONAL(1453, 1)
MAKE_LITERAL_RATIONAL(1454, 1)
MAKE_LITERAL_RATIONAL(1455, 1)
MAKE_LITERAL_RATIONAL(1456, 1)
MAKE_LITERAL_RATIONAL(1457, 1)
MAKE_LITERAL_RATIONAL(1458, 1)
MAKE_LITERAL_RATIONAL(1459, 1)
MAKE_LITERAL_RATIONAL(1460, 1)
MAKE_LITERAL_RATIONAL(1461, 1)
MAKE_LITERAL_RATIONAL(1462, 1)
MAKE_LITERAL_RATIONAL(1463, 1)
MAKE_LITERAL_RATIONAL(1464, 1)
MAKE_LITERAL_RATIONAL(1465, 1)
MAKE_LITERAL_RATIONAL(1466, 1)
MAKE_LITERAL_RATIONAL(1467, 1)
MAKE_LITERAL_RATIONAL(1468, 1)
MAKE_LITERAL_RATIONAL(1469, 1)
MAKE_LITERAL_RATIONAL(1470, 1)
MAKE_LITERAL_RATIONAL(1471, 1)
MAKE_LITERAL_RATIONAL(1472, 1)
MAKE_LITERAL_RATIONAL(1473, 1)
MAKE_LITERAL_RATIONAL(1474, 1)
MAKE_LITERAL_RATIONAL(1475, 1)
MAKE_LITERAL_RATIONAL(1476, 1)
MAKE_LITERAL_RATIONAL(1477, 1)
MAKE_LITERAL_RATIONAL(1478, 1)
MAKE_LITERAL_RATIONAL(1479, 1)
MAKE_LITERAL_RATIONAL(1480, 1)
MAKE_LITERAL_RATIONAL(1481, 1)
MAKE_LITERAL_RATIONAL(1482, 1)
MAKE_LITERAL_RATIONAL(1483, 1)
MAKE_LITERAL_RATIONAL(1484, 1)
MAKE_LITERAL_RATIONAL(1485, 1)
MAKE_LITERAL_RATIONAL(1486, 1)
MAKE_LITERAL_RATIONAL(1487, 1)
MAKE_LITERAL_RATIONAL(1488, 1)
MAKE_LITERAL_RATIONAL(1489, 1)
MAKE_LITERAL_RATIONAL(1490, 1)
MAKE_LITERAL_RATIONAL(1491, 1)
MAKE_LITERAL_RATIONAL(1492, 1)
MAKE_LITERAL_RATIONAL(1493, 1)
MAKE_LITERAL_RATIONAL(1494, 1)
MAKE_LITERAL_RATIONAL(1495, 1)
MAKE_LITERAL_RATIONAL(1496, 1)
MAKE_LITERAL_RATIONAL(1497, 1)
MAKE_LITERAL_RATIONAL(1498, 1)
MAKE_LITERAL_RATIONAL(1499, 1)
MAKE_LITERAL_RATIONAL(1500, 1)
MAKE_LITERAL_RATIONAL(1501, 1)
MAKE_LITERAL_RATIONAL(1502, 1)
MAKE_LITERAL_RATIONAL(1503, 1)
MAKE_LITERAL_RATIONAL(1504, 1)
MAKE_LITERAL_RATIONAL(1505, 1)
MAKE_LITERAL_RATIONAL(1506, 1)
MAKE_LITERAL_RATIONAL(1507, 1)
MAKE_LITERAL_RATIONAL(1508, 1)
MAKE_LITERAL_RATIONAL(1509, 1)
MAKE_LITERAL_RATIONAL(1510, 1)
MAKE_LITERAL_RATIONAL(1511, 1)
MAKE_LITERAL_RATIONAL(1512, 1)
MAKE_LITERAL_RATIONAL(1513, 1)
MAKE_LITERAL_RATIONAL(1514, 1)
MAKE_LITERAL_RATIONAL(1515, 1)
MAKE_LITERAL_RATIONAL(1516, 1)
MAKE_LITERAL_RATIONAL(1517, 1)
MAKE_LITERAL_RATIONAL(1518, 1)
MAKE_LITERAL_RATIONAL(1519, 1)
MAKE_LITERAL_RATIONAL(1520, 1)
MAKE_LITERAL_RATIONAL(1521, 1)
MAKE_LITERAL_RATIONAL(1522, 1)
MAKE_LITERAL_RATIONAL(1523, 1)
MAKE_LITERAL_RATIONAL(1524, 1)
MAKE_LITERAL_RATIONAL(1525, 1)
MAKE_LITERAL_RATIONAL(1526, 1)
MAKE_LITERAL_RATIONAL(1527, 1)
MAKE_LITERAL_RATIONAL(1528, 1)
MAKE_LITERAL_RATIONAL(1529, 1)
MAKE_LITERAL_RATIONAL(1530, 1)
MAKE_LITERAL_RATIONAL(1531, 1)
MAKE_LITERAL_RATIONAL(1532, 1)
MAKE_LITERAL_RATIONAL(1533, 1)
MAKE_LITERAL_RATIONAL(1534, 1)
MAKE_LITERAL_RATIONAL(1535, 1)
MAKE_LITERAL_RATIONAL(1536, 1)
MAKE_LITERAL_RATIONAL(1537, 1)
MAKE_LITERAL_RATIONAL(1538, 1)
MAKE_LITERAL_RATIONAL(1539, 1)
MAKE_LITERAL_RATIONAL(1540, 1)
MAKE_LITERAL_RATIONAL(1541, 1)
MAKE_LITERAL_RATIONAL(1542, 1)
MAKE_LITERAL_RATIONAL(1543, 1)
MAKE_LITERAL_RATIONAL(1544, 1)
MAKE_LITERAL_RATIONAL(1545, 1)
MAKE_LITERAL_RATIONAL(1546, 1)
MAKE_LITERAL_RATIONAL(1547, 1)
MAKE_LITERAL_RATIONAL(1548, 1)
MAKE_LITERAL_RATIONAL(1549, 1)
MAKE_LITERAL_RATIONAL(1550, 1)
MAKE_LITERAL_RATIONAL(1551, 1)
MAKE_LITERAL_RATIONAL(1552, 1)
MAKE_LITERAL_RATIONAL(1553, 1)
MAKE_LITERAL_RATIONAL(1554, 1)
MAKE_LITERAL_RATIONAL(1555, 1)
MAKE_LITERAL_RATIONAL(1556, 1)
MAKE_LITERAL_RATIONAL(1557, 1)
MAKE_LITERAL_RATIONAL(1558, 1)
MAKE_LITERAL_RATIONAL(1559, 1)
MAKE_LITERAL_RATIONAL(1560, 1)
MAKE_LITERAL_RATIONAL(1561, 1)
MAKE_LITERAL_RATIONAL(1562, 1)
MAKE_LITERAL_RATIONAL(1563, 1)
MAKE_LITERAL_RATIONAL(1564, 1)
MAKE_LITERAL_RATIONAL(1565, 1)
MAKE_LITERAL_RATIONAL(1566, 1)
MAKE_LITERAL_RATIONAL(1567, 1)
MAKE_LITERAL_RATIONAL(1568, 1)
MAKE_LITERAL_RATIONAL(1569, 1)
MAKE_LITERAL_RATIONAL(1570, 1)
MAKE_LITERAL_RATIONAL(1571, 1)
MAKE_LITERAL_RATIONAL(1572, 1)
MAKE_LITERAL_RATIONAL(1573, 1)
MAKE_LITERAL_RATIONAL(1574, 1)
MAKE_LITERAL_RATIONAL(1575, 1)
MAKE_LITERAL_RATIONAL(1576, 1)
MAKE_LITERAL_RATIONAL(1577, 1)
MAKE_LITERAL_RATIONAL(1578, 1)
MAKE_LITERAL_RATIONAL(1579, 1)
MAKE_LITERAL_RATIONAL(1580, 1)
MAKE_LITERAL_RATIONAL(1581, 1)
MAKE_LITERAL_RATIONAL(1582, 1)
MAKE_LITERAL_RATIONAL(1583, 1)
MAKE_LITERAL_RATIONAL(1584, 1)
MAKE_LITERAL_RATIONAL(1585, 1)
MAKE_LITERAL_RATIONAL(1586, 1)
MAKE_LITERAL_RATIONAL(1587, 1)
MAKE_LITERAL_RATIONAL(1588, 1)
MAKE_LITERAL_RATIONAL(1589, 1)
MAKE_LITERAL_RATIONAL(1590, 1)
MAKE_LITERAL_RATIONAL(1591, 1)
MAKE_LITERAL_RATIONAL(1592, 1)
MAKE_LITERAL_RATIONAL(1593, 1)
MAKE_LITERAL_RATIONAL(1594, 1)
MAKE_LITERAL_RATIONAL(1595, 1)
MAKE_LITERAL_RATIONAL(1596, 1)
MAKE_LITERAL_RATIONAL(1597, 1)
MAKE_LITERAL_RATIONAL(1598, 1)
MAKE_LITERAL_RATIONAL(1599, 1)
MAKE_LITERAL_RATIONAL(1600, 1)
MAKE_LITERAL_RATIONAL(1601, 1)
MAKE_LITERAL_RATIONAL(1602, 1)
MAKE_LITERAL_RATIONAL(1603, 1)
MAKE_LITERAL_RATIONAL(1604, 1)
MAKE_LITERAL_RATIONAL(1605, 1)
MAKE_LITERAL_RATIONAL(1606, 1)
MAKE_LITERAL_RATIONAL(1607, 1)
MAKE_LITERAL_RATIONAL(1608, 1)
MAKE_LITERAL_RATIONAL(1609, 1)
MAKE_LITERAL_RATIONAL(1610, 1)
MAKE_LITERAL_RATIONAL(1611, 1)
MAKE_LITERAL_RATIONAL(1612, 1)
MAKE_LITERAL_RATIONAL(1613, 1)
MAKE_LITERAL_RATIONAL(1614, 1)
MAKE_LITERAL_RATIONAL(1615, 1)
MAKE_LITERAL_RATIONAL(1616, 1)
MAKE_LITERAL_RATIONAL(1617, 1)
MAKE_LITERAL_RATIONAL(1618, 1)
MAKE_LITERAL_RATIONAL(1619, 1)
MAKE_LITERAL_RATIONAL(1620, 1)
MAKE_LITERAL_RATIONAL(1621, 1)
MAKE_LITERAL_RATIONAL(1622, 1)
MAKE_LITERAL_RATIONAL(1623, 1)
MAKE_LITERAL_RATIONAL(1624, 1)
MAKE_LITERAL_RATIONAL(1625, 1)
MAKE_LITERAL_RATIONAL(1626, 1)
MAKE_LITERAL_RATIONAL(1627, 1)
MAKE_LITERAL_RATIONAL(1628, 1)
MAKE_LITERAL_RATIONAL(1629, 1)
MAKE_LITERAL_RATIONAL(1630, 1)
MAKE_LITERAL_RATIONAL(1631, 1)
MAKE_LITERAL_RATIONAL(1632, 1)
MAKE_LITERAL_RATIONAL(1633, 1)
MAKE_LITERAL_RATIONAL(1634, 1)
MAKE_LITERAL_RATIONAL(1635, 1)
MAKE_LITERAL_RATIONAL(1636, 1)
MAKE_LITERAL_RATIONAL(1637, 1)
MAKE_LITERAL_RATIONAL(1638, 1)
MAKE_LITERAL_RATIONAL(1639, 1)
MAKE_LITERAL_RATIONAL(1640, 1)
MAKE_LITERAL_RATIONAL(1641, 1)
MAKE_LITERAL_RATIONAL(1642, 1)
MAKE_LITERAL_RATIONAL(1643, 1)
MAKE_LITERAL_RATIONAL(1644, 1)
MAKE_LITERAL_RATIONAL(1645, 1)
MAKE_LITERAL_RATIONAL(1646, 1)
MAKE_LITERAL_RATIONAL(1647, 1)
MAKE_LITERAL_RATIONAL(1648, 1)
MAKE_LITERAL_RATIONAL(1649, 1)
MAKE_LITERAL_RATIONAL(1650, 1)
MAKE_LITERAL_RATIONAL(1651, 1)
MAKE_LITERAL_RATIONAL(1652, 1)
MAKE_LITERAL_RATIONAL(1653, 1)
MAKE_LITERAL_RATIONAL(1654, 1)
MAKE_LITERAL_RATIONAL(1655, 1)
MAKE_LITERAL_RATIONAL(1656, 1)
MAKE_LITERAL_RATIONAL(1657, 1)
MAKE_LITERAL_RATIONAL(1658, 1)
MAKE_LITERAL_RATIONAL(1659, 1)
MAKE_LITERAL_RATIONAL(1660, 1)
MAKE_LITERAL_RATIONAL(1661, 1)
MAKE_LITERAL_RATIONAL(1662, 1)
MAKE_LITERAL_RATIONAL(1663, 1)
MAKE_LITERAL_RATIONAL(1664, 1)
MAKE_LITERAL_RATIONAL(1665, 1)
MAKE_LITERAL_RATIONAL(1666, 1)
MAKE_LITERAL_RATIONAL(1667, 1)
MAKE_LITERAL_RATIONAL(1668, 1)
MAKE_LITERAL_RATIONAL(1669, 1)
MAKE_LITERAL_RATIONAL(1670, 1)
MAKE_LITERAL_RATIONAL(1671, 1)
MAKE_LITERAL_RATIONAL(1672, 1)
MAKE_LITERAL_RATIONAL(1673, 1)
MAKE_LITERAL_RATIONAL(1674, 1)
MAKE_LITERAL_RATIONAL(1675, 1)
MAKE_LITERAL_RATIONAL(1676, 1)
MAKE_LITERAL_RATIONAL(1677, 1)
MAKE_LITERAL_RATIONAL(1678, 1)
MAKE_LITERAL_RATIONAL(1679, 1)
MAKE_LITERAL_RATIONAL(1680, 1)
MAKE_LITERAL_RATIONAL(1681, 1)
MAKE_LITERAL_RATIONAL(1682, 1)
MAKE_LITERAL_RATIONAL(1683, 1)
MAKE_LITERAL_RATIONAL(1684, 1)
MAKE_LITERAL_RATIONAL(1685, 1)
MAKE_LITERAL_RATIONAL(1686, 1)
MAKE_LITERAL_RATIONAL(1687, 1)
MAKE_LITERAL_RATIONAL(1688, 1)
MAKE_LITERAL_RATIONAL(1689, 1)
MAKE_LITERAL_RATIONAL(1690, 1)
MAKE_LITERAL_RATIONAL(1691, 1)
MAKE_LITERAL_RATIONAL(1692, 1)
MAKE_LITERAL_RATIONAL(1693, 1)
MAKE_LITERAL_RATIONAL(1694, 1)
MAKE_LITERAL_RATIONAL(1695, 1)
MAKE_LITERAL_RATIONAL(1696, 1)
MAKE_LITERAL_RATIONAL(1697, 1)
MAKE_LITERAL_RATIONAL(1698, 1)
MAKE_LITERAL_RATIONAL(1699, 1)
MAKE_LITERAL_RATIONAL(1700, 1)
MAKE_LITERAL_RATIONAL(1701, 1)
MAKE_LITERAL_RATIONAL(1702, 1)
MAKE_LITERAL_RATIONAL(1703, 1)
MAKE_LITERAL_RATIONAL(1704, 1)
MAKE_LITERAL_RATIONAL(1705, 1)
MAKE_LITERAL_RATIONAL(1706, 1)
MAKE_LITERAL_RATIONAL(1707, 1)
MAKE_LITERAL_RATIONAL(1708, 1)
MAKE_LITERAL_RATIONAL(1709, 1)
MAKE_LITERAL_RATIONAL(1710, 1)
MAKE_LITERAL_RATIONAL(1711, 1)
MAKE_LITERAL_RATIONAL(1712, 1)
MAKE_LITERAL_RATIONAL(1713, 1)
MAKE_LITERAL_RATIONAL(1714, 1)
MAKE_LITERAL_RATIONAL(1715, 1)
MAKE_LITERAL_RATIONAL(1716, 1)
MAKE_LITERAL_RATIONAL(1717, 1)
MAKE_LITERAL_RATIONAL(1718, 1)
MAKE_LITERAL_RATIONAL(1719, 1)
MAKE_LITERAL_RATIONAL(1720, 1)
MAKE_LITERAL_RATIONAL(1721, 1)
MAKE_LITERAL_RATIONAL(1722, 1)
MAKE_LITERAL_RATIONAL(1723, 1)
MAKE_LITERAL_RATIONAL(1724, 1)
MAKE_LITERAL_RATIONAL(1725, 1)
MAKE_LITERAL_RATIONAL(1726, 1)
MAKE_LITERAL_RATIONAL(1727, 1)
MAKE_LITERAL_RATIONAL(1728, 1)
MAKE_LITERAL_RATIONAL(1729, 1)
MAKE_LITERAL_RATIONAL(1730, 1)
MAKE_LITERAL_RATIONAL(1731, 1)
MAKE_LITERAL_RATIONAL(1732, 1)
MAKE_LITERAL_RATIONAL(1733, 1)
MAKE_LITERAL_RATIONAL(1734, 1)
MAKE_LITERAL_RATIONAL(1735, 1)
MAKE_LITERAL_RATIONAL(1736, 1)
MAKE_LITERAL_RATIONAL(1737, 1)
MAKE_LITERAL_RATIONAL(1738, 1)
MAKE_LITERAL_RATIONAL(1739, 1)
MAKE_LITERAL_RATIONAL(1740, 1)
MAKE_LITERAL_RATIONAL(1741, 1)
MAKE_LITERAL_RATIONAL(1742, 1)
MAKE_LITERAL_RATIONAL(1743, 1)
MAKE_LITERAL_RATIONAL(1744, 1)
MAKE_LITERAL_RATIONAL(1745, 1)
MAKE_LITERAL_RATIONAL(1746, 1)
MAKE_LITERAL_RATIONAL(1747, 1)
MAKE_LITERAL_RATIONAL(1748, 1)
MAKE_LITERAL_RATIONAL(1749, 1)
MAKE_LITERAL_RATIONAL(1750, 1)
MAKE_LITERAL_RATIONAL(1751, 1)
MAKE_LITERAL_RATIONAL(1752, 1)
MAKE_LITERAL_RATIONAL(1753, 1)
MAKE_LITERAL_RATIONAL(1754, 1)
MAKE_LITERAL_RATIONAL(1755, 1)
MAKE_LITERAL_RATIONAL(1756, 1)
MAKE_LITERAL_RATIONAL(1757, 1)
MAKE_LITERAL_RATIONAL(1758, 1)
MAKE_LITERAL_RATIONAL(1759, 1)
MAKE_LITERAL_RATIONAL(1760, 1)
MAKE_LITERAL_RATIONAL(1761, 1)
MAKE_LITERAL_RATIONAL(1762, 1)
MAKE_LITERAL_RATIONAL(1763, 1)
MAKE_LITERAL_RATIONAL(1764, 1)
MAKE_LITERAL_RATIONAL(1765, 1)
MAKE_LITERAL_RATIONAL(1766, 1)
MAKE_LITERAL_RATIONAL(1767, 1)
MAKE_LITERAL_RATIONAL(1768, 1)
MAKE_LITERAL_RATIONAL(1769, 1)
MAKE_LITERAL_RATIONAL(1770, 1)
MAKE_LITERAL_RATIONAL(1771, 1)
MAKE_LITERAL_RATIONAL(1772, 1)
MAKE_LITERAL_RATIONAL(1773, 1)
MAKE_LITERAL_RATIONAL(1774, 1)
MAKE_LITERAL_RATIONAL(1775, 1)
MAKE_LITERAL_RATIONAL(1776, 1)
MAKE_LITERAL_RATIONAL(1777, 1)
MAKE_LITERAL_RATIONAL(1778, 1)
MAKE_LITERAL_RATIONAL(1779, 1)
MAKE_LITERAL_RATIONAL(1780, 1)
MAKE_LITERAL_RATIONAL(1781, 1)
MAKE_LITERAL_RATIONAL(1782, 1)
MAKE_LITERAL_RATIONAL(1783, 1)
MAKE_LITERAL_RATIONAL(1784, 1)
MAKE_LITERAL_RATIONAL(1785, 1)
MAKE_LITERAL_RATIONAL(1786, 1)
MAKE_LITERAL_RATIONAL(1787, 1)
MAKE_LITERAL_RATIONAL(1788, 1)
MAKE_LITERAL_RATIONAL(1789, 1)
MAKE_LITERAL_RATIONAL(1790, 1)
MAKE_LITERAL_RATIONAL(1791, 1)
MAKE_LITERAL_RATIONAL(1792, 1)
MAKE_LITERAL_RATIONAL(1793, 1)
MAKE_LITERAL_RATIONAL(1794, 1)
MAKE_LITERAL_RATIONAL(1795, 1)
MAKE_LITERAL_RATIONAL(1796, 1)
MAKE_LITERAL_RATIONAL(1797, 1)
MAKE_LITERAL_RATIONAL(1798, 1)
MAKE_LITERAL_RATIONAL(1799, 1)
MAKE_LITERAL_RATIONAL(1800, 1)
MAKE_LITERAL_RATIONAL(1801, 1)
MAKE_LITERAL_RATIONAL(1802, 1)
MAKE_LITERAL_RATIONAL(1803, 1)
MAKE_LITERAL_RATIONAL(1804, 1)
MAKE_LITERAL_RATIONAL(1805, 1)
MAKE_LITERAL_RATIONAL(1806, 1)
MAKE_LITERAL_RATIONAL(1807, 1)
MAKE_LITERAL_RATIONAL(1808, 1)
MAKE_LITERAL_RATIONAL(1809, 1)
MAKE_LITERAL_RATIONAL(1810, 1)
MAKE_LITERAL_RATIONAL(1811, 1)
MAKE_LITERAL_RATIONAL(1812, 1)
MAKE_LITERAL_RATIONAL(1813, 1)
MAKE_LITERAL_RATIONAL(1814, 1)
MAKE_LITERAL_RATIONAL(1815, 1)
MAKE_LITERAL_RATIONAL(1816, 1)
MAKE_LITERAL_RATIONAL(1817, 1)
MAKE_LITERAL_RATIONAL(1818, 1)
MAKE_LITERAL_RATIONAL(1819, 1)
MAKE_LITERAL_RATIONAL(1820, 1)
MAKE_LITERAL_RATIONAL(1821, 1)
MAKE_LITERAL_RATIONAL(1822, 1)
MAKE_LITERAL_RATIONAL(1823, 1)
MAKE_LITERAL_RATIONAL(1824, 1)
MAKE_LITERAL_RATIONAL(1825, 1)
MAKE_LITERAL_RATIONAL(1826, 1)
MAKE_LITERAL_RATIONAL(1827, 1)
MAKE_LITERAL_RATIONAL(1828, 1)
MAKE_LITERAL_RATIONAL(1829, 1)
MAKE_LITERAL_RATIONAL(1830, 1)
MAKE_LITERAL_RATIONAL(1831, 1)
MAKE_LITERAL_RATIONAL(1832, 1)
MAKE_LITERAL_RATIONAL(1833, 1)
MAKE_LITERAL_RATIONAL(1834, 1)
MAKE_LITERAL_RATIONAL(1835, 1)
MAKE_LITERAL_RATIONAL(1836, 1)
MAKE_LITERAL_RATIONAL(1837, 1)
MAKE_LITERAL_RATIONAL(1838, 1)
MAKE_LITERAL_RATIONAL(1839, 1)
MAKE_LITERAL_RATIONAL(1840, 1)
MAKE_LITERAL_RATIONAL(1841, 1)
MAKE_LITERAL_RATIONAL(1842, 1)
MAKE_LITERAL_RATIONAL(1843, 1)
MAKE_LITERAL_RATIONAL(1844, 1)
MAKE_LITERAL_RATIONAL(1845, 1)
MAKE_LITERAL_RATIONAL(1846, 1)
MAKE_LITERAL_RATIONAL(1847, 1)
MAKE_LITERAL_RATIONAL(1848, 1)
MAKE_LITERAL_RATIONAL(1849, 1)
MAKE_LITERAL_RATIONAL(1850, 1)
MAKE_LITERAL_RATIONAL(1851, 1)
MAKE_LITERAL_RATIONAL(1852, 1)
MAKE_LITERAL_RATIONAL(1853, 1)
MAKE_LITERAL_RATIONAL(1854, 1)
MAKE_LITERAL_RATIONAL(1855, 1)
MAKE_LITERAL_RATIONAL(1856, 1)
MAKE_LITERAL_RATIONAL(1857, 1)
MAKE_LITERAL_RATIONAL(1858, 1)
MAKE_LITERAL_RATIONAL(1859, 1)
MAKE_LITERAL_RATIONAL(1860, 1)
MAKE_LITERAL_RATIONAL(1861, 1)
MAKE_LITERAL_RATIONAL(1862, 1)
MAKE_LITERAL_RATIONAL(1863, 1)
MAKE_LITERAL_RATIONAL(1864, 1)
MAKE_LITERAL_RATIONAL(1865, 1)
MAKE_LITERAL_RATIONAL(1866, 1)
MAKE_LITERAL_RATIONAL(1867, 1)
MAKE_LITERAL_RATIONAL(1868, 1)
MAKE_LITERAL_RATIONAL(1869, 1)
MAKE_LITERAL_RATIONAL(1870, 1)
MAKE_LITERAL_RATIONAL(1871, 1)
MAKE_LITERAL_RATIONAL(1872, 1)
MAKE_LITERAL_RATIONAL(1873, 1)
MAKE_LITERAL_RATIONAL(1874, 1)
MAKE_LITERAL_RATIONAL(1875, 1)
MAKE_LITERAL_RATIONAL(1876, 1)
MAKE_LITERAL_RATIONAL(1877, 1)
MAKE_LITERAL_RATIONAL(1878, 1)
MAKE_LITERAL_RATIONAL(1879, 1)
MAKE_LITERAL_RATIONAL(1880, 1)
MAKE_LITERAL_RATIONAL(1881, 1)
MAKE_LITERAL_RATIONAL(1882, 1)
MAKE_LITERAL_RATIONAL(1883, 1)
MAKE_LITERAL_RATIONAL(1884, 1)
MAKE_LITERAL_RATIONAL(1885, 1)
MAKE_LITERAL_RATIONAL(1886, 1)
MAKE_LITERAL_RATIONAL(1887, 1)
MAKE_LITERAL_RATIONAL(1888, 1)
MAKE_LITERAL_RATIONAL(1889, 1)
MAKE_LITERAL_RATIONAL(1890, 1)
MAKE_LITERAL_RATIONAL(1891, 1)
MAKE_LITERAL_RATIONAL(1892, 1)
MAKE_LITERAL_RATIONAL(1893, 1)
MAKE_LITERAL_RATIONAL(1894, 1)
MAKE_LITERAL_RATIONAL(1895, 1)
MAKE_LITERAL_RATIONAL(1896, 1)
MAKE_LITERAL_RATIONAL(1897, 1)
MAKE_LITERAL_RATIONAL(1898, 1)
MAKE_LITERAL_RATIONAL(1899, 1)
MAKE_LITERAL_RATIONAL(1900, 1)
MAKE_LITERAL_RATIONAL(1901, 1)
MAKE_LITERAL_RATIONAL(1902, 1)
MAKE_LITERAL_RATIONAL(1903, 1)
MAKE_LITERAL_RATIONAL(1904, 1)
MAKE_LITERAL_RATIONAL(1905, 1)
MAKE_LITERAL_RATIONAL(1906, 1)
MAKE_LITERAL_RATIONAL(1907, 1)
MAKE_LITERAL_RATIONAL(1908, 1)
MAKE_LITERAL_RATIONAL(1909, 1)
MAKE_LITERAL_RATIONAL(1910, 1)
MAKE_LITERAL_RATIONAL(1911, 1)
MAKE_LITERAL_RATIONAL(1912, 1)
MAKE_LITERAL_RATIONAL(1913, 1)
MAKE_LITERAL_RATIONAL(1914, 1)
MAKE_LITERAL_RATIONAL(1915, 1)
MAKE_LITERAL_RATIONAL(1916, 1)
MAKE_LITERAL_RATIONAL(1917, 1)
MAKE_LITERAL_RATIONAL(1918, 1)
MAKE_LITERAL_RATIONAL(1919, 1)
MAKE_LITERAL_RATIONAL(1920, 1)
MAKE_LITERAL_RATIONAL(1921, 1)
MAKE_LITERAL_RATIONAL(1922, 1)
MAKE_LITERAL_RATIONAL(1923, 1)
MAKE_LITERAL_RATIONAL(1924, 1)
MAKE_LITERAL_RATIONAL(1925, 1)
MAKE_LITERAL_RATIONAL(1926, 1)
MAKE_LITERAL_RATIONAL(1927, 1)
MAKE_LITERAL_RATIONAL(1928, 1)
MAKE_LITERAL_RATIONAL(1929, 1)
MAKE_LITERAL_RATIONAL(1930, 1)
MAKE_LITERAL_RATIONAL(1931, 1)
MAKE_LITERAL_RATIONAL(1932, 1)
MAKE_LITERAL_RATIONAL(1933, 1)
MAKE_LITERAL_RATIONAL(1934, 1)
MAKE_LITERAL_RATIONAL(1935, 1)
MAKE_LITERAL_RATIONAL(1936, 1)
MAKE_LITERAL_RATIONAL(1937, 1)
MAKE_LITERAL_RATIONAL(1938, 1)
MAKE_LITERAL_RATIONAL(1939, 1)
MAKE_LITERAL_RATIONAL(1940, 1)
MAKE_LITERAL_RATIONAL(1941, 1)
MAKE_LITERAL_RATIONAL(1942, 1)
MAKE_LITERAL_RATIONAL(1943, 1)
MAKE_LITERAL_RATIONAL(1944, 1)
MAKE_LITERAL_RATIONAL(1945, 1)
MAKE_LITERAL_RATIONAL(1946, 1)
MAKE_LITERAL_RATIONAL(1947, 1)
MAKE_LITERAL_RATIONAL(1948, 1)
MAKE_LITERAL_RATIONAL(1949, 1)
MAKE_LITERAL_RATIONAL(1950, 1)
MAKE_LITERAL_RATIONAL(1951, 1)
MAKE_LITERAL_RATIONAL(1952, 1)
MAKE_LITERAL_RATIONAL(1953, 1)
MAKE_LITERAL_RATIONAL(1954, 1)
MAKE_LITERAL_RATIONAL(1955, 1)
MAKE_LITERAL_RATIONAL(1956, 1)
MAKE_LITERAL_RATIONAL(1957, 1)
MAKE_LITERAL_RATIONAL(1958, 1)
MAKE_LITERAL_RATIONAL(1959, 1)
MAKE_LITERAL_RATIONAL(1960, 1)
MAKE_LITERAL_RATIONAL(1961, 1)
MAKE_LITERAL_RATIONAL(1962, 1)
MAKE_LITERAL_RATIONAL(1963, 1)
MAKE_LITERAL_RATIONAL(1964, 1)
MAKE_LITERAL_RATIONAL(1965, 1)
MAKE_LITERAL_RATIONAL(1966, 1)
MAKE_LITERAL_RATIONAL(1967, 1)
MAKE_LITERAL_RATIONAL(1968, 1)
MAKE_LITERAL_RATIONAL(1969, 1)
MAKE_LITERAL_RATIONAL(1970, 1)
MAKE_LITERAL_RATIONAL(1971, 1)
MAKE_LITERAL_RATIONAL(1972, 1)
MAKE_LITERAL_RATIONAL(1973, 1)
MAKE_LITERAL_RATIONAL(1974, 1)
MAKE_LITERAL_RATIONAL(1975, 1)
MAKE_LITERAL_RATIONAL(1976, 1)
MAKE_LITERAL_RATIONAL(1977, 1)
MAKE_LITERAL_RATIONAL(1978, 1)
MAKE_LITERAL_RATIONAL(1979, 1)
MAKE_LITERAL_RATIONAL(1980, 1)
MAKE_LITERAL_RATIONAL(1981, 1)
MAKE_LITERAL_RATIONAL(1982, 1)
MAKE_LITERAL_RATIONAL(1983, 1)
MAKE_LITERAL_RATIONAL(1984, 1)
MAKE_LITERAL_RATIONAL(1985, 1)
MAKE_LITERAL_RATIONAL(1986, 1)
MAKE_LITERAL_RATIONAL(1987, 1)
MAKE_LITERAL_RATIONAL(1988, 1)
MAKE_LITERAL_RATIONAL(1989, 1)
MAKE_LITERAL_RATIONAL(1990, 1)
MAKE_LITERAL_RATIONAL(1991, 1)
MAKE_LITERAL_RATIONAL(1992, 1)
MAKE_LITERAL_RATIONAL(1993, 1)
MAKE_LITERAL_RATIONAL(1994, 1)
MAKE_LITERAL_RATIONAL(1995, 1)
MAKE_LITERAL_RATIONAL(1996, 1)
MAKE_LITERAL_RATIONAL(1997, 1)
MAKE_LITERAL_RATIONAL(1998, 1)
MAKE_LITERAL_RATIONAL(1999, 1)
MAKE_LITERAL_RATIONAL(2000, 1)
MAKE_LITERAL_RATIONAL(2001, 1)
MAKE_LITERAL_RATIONAL(2002, 1)
MAKE_LITERAL_RATIONAL(2003, 1)
MAKE_LITERAL_RATIONAL(2004, 1)
MAKE_LITERAL_RATIONAL(2005, 1)
MAKE_LITERAL_RATIONAL(2006, 1)
MAKE_LITERAL_RATIONAL(2007, 1)
MAKE_LITERAL_RATIONAL(2008, 1)
MAKE_LITERAL_RATIONAL(2009, 1)
MAKE_LITERAL_RATIONAL(2010, 1)
MAKE_LITERAL_RATIONAL(2011, 1)
MAKE_LITERAL_RATIONAL(2012, 1)
MAKE_LITERAL_RATIONAL(2013, 1)
MAKE_LITERAL_RATIONAL(2014, 1)
MAKE_LITERAL_RATIONAL(2015, 1)
MAKE_LITERAL_RATIONAL(2016, 1)
MAKE_LITERAL_RATIONAL(2017, 1)
MAKE_LITERAL_RATIONAL(2018, 1)
MAKE_LITERAL_RATIONAL(2019, 1)
MAKE_LITERAL_RATIONAL(2020, 1)
MAKE_LITERAL_RATIONAL(2021, 1)
MAKE_LITERAL_RATIONAL(2022, 1)
MAKE_LITERAL_RATIONAL(2023, 1)
MAKE_LITERAL_RATIONAL(2024, 1)
MAKE_LITERAL_RATIONAL(2025, 1)
MAKE_LITERAL_RATIONAL(2026, 1)
MAKE_LITERAL_RATIONAL(2027, 1)
MAKE_LITERAL_RATIONAL(2028, 1)
MAKE_LITERAL_RATIONAL(2029, 1)
MAKE_LITERAL_RATIONAL(2030, 1)
MAKE_LITERAL_RATIONAL(2031, 1)
MAKE_LITERAL_RATIONAL(2032, 1)
MAKE_LITERAL_RATIONAL(2033, 1)
MAKE_LITERAL_RATIONAL(2034, 1)
MAKE_LITERAL_RATIONAL(2035, 1)
MAKE_LITERAL_RATIONAL(2036, 1)
MAKE_LITERAL_RATIONAL(2037, 1)
MAKE_LITERAL_RATIONAL(2038, 1)
MAKE_LITERAL_RATIONAL(2039, 1)
MAKE_LITERAL_RATIONAL(2040, 1)
MAKE_LITERAL_RATIONAL(2041, 1)
MAKE_LITERAL_RATIONAL(2042, 1)
MAKE_LITERAL_RATIONAL(2043, 1)
MAKE_LITERAL_RATIONAL(2044, 1)
MAKE_LITERAL_RATIONAL(2045, 1)
MAKE_LITERAL_RATIONAL(2046, 1)
MAKE_LITERAL_RATIONAL(2047, 1)
MAKE_LITERAL_RATIONAL(2048, 1)
MAKE_LITERAL_RATIONAL(2049, 1)
MAKE_LITERAL_RATIONAL(2050, 1)
MAKE_LITERAL_RATIONAL(2051, 1)
MAKE_LITERAL_RATIONAL(2052, 1)
MAKE_LITERAL_RATIONAL(2053, 1)
MAKE_LITERAL_RATIONAL(2054, 1)
MAKE_LITERAL_RATIONAL(2055, 1)
MAKE_LITERAL_RATIONAL(2056, 1)
MAKE_LITERAL_RATIONAL(2057, 1)
MAKE_LITERAL_RATIONAL(2058, 1)
MAKE_LITERAL_RATIONAL(2059, 1)
MAKE_LITERAL_RATIONAL(2060, 1)
MAKE_LITERAL_RATIONAL(2061, 1)
MAKE_LITERAL_RATIONAL(2062, 1)
MAKE_LITERAL_RATIONAL(2063, 1)
MAKE_LITERAL_RATIONAL(2064, 1)
MAKE_LITERAL_RATIONAL(2065, 1)
MAKE_LITERAL_RATIONAL(2066, 1)
MAKE_LITERAL_RATIONAL(2067, 1)
MAKE_LITERAL_RATIONAL(2068, 1)
MAKE_LITERAL_RATIONAL(2069, 1)
MAKE_LITERAL_RATIONAL(2070, 1)
MAKE_LITERAL_RATIONAL(2071, 1)
MAKE_LITERAL_RATIONAL(2072, 1)
MAKE_LITERAL_RATIONAL(2073, 1)
MAKE_LITERAL_RATIONAL(2074, 1)
MAKE_LITERAL_RATIONAL(2075, 1)
MAKE_LITERAL_RATIONAL(2076, 1)
MAKE_LITERAL_RATIONAL(2077, 1)
MAKE_LITERAL_RATIONAL(2078, 1)
MAKE_LITERAL_RATIONAL(2079, 1)
MAKE_LITERAL_RATIONAL(2080, 1)
MAKE_LITERAL_RATIONAL(2081, 1)
MAKE_LITERAL_RATIONAL(2082, 1)
MAKE_LITERAL_RATIONAL(2083, 1)
MAKE_LITERAL_RATIONAL(2084, 1)
MAKE_LITERAL_RATIONAL(2085, 1)
MAKE_LITERAL_RATIONAL(2086, 1)
MAKE_LITERAL_RATIONAL(2087, 1)
MAKE_LITERAL_RATIONAL(2088, 1)
MAKE_LITERAL_RATIONAL(2089, 1)
MAKE_LITERAL_RATIONAL(2090, 1)
MAKE_LITERAL_RATIONAL(2091, 1)
MAKE_LITERAL_RATIONAL(2092, 1)
MAKE_LITERAL_RATIONAL(2093, 1)
MAKE_LITERAL_RATIONAL(2094, 1)
MAKE_LITERAL_RATIONAL(2095, 1)
MAKE_LITERAL_RATIONAL(2096, 1)
MAKE_LITERAL_RATIONAL(2097, 1)
MAKE_LITERAL_RATIONAL(2098, 1)
MAKE_LITERAL_RATIONAL(2099, 1)
MAKE_LITERAL_RATIONAL(2100, 1)
MAKE_LITERAL_RATIONAL(2101, 1)
MAKE_LITERAL_RATIONAL(2102, 1)
MAKE_LITERAL_RATIONAL(2103, 1)
MAKE_LITERAL_RATIONAL(2104, 1)
MAKE_LITERAL_RATIONAL(2105, 1)
MAKE_LITERAL_RATIONAL(2106, 1)
MAKE_LITERAL_RATIONAL(2107, 1)
MAKE_LITERAL_RATIONAL(2108, 1)
MAKE_LITERAL_RATIONAL(2109, 1)
MAKE_LITERAL_RATIONAL(2110, 1)
MAKE_LITERAL_RATIONAL(2111, 1)
MAKE_LITERAL_RATIONAL(2112, 1)
MAKE_LITERAL_RATIONAL(2113, 1)
MAKE_LITERAL_RATIONAL(2114, 1)
MAKE_LITERAL_RATIONAL(2115, 1)
MAKE_LITERAL_RATIONAL(2116, 1)
MAKE_LITERAL_RATIONAL(2117, 1)
MAKE_LITERAL_RATIONAL(2118, 1)
MAKE_LITERAL_RATIONAL(2119, 1)
MAKE_LITERAL_RATIONAL(2120, 1)
MAKE_LITERAL_RATIONAL(2121, 1)
MAKE_LITERAL_RATIONAL(2122, 1)
MAKE_LITERAL_RATIONAL(2123, 1)
MAKE_LITERAL_RATIONAL(2124, 1)
MAKE_LITERAL_RATIONAL(2125, 1)
MAKE_LITERAL_RATIONAL(2126, 1)
MAKE_LITERAL_RATIONAL(2127, 1)
MAKE_LITERAL_RATIONAL(2128, 1)
MAKE_LITERAL_RATIONAL(2129, 1)
MAKE_LITERAL_RATIONAL(2130, 1)
MAKE_LITERAL_RATIONAL(2131, 1)
MAKE_LITERAL_RATIONAL(2132, 1)
MAKE_LITERAL_RATIONAL(2133, 1)
MAKE_LITERAL_RATIONAL(2134, 1)
MAKE_LITERAL_RATIONAL(2135, 1)
MAKE_LITERAL_RATIONAL(2136, 1)
MAKE_LITERAL_RATIONAL(2137, 1)
MAKE_LITERAL_RATIONAL(2138, 1)
MAKE_LITERAL_RATIONAL(2139, 1)
MAKE_LITERAL_RATIONAL(2140, 1)
MAKE_LITERAL_RATIONAL(2141, 1)
MAKE_LITERAL_RATIONAL(2142, 1)
MAKE_LITERAL_RATIONAL(2143, 1)
MAKE_LITERAL_RATIONAL(2144, 1)
MAKE_LITERAL_RATIONAL(2145, 1)
MAKE_LITERAL_RATIONAL(2146, 1)
MAKE_LITERAL_RATIONAL(2147, 1)
MAKE_LITERAL_RATIONAL(2148, 1)
MAKE_LITERAL_RATIONAL(2149, 1)
MAKE_LITERAL_RATIONAL(2150, 1)
MAKE_LITERAL_RATIONAL(2151, 1)
MAKE_LITERAL_RATIONAL(2152, 1)
MAKE_LITERAL_RATIONAL(2153, 1)
MAKE_LITERAL_RATIONAL(2154, 1)
MAKE_LITERAL_RATIONAL(2155, 1)
MAKE_LITERAL_RATIONAL(2156, 1)
MAKE_LITERAL_RATIONAL(2157, 1)
MAKE_LITERAL_RATIONAL(2158, 1)
MAKE_LITERAL_RATIONAL(2159, 1)
MAKE_LITERAL_RATIONAL(2160, 1)
MAKE_LITERAL_RATIONAL(2161, 1)
MAKE_LITERAL_RATIONAL(2162, 1)
MAKE_LITERAL_RATIONAL(2163, 1)
MAKE_LITERAL_RATIONAL(2164, 1)
MAKE_LITERAL_RATIONAL(2165, 1)
MAKE_LITERAL_RATIONAL(2166, 1)
MAKE_LITERAL_RATIONAL(2167, 1)
MAKE_LITERAL_RATIONAL(2168, 1)
MAKE_LITERAL_RATIONAL(2169, 1)
MAKE_LITERAL_RATIONAL(2170, 1)
MAKE_LITERAL_RATIONAL(2171, 1)
MAKE_LITERAL_RATIONAL(2172, 1)
MAKE_LITERAL_RATIONAL(2173, 1)
MAKE_LITERAL_RATIONAL(2174, 1)
MAKE_LITERAL_RATIONAL(2175, 1)
MAKE_LITERAL_RATIONAL(2176, 1)
MAKE_LITERAL_RATIONAL(2177, 1)
MAKE_LITERAL_RATIONAL(2178, 1)
MAKE_LITERAL_RATIONAL(2179, 1)
MAKE_LITERAL_RATIONAL(2180, 1)
MAKE_LITERAL_RATIONAL(2181, 1)
MAKE_LITERAL_RATIONAL(2182, 1)
MAKE_LITERAL_RATIONAL(2183, 1)
MAKE_LITERAL_RATIONAL(2184, 1)
MAKE_LITERAL_RATIONAL(2185, 1)
MAKE_LITERAL_RATIONAL(2186, 1)
MAKE_LITERAL_RATIONAL(2187, 1)
MAKE_LITERAL_RATIONAL(2188, 1)
MAKE_LITERAL_RATIONAL(2189, 1)
MAKE_LITERAL_RATIONAL(2190, 1)
MAKE_LITERAL_RATIONAL(2191, 1)
MAKE_LITERAL_RATIONAL(2192, 1)
MAKE_LITERAL_RATIONAL(2193, 1)
MAKE_LITERAL_RATIONAL(2194, 1)
MAKE_LITERAL_RATIONAL(2195, 1)
MAKE_LITERAL_RATIONAL(2196, 1)
MAKE_LITERAL_RATIONAL(2197, 1)
MAKE_LITERAL_RATIONAL(2198, 1)
MAKE_LITERAL_RATIONAL(2199, 1)
MAKE_LITERAL_RATIONAL(2200, 1)
MAKE_LITERAL_RATIONAL(2201, 1)
MAKE_LITERAL_RATIONAL(2202, 1)
MAKE_LITERAL_RATIONAL(2203, 1)
MAKE_LITERAL_RATIONAL(2204, 1)
MAKE_LITERAL_RATIONAL(2205, 1)
MAKE_LITERAL_RATIONAL(2206, 1)
MAKE_LITERAL_RATIONAL(2207, 1)
MAKE_LITERAL_RATIONAL(2208, 1)
MAKE_LITERAL_RATIONAL(2209, 1)
MAKE_LITERAL_RATIONAL(2210, 1)
MAKE_LITERAL_RATIONAL(2211, 1)
MAKE_LITERAL_RATIONAL(2212, 1)
MAKE_LITERAL_RATIONAL(2213, 1)
MAKE_LITERAL_RATIONAL(2214, 1)
MAKE_LITERAL_RATIONAL(2215, 1)
MAKE_LITERAL_RATIONAL(2216, 1)
MAKE_LITERAL_RATIONAL(2217, 1)
MAKE_LITERAL_RATIONAL(2218, 1)
MAKE_LITERAL_RATIONAL(2219, 1)
MAKE_LITERAL_RATIONAL(2220, 1)
MAKE_LITERAL_RATIONAL(2221, 1)
MAKE_LITERAL_RATIONAL(2222, 1)
MAKE_LITERAL_RATIONAL(2223, 1)
MAKE_LITERAL_RATIONAL(2224, 1)
MAKE_LITERAL_RATIONAL(2225, 1)
MAKE_LITERAL_RATIONAL(2226, 1)
MAKE_LITERAL_RATIONAL(2227, 1)
MAKE_LITERAL_RATIONAL(2228, 1)
MAKE_LITERAL_RATIONAL(2229, 1)
MAKE_LITERAL_RATIONAL(2230, 1)
MAKE_LITERAL_RATIONAL(2231, 1)
MAKE_LITERAL_RATIONAL(2232, 1)
MAKE_LITERAL_RATIONAL(2233, 1)
MAKE_LITERAL_RATIONAL(2234, 1)
MAKE_LITERAL_RATIONAL(2235, 1)
MAKE_LITERAL_RATIONAL(2236, 1)
MAKE_LITERAL_RATIONAL(2237, 1)
MAKE_LITERAL_RATIONAL(2238, 1)
MAKE_LITERAL_RATIONAL(2239, 1)
MAKE_LITERAL_RATIONAL(2240, 1)
MAKE_LITERAL_RATIONAL(2241, 1)
MAKE_LITERAL_RATIONAL(2242, 1)
MAKE_LITERAL_RATIONAL(2243, 1)
MAKE_LITERAL_RATIONAL(2244, 1)
MAKE_LITERAL_RATIONAL(2245, 1)
MAKE_LITERAL_RATIONAL(2246, 1)
MAKE_LITERAL_RATIONAL(2247, 1)
MAKE_LITERAL_RATIONAL(2248, 1)
MAKE_LITERAL_RATIONAL(2249, 1)
MAKE_LITERAL_RATIONAL(2250, 1)
MAKE_LITERAL_RATIONAL(2251, 1)
MAKE_LITERAL_RATIONAL(2252, 1)
MAKE_LITERAL_RATIONAL(2253, 1)
MAKE_LITERAL_RATIONAL(2254, 1)
MAKE_LITERAL_RATIONAL(2255, 1)
MAKE_LITERAL_RATIONAL(2256, 1)
MAKE_LITERAL_RATIONAL(2257, 1)
MAKE_LITERAL_RATIONAL(2258, 1)
MAKE_LITERAL_RATIONAL(2259, 1)
MAKE_LITERAL_RATIONAL(2260, 1)
MAKE_LITERAL_RATIONAL(2261, 1)
MAKE_LITERAL_RATIONAL(2262, 1)
MAKE_LITERAL_RATIONAL(2263, 1)
MAKE_LITERAL_RATIONAL(2264, 1)
MAKE_LITERAL_RATIONAL(2265, 1)
MAKE_LITERAL_RATIONAL(2266, 1)
MAKE_LITERAL_RATIONAL(2267, 1)
MAKE_LITERAL_RATIONAL(2268, 1)
MAKE_LITERAL_RATIONAL(2269, 1)
MAKE_LITERAL_RATIONAL(2270, 1)
MAKE_LITERAL_RATIONAL(2271, 1)
MAKE_LITERAL_RATIONAL(2272, 1)
MAKE_LITERAL_RATIONAL(2273, 1)
MAKE_LITERAL_RATIONAL(2274, 1)
MAKE_LITERAL_RATIONAL(2275, 1)
MAKE_LITERAL_RATIONAL(2276, 1)
MAKE_LITERAL_RATIONAL(2277, 1)
MAKE_LITERAL_RATIONAL(2278, 1)
MAKE_LITERAL_RATIONAL(2279, 1)
MAKE_LITERAL_RATIONAL(2280, 1)
MAKE_LITERAL_RATIONAL(2281, 1)
MAKE_LITERAL_RATIONAL(2282, 1)
MAKE_LITERAL_RATIONAL(2283, 1)
MAKE_LITERAL_RATIONAL(2284, 1)
MAKE_LITERAL_RATIONAL(2285, 1)
MAKE_LITERAL_RATIONAL(2286, 1)
MAKE_LITERAL_RATIONAL(2287, 1)
MAKE_LITERAL_RATIONAL(2288, 1)
MAKE_LITERAL_RATIONAL(2289, 1)
MAKE_LITERAL_RATIONAL(2290, 1)
MAKE_LITERAL_RATIONAL(2291, 1)
MAKE_LITERAL_RATIONAL(2292, 1)
MAKE_LITERAL_RATIONAL(2293, 1)
MAKE_LITERAL_RATIONAL(2294, 1)
MAKE_LITERAL_RATIONAL(2295, 1)
MAKE_LITERAL_RATIONAL(2296, 1)
MAKE_LITERAL_RATIONAL(2297, 1)
MAKE_LITERAL_RATIONAL(2298, 1)
MAKE_LITERAL_RATIONAL(2299, 1)
MAKE_LITERAL_RATIONAL(2300, 1)
MAKE_LITERAL_RATIONAL(2301, 1)
MAKE_LITERAL_RATIONAL(2302, 1)
MAKE_LITERAL_RATIONAL(2303, 1)
MAKE_LITERAL_RATIONAL(2304, 1)
MAKE_LITERAL_RATIONAL(2305, 1)
MAKE_LITERAL_RATIONAL(2306, 1)
MAKE_LITERAL_RATIONAL(2307, 1)
MAKE_LITERAL_RATIONAL(2308, 1)
MAKE_LITERAL_RATIONAL(2309, 1)
MAKE_LITERAL_RATIONAL(2310, 1)
MAKE_LITERAL_RATIONAL(2311, 1)
MAKE_LITERAL_RATIONAL(2312, 1)
MAKE_LITERAL_RATIONAL(2313, 1)
MAKE_LITERAL_RATIONAL(2314, 1)
MAKE_LITERAL_RATIONAL(2315, 1)
MAKE_LITERAL_RATIONAL(2316, 1)
MAKE_LITERAL_RATIONAL(2317, 1)
MAKE_LITERAL_RATIONAL(2318, 1)
MAKE_LITERAL_RATIONAL(2319, 1)
MAKE_LITERAL_RATIONAL(2320, 1)
MAKE_LITERAL_RATIONAL(2321, 1)
MAKE_LITERAL_RATIONAL(2322, 1)
MAKE_LITERAL_RATIONAL(2323, 1)
MAKE_LITERAL_RATIONAL(2324, 1)
MAKE_LITERAL_RATIONAL(2325, 1)
MAKE_LITERAL_RATIONAL(2326, 1)
MAKE_LITERAL_RATIONAL(2327, 1)
MAKE_LITERAL_RATIONAL(2328, 1)
MAKE_LITERAL_RATIONAL(2329, 1)
MAKE_LITERAL_RATIONAL(2330, 1)
MAKE_LITERAL_RATIONAL(2331, 1)
MAKE_LITERAL_RATIONAL(2332, 1)
MAKE_LITERAL_RATIONAL(2333, 1)
MAKE_LITERAL_RATIONAL(2334, 1)
MAKE_LITERAL_RATIONAL(2335, 1)
MAKE_LITERAL_RATIONAL(2336, 1)
MAKE_LITERAL_RATIONAL(2337, 1)
MAKE_LITERAL_RATIONAL(2338, 1)
MAKE_LITERAL_RATIONAL(2339, 1)
MAKE_LITERAL_RATIONAL(2340, 1)
MAKE_LITERAL_RATIONAL(2341, 1)
MAKE_LITERAL_RATIONAL(2342, 1)
MAKE_LITERAL_RATIONAL(2343, 1)
MAKE_LITERAL_RATIONAL(2344, 1)
MAKE_LITERAL_RATIONAL(2345, 1)
MAKE_LITERAL_RATIONAL(2346, 1)
MAKE_LITERAL_RATIONAL(2347, 1)
MAKE_LITERAL_RATIONAL(2348, 1)
MAKE_LITERAL_RATIONAL(2349, 1)
MAKE_LITERAL_RATIONAL(2350, 1)
MAKE_LITERAL_RATIONAL(2351, 1)
MAKE_LITERAL_RATIONAL(2352, 1)
MAKE_LITERAL_RATIONAL(2353, 1)
MAKE_LITERAL_RATIONAL(2354, 1)
MAKE_LITERAL_RATIONAL(2355, 1)
MAKE_LITERAL_RATIONAL(2356, 1)
MAKE_LITERAL_RATIONAL(2357, 1)
MAKE_LITERAL_RATIONAL(2358, 1)
MAKE_LITERAL_RATIONAL(2359, 1)
MAKE_LITERAL_RATIONAL(2360, 1)
MAKE_LITERAL_RATIONAL(2361, 1)
MAKE_LITERAL_RATIONAL(2362, 1)
MAKE_LITERAL_RATIONAL(2363, 1)
MAKE_LITERAL_RATIONAL(2364, 1)
MAKE_LITERAL_RATIONAL(2365, 1)
MAKE_LITERAL_RATIONAL(2366, 1)
MAKE_LITERAL_RATIONAL(2367, 1)
MAKE_LITERAL_RATIONAL(2368, 1)
MAKE_LITERAL_RATIONAL(2369, 1)
MAKE_LITERAL_RATIONAL(2370, 1)
MAKE_LITERAL_RATIONAL(2371, 1)
MAKE_LITERAL_RATIONAL(2372, 1)
MAKE_LITERAL_RATIONAL(2373, 1)
MAKE_LITERAL_RATIONAL(2374, 1)
MAKE_LITERAL_RATIONAL(2375, 1)
MAKE_LITERAL_RATIONAL(2376, 1)
MAKE_LITERAL_RATIONAL(2377, 1)
MAKE_LITERAL_RATIONAL(2378, 1)
MAKE_LITERAL_RATIONAL(2379, 1)
MAKE_LITERAL_RATIONAL(2380, 1)
MAKE_LITERAL_RATIONAL(2381, 1)
MAKE_LITERAL_RATIONAL(2382, 1)
MAKE_LITERAL_RATIONAL(2383, 1)
MAKE_LITERAL_RATIONAL(2384, 1)
MAKE_LITERAL_RATIONAL(2385, 1)
MAKE_LITERAL_RATIONAL(2386, 1)
MAKE_LITERAL_RATIONAL(2387, 1)
MAKE_LITERAL_RATIONAL(2388, 1)
MAKE_LITERAL_RATIONAL(2389, 1)
MAKE_LITERAL_RATIONAL(2390, 1)
MAKE_LITERAL_RATIONAL(2391, 1)
MAKE_LITERAL_RATIONAL(2392, 1)
MAKE_LITERAL_RATIONAL(2393, 1)
MAKE_LITERAL_RATIONAL(2394, 1)
MAKE_LITERAL_RATIONAL(2395, 1)
MAKE_LITERAL_RATIONAL(2396, 1)
MAKE_LITERAL_RATIONAL(2397, 1)
MAKE_LITERAL_RATIONAL(2398, 1)
MAKE_LITERAL_RATIONAL(2399, 1)
MAKE_LITERAL_RATIONAL(2400, 1)
MAKE_LITERAL_RATIONAL(2401, 1)
MAKE_LITERAL_RATIONAL(2402, 1)
MAKE_LITERAL_RATIONAL(2403, 1)
MAKE_LITERAL_RATIONAL(2404, 1)
MAKE_LITERAL_RATIONAL(2405, 1)
MAKE_LITERAL_RATIONAL(2406, 1)
MAKE_LITERAL_RATIONAL(2407, 1)
MAKE_LITERAL_RATIONAL(2408, 1)
MAKE_LITERAL_RATIONAL(2409, 1)
MAKE_LITERAL_RATIONAL(2410, 1)
MAKE_LITERAL_RATIONAL(2411, 1)
MAKE_LITERAL_RATIONAL(2412, 1)
MAKE_LITERAL_RATIONAL(2413, 1)
MAKE_LITERAL_RATIONAL(2414, 1)
MAKE_LITERAL_RATIONAL(2415, 1)
MAKE_LITERAL_RATIONAL(2416, 1)
MAKE_LITERAL_RATIONAL(2417, 1)
MAKE_LITERAL_RATIONAL(2418, 1)
MAKE_LITERAL_RATIONAL(2419, 1)
MAKE_LITERAL_RATIONAL(2420, 1)
MAKE_LITERAL_RATIONAL(2421, 1)
MAKE_LITERAL_RATIONAL(2422, 1)
MAKE_LITERAL_RATIONAL(2423, 1)
MAKE_LITERAL_RATIONAL(2424, 1)
MAKE_LITERAL_RATIONAL(2425, 1)
MAKE_LITERAL_RATIONAL(2426, 1)
MAKE_LITERAL_RATIONAL(2427, 1)
MAKE_LITERAL_RATIONAL(2428, 1)
MAKE_LITERAL_RATIONAL(2429, 1)
MAKE_LITERAL_RATIONAL(2430, 1)
MAKE_LITERAL_RATIONAL(2431, 1)
MAKE_LITERAL_RATIONAL(2432, 1)
MAKE_LITERAL_RATIONAL(2433, 1)
MAKE_LITERAL_RATIONAL(2434, 1)
MAKE_LITERAL_RATIONAL(2435, 1)
MAKE_LITERAL_RATIONAL(2436, 1)
MAKE_LITERAL_RATIONAL(2437, 1)
MAKE_LITERAL_RATIONAL(2438, 1)
MAKE_LITERAL_RATIONAL(2439, 1)
MAKE_LITERAL_RATIONAL(2440, 1)
MAKE_LITERAL_RATIONAL(2441, 1)
MAKE_LITERAL_RATIONAL(2442, 1)
MAKE_LITERAL_RATIONAL(2443, 1)
MAKE_LITERAL_RATIONAL(2444, 1)
MAKE_LITERAL_RATIONAL(2445, 1)
MAKE_LITERAL_RATIONAL(2446, 1)
MAKE_LITERAL_RATIONAL(2447, 1)
MAKE_LITERAL_RATIONAL(2448, 1)
MAKE_LITERAL_RATIONAL(2449, 1)
MAKE_LITERAL_RATIONAL(2450, 1)
MAKE_LITERAL_RATIONAL(2451, 1)
MAKE_LITERAL_RATIONAL(2452, 1)
MAKE_LITERAL_RATIONAL(2453, 1)
MAKE_LITERAL_RATIONAL(2454, 1)
MAKE_LITERAL_RATIONAL(2455, 1)
MAKE_LITERAL_RATIONAL(2456, 1)
MAKE_LITERAL_RATIONAL(2457, 1)
MAKE_LITERAL_RATIONAL(2458, 1)
MAKE_LITERAL_RATIONAL(2459, 1)
MAKE_LITERAL_RATIONAL(2460, 1)
MAKE_LITERAL_RATIONAL(2461, 1)
MAKE_LITERAL_RATIONAL(2462, 1)
MAKE_LITERAL_RATIONAL(2463, 1)
MAKE_LITERAL_RATIONAL(2464, 1)
MAKE_LITERAL_RATIONAL(2465, 1)
MAKE_LITERAL_RATIONAL(2466, 1)
MAKE_LITERAL_RATIONAL(2467, 1)
MAKE_LITERAL_RATIONAL(2468, 1)
MAKE_LITERAL_RATIONAL(2469, 1)
MAKE_LITERAL_RATIONAL(2470, 1)
MAKE_LITERAL_RATIONAL(2471, 1)
MAKE_LITERAL_RATIONAL(2472, 1)
MAKE_LITERAL_RATIONAL(2473, 1)
MAKE_LITERAL_RATIONAL(2474, 1)
MAKE_LITERAL_RATIONAL(2475, 1)
MAKE_LITERAL_RATIONAL(2476, 1)
MAKE_LITERAL_RATIONAL(2477, 1)
MAKE_LITERAL_RATIONAL(2478, 1)
MAKE_LITERAL_RATIONAL(2479, 1)
MAKE_LITERAL_RATIONAL(2480, 1)
MAKE_LITERAL_RATIONAL(2481, 1)
MAKE_LITERAL_RATIONAL(2482, 1)
MAKE_LITERAL_RATIONAL(2483, 1)
MAKE_LITERAL_RATIONAL(2484, 1)
MAKE_LITERAL_RATIONAL(2485, 1)
MAKE_LITERAL_RATIONAL(2486, 1)
MAKE_LITERAL_RATIONAL(2487, 1)
MAKE_LITERAL_RATIONAL(2488, 1)
MAKE_LITERAL_RATIONAL(2489, 1)
MAKE_LITERAL_RATIONAL(2490, 1)
MAKE_LITERAL_RATIONAL(2491, 1)
MAKE_LITERAL_RATIONAL(2492, 1)
MAKE_LITERAL_RATIONAL(2493, 1)
MAKE_LITERAL_RATIONAL(2494, 1)
MAKE_LITERAL_RATIONAL(2495, 1)
MAKE_LITERAL_RATIONAL(2496, 1)
MAKE_LITERAL_RATIONAL(2497, 1)
MAKE_LITERAL_RATIONAL(2498, 1)
MAKE_LITERAL_RATIONAL(2499, 1)
MAKE_LITERAL_RATIONAL(2500, 1)
MAKE_LITERAL_RATIONAL(2501, 1)
MAKE_LITERAL_RATIONAL(2502, 1)
MAKE_LITERAL_RATIONAL(2503, 1)
MAKE_LITERAL_RATIONAL(2504, 1)
MAKE_LITERAL_RATIONAL(2505, 1)
MAKE_LITERAL_RATIONAL(2506, 1)
MAKE_LITERAL_RATIONAL(2507, 1)
MAKE_LITERAL_RATIONAL(2508, 1)
MAKE_LITERAL_RATIONAL(2509, 1)
MAKE_LITERAL_RATIONAL(2510, 1)
MAKE_LITERAL_RATIONAL(2511, 1)
MAKE_LITERAL_RATIONAL(2512, 1)
MAKE_LITERAL_RATIONAL(2513, 1)
MAKE_LITERAL_RATIONAL(2514, 1)
MAKE_LITERAL_RATIONAL(2515, 1)
MAKE_LITERAL_RATIONAL(2516, 1)
MAKE_LITERAL_RATIONAL(2517, 1)
MAKE_LITERAL_RATIONAL(2518, 1)
MAKE_LITERAL_RATIONAL(2519, 1)
MAKE_LITERAL_RATIONAL(2520, 1)
MAKE_LITERAL_RATIONAL(2521, 1)
MAKE_LITERAL_RATIONAL(2522, 1)
MAKE_LITERAL_RATIONAL(2523, 1)
MAKE_LITERAL_RATIONAL(2524, 1)
MAKE_LITERAL_RATIONAL(2525, 1)
MAKE_LITERAL_RATIONAL(2526, 1)
MAKE_LITERAL_RATIONAL(2527, 1)
MAKE_LITERAL_RATIONAL(2528, 1)
MAKE_LITERAL_RATIONAL(2529, 1)
MAKE_LITERAL_RATIONAL(2530, 1)
MAKE_LITERAL_RATIONAL(2531, 1)
MAKE_LITERAL_RATIONAL(2532, 1)
MAKE_LITERAL_RATIONAL(2533, 1)
MAKE_LITERAL_RATIONAL(2534, 1)
MAKE_LITERAL_RATIONAL(2535, 1)
MAKE_LITERAL_RATIONAL(2536, 1)
MAKE_LITERAL_RATIONAL(2537, 1)
MAKE_LITERAL_RATIONAL(2538, 1)
MAKE_LITERAL_RATIONAL(2539, 1)
MAKE_LITERAL_RATIONAL(2540, 1)
MAKE_LITERAL_RATIONAL(2541, 1)
MAKE_LITERAL_RATIONAL(2542, 1)
MAKE_LITERAL_RATIONAL(2543, 1)
MAKE_LITERAL_RATIONAL(2544, 1)
MAKE_LITERAL_RATIONAL(2545, 1)
MAKE_LITERAL_RATIONAL(2546, 1)
MAKE_LITERAL_RATIONAL(2547, 1)
MAKE_LITERAL_RATIONAL(2548, 1)
MAKE_LITERAL_RATIONAL(2549, 1)
MAKE_LITERAL_RATIONAL(2550, 1)
MAKE_LITERAL_RATIONAL(2551, 1)
MAKE_LITERAL_RATIONAL(2552, 1)
MAKE_LITERAL_RATIONAL(2553, 1)
MAKE_LITERAL_RATIONAL(2554, 1)
MAKE_LITERAL_RATIONAL(2555, 1)
MAKE_LITERAL_RATIONAL(2556, 1)
MAKE_LITERAL_RATIONAL(2557, 1)
MAKE_LITERAL_RATIONAL(2558, 1)
MAKE_LITERAL_RATIONAL(2559, 1)
MAKE_LITERAL_RATIONAL(2560, 1)
MAKE_LITERAL_RATIONAL(2561, 1)
MAKE_LITERAL_RATIONAL(2562, 1)
MAKE_LITERAL_RATIONAL(2563, 1)
MAKE_LITERAL_RATIONAL(2564, 1)
MAKE_LITERAL_RATIONAL(2565, 1)
MAKE_LITERAL_RATIONAL(2566, 1)
MAKE_LITERAL_RATIONAL(2567, 1)
MAKE_LITERAL_RATIONAL(2568, 1)
MAKE_LITERAL_RATIONAL(2569, 1)
MAKE_LITERAL_RATIONAL(2570, 1)
MAKE_LITERAL_RATIONAL(2571, 1)
MAKE_LITERAL_RATIONAL(2572, 1)
MAKE_LITERAL_RATIONAL(2573, 1)
MAKE_LITERAL_RATIONAL(2574, 1)
MAKE_LITERAL_RATIONAL(2575, 1)
MAKE_LITERAL_RATIONAL(2576, 1)
MAKE_LITERAL_RATIONAL(2577, 1)
MAKE_LITERAL_RATIONAL(2578, 1)
MAKE_LITERAL_RATIONAL(2579, 1)
MAKE_LITERAL_RATIONAL(2580, 1)
MAKE_LITERAL_RATIONAL(2581, 1)
MAKE_LITERAL_RATIONAL(2582, 1)
MAKE_LITERAL_RATIONAL(2583, 1)
MAKE_LITERAL_RATIONAL(2584, 1)
MAKE_LITERAL_RATIONAL(2585, 1)
MAKE_LITERAL_RATIONAL(2586, 1)
MAKE_LITERAL_RATIONAL(2587, 1)
MAKE_LITERAL_RATIONAL(2588, 1)
MAKE_LITERAL_RATIONAL(2589, 1)
MAKE_LITERAL_RATIONAL(2590, 1)
MAKE_LITERAL_RATIONAL(2591, 1)
MAKE_LITERAL_RATIONAL(2592, 1)
MAKE_LITERAL_RATIONAL(2593, 1)
MAKE_LITERAL_RATIONAL(2594, 1)
MAKE_LITERAL_RATIONAL(2595, 1)
MAKE_LITERAL_RATIONAL(2596, 1)
MAKE_LITERAL_RATIONAL(2597, 1)
MAKE_LITERAL_RATIONAL(2598, 1)
MAKE_LITERAL_RATIONAL(2599, 1)
MAKE_LITERAL_RATIONAL(2600, 1)
MAKE_LITERAL_RATIONAL(2601, 1)
MAKE_LITERAL_RATIONAL(2602, 1)
MAKE_LITERAL_RATIONAL(2603, 1)
MAKE_LITERAL_RATIONAL(2604, 1)
MAKE_LITERAL_RATIONAL(2605, 1)
MAKE_LITERAL_RATIONAL(2606, 1)
MAKE_LITERAL_RATIONAL(2607, 1)
MAKE_LITERAL_RATIONAL(2608, 1)
MAKE_LITERAL_RATIONAL(2609, 1)
MAKE_LITERAL_RATIONAL(2610, 1)
MAKE_LITERAL_RATIONAL(2611, 1)
MAKE_LITERAL_RATIONAL(2612, 1)
MAKE_LITERAL_RATIONAL(2613, 1)
MAKE_LITERAL_RATIONAL(2614, 1)
MAKE_LITERAL_RATIONAL(2615, 1)
MAKE_LITERAL_RATIONAL(2616, 1)
MAKE_LITERAL_RATIONAL(2617, 1)
MAKE_LITERAL_RATIONAL(2618, 1)
MAKE_LITERAL_RATIONAL(2619, 1)
MAKE_LITERAL_RATIONAL(2620, 1)
MAKE_LITERAL_RATIONAL(2621, 1)
MAKE_LITERAL_RATIONAL(2622, 1)
MAKE_LITERAL_RATIONAL(2623, 1)
MAKE_LITERAL_RATIONAL(2624, 1)
MAKE_LITERAL_RATIONAL(2625, 1)
MAKE_LITERAL_RATIONAL(2626, 1)
MAKE_LITERAL_RATIONAL(2627, 1)
MAKE_LITERAL_RATIONAL(2628, 1)
MAKE_LITERAL_RATIONAL(2629, 1)
MAKE_LITERAL_RATIONAL(2630, 1)
MAKE_LITERAL_RATIONAL(2631, 1)
MAKE_LITERAL_RATIONAL(2632, 1)
MAKE_LITERAL_RATIONAL(2633, 1)
MAKE_LITERAL_RATIONAL(2634, 1)
MAKE_LITERAL_RATIONAL(2635, 1)
MAKE_LITERAL_RATIONAL(2636, 1)
MAKE_LITERAL_RATIONAL(2637, 1)
MAKE_LITERAL_RATIONAL(2638, 1)
MAKE_LITERAL_RATIONAL(2639, 1)
MAKE_LITERAL_RATIONAL(2640, 1)
MAKE_LITERAL_RATIONAL(2641, 1)
MAKE_LITERAL_RATIONAL(2642, 1)
MAKE_LITERAL_RATIONAL(2643, 1)
MAKE_LITERAL_RATIONAL(2644, 1)
MAKE_LITERAL_RATIONAL(2645, 1)
MAKE_LITERAL_RATIONAL(2646, 1)
MAKE_LITERAL_RATIONAL(2647, 1)
MAKE_LITERAL_RATIONAL(2648, 1)
MAKE_LITERAL_RATIONAL(2649, 1)
MAKE_LITERAL_RATIONAL(2650, 1)
MAKE_LITERAL_RATIONAL(2651, 1)
MAKE_LITERAL_RATIONAL(2652, 1)
MAKE_LITERAL_RATIONAL(2653, 1)
MAKE_LITERAL_RATIONAL(2654, 1)
MAKE_LITERAL_RATIONAL(2655, 1)
MAKE_LITERAL_RATIONAL(2656, 1)
MAKE_LITERAL_RATIONAL(2657, 1)
MAKE_LITERAL_RATIONAL(2658, 1)
MAKE_LITERAL_RATIONAL(2659, 1)
MAKE_LITERAL_RATIONAL(2660, 1)
MAKE_LITERAL_RATIONAL(2661, 1)
MAKE_LITERAL_RATIONAL(2662, 1)
MAKE_LITERAL_RATIONAL(2663, 1)
MAKE_LITERAL_RATIONAL(2664, 1)
MAKE_LITERAL_RATIONAL(2665, 1)
MAKE_LITERAL_RATIONAL(2666, 1)
MAKE_LITERAL_RATIONAL(2667, 1)
MAKE_LITERAL_RATIONAL(2668, 1)
MAKE_LITERAL_RATIONAL(2669, 1)
MAKE_LITERAL_RATIONAL(2670, 1)
MAKE_LITERAL_RATIONAL(2671, 1)
MAKE_LITERAL_RATIONAL(2672, 1)
MAKE_LITERAL_RATIONAL(2673, 1)
MAKE_LITERAL_RATIONAL(2674, 1)
MAKE_LITERAL_RATIONAL(2675, 1)
MAKE_LITERAL_RATIONAL(2676, 1)
MAKE_LITERAL_RATIONAL(2677, 1)
MAKE_LITERAL_RATIONAL(2678, 1)
MAKE_LITERAL_RATIONAL(2679, 1)
MAKE_LITERAL_RATIONAL(2680, 1)
MAKE_LITERAL_RATIONAL(2681, 1)
MAKE_LITERAL_RATIONAL(2682, 1)
MAKE_LITERAL_RATIONAL(2683, 1)
MAKE_LITERAL_RATIONAL(2684, 1)
MAKE_LITERAL_RATIONAL(2685, 1)
MAKE_LITERAL_RATIONAL(2686, 1)
MAKE_LITERAL_RATIONAL(2687, 1)
MAKE_LITERAL_RATIONAL(2688, 1)
MAKE_LITERAL_RATIONAL(2689, 1)
MAKE_LITERAL_RATIONAL(2690, 1)
MAKE_LITERAL_RATIONAL(2691, 1)
MAKE_LITERAL_RATIONAL(2692, 1)
MAKE_LITERAL_RATIONAL(2693, 1)
MAKE_LITERAL_RATIONAL(2694, 1)
MAKE_LITERAL_RATIONAL(2695, 1)
MAKE_LITERAL_RATIONAL(2696, 1)
MAKE_LITERAL_RATIONAL(2697, 1)
MAKE_LITERAL_RATIONAL(2698, 1)
MAKE_LITERAL_RATIONAL(2699, 1)
MAKE_LITERAL_RATIONAL(2700, 1)
MAKE_LITERAL_RATIONAL(2701, 1)
MAKE_LITERAL_RATIONAL(2702, 1)
MAKE_LITERAL_RATIONAL(2703, 1)
MAKE_LITERAL_RATIONAL(2704, 1)
MAKE_LITERAL_RATIONAL(2705, 1)
MAKE_LITERAL_RATIONAL(2706, 1)
MAKE_LITERAL_RATIONAL(2707, 1)
MAKE_LITERAL_RATIONAL(2708, 1)
MAKE_LITERAL_RATIONAL(2709, 1)
MAKE_LITERAL_RATIONAL(2710, 1)
MAKE_LITERAL_RATIONAL(2711, 1)
MAKE_LITERAL_RATIONAL(2712, 1)
MAKE_LITERAL_RATIONAL(2713, 1)
MAKE_LITERAL_RATIONAL(2714, 1)
MAKE_LITERAL_RATIONAL(2715, 1)
MAKE_LITERAL_RATIONAL(2716, 1)
MAKE_LITERAL_RATIONAL(2717, 1)
MAKE_LITERAL_RATIONAL(2718, 1)
MAKE_LITERAL_RATIONAL(2719, 1)
MAKE_LITERAL_RATIONAL(2720, 1)
MAKE_LITERAL_RATIONAL(2721, 1)
MAKE_LITERAL_RATIONAL(2722, 1)
MAKE_LITERAL_RATIONAL(2723, 1)
MAKE_LITERAL_RATIONAL(2724, 1)
MAKE_LITERAL_RATIONAL(2725, 1)
MAKE_LITERAL_RATIONAL(2726, 1)
MAKE_LITERAL_RATIONAL(2727, 1)
MAKE_LITERAL_RATIONAL(2728, 1)
MAKE_LITERAL_RATIONAL(2729, 1)
MAKE_LITERAL_RATIONAL(2730, 1)
MAKE_LITERAL_RATIONAL(2731, 1)
MAKE_LITERAL_RATIONAL(2732, 1)
MAKE_LITERAL_RATIONAL(2733, 1)
MAKE_LITERAL_RATIONAL(2734, 1)
MAKE_LITERAL_RATIONAL(2735, 1)
MAKE_LITERAL_RATIONAL(2736, 1)
MAKE_LITERAL_RATIONAL(2737, 1)
MAKE_LITERAL_RATIONAL(2738, 1)
MAKE_LITERAL_RATIONAL(2739, 1)
MAKE_LITERAL_RATIONAL(2740, 1)
MAKE_LITERAL_RATIONAL(2741, 1)
MAKE_LITERAL_RATIONAL(2742, 1)
MAKE_LITERAL_RATIONAL(2743, 1)
MAKE_LITERAL_RATIONAL(2744, 1)
MAKE_LITERAL_RATIONAL(2745, 1)
MAKE_LITERAL_RATIONAL(2746, 1)
MAKE_LITERAL_RATIONAL(2747, 1)
MAKE_LITERAL_RATIONAL(2748, 1)
MAKE_LITERAL_RATIONAL(2749, 1)
MAKE_LITERAL_RATIONAL(2750, 1)
MAKE_LITERAL_RATIONAL(2751, 1)
MAKE_LITERAL_RATIONAL(2752, 1)
MAKE_LITERAL_RATIONAL(2753, 1)
MAKE_LITERAL_RATIONAL(2754, 1)
MAKE_LITERAL_RATIONAL(2755, 1)
MAKE_LITERAL_RATIONAL(2756, 1)
MAKE_LITERAL_RATIONAL(2757, 1)
MAKE_LITERAL_RATIONAL(2758, 1)
MAKE_LITERAL_RATIONAL(2759, 1)
MAKE_LITERAL_RATIONAL(2760, 1)
MAKE_LITERAL_RATIONAL(2761, 1)
MAKE_LITERAL_RATIONAL(2762, 1)
MAKE_LITERAL_RATIONAL(2763, 1)
MAKE_LITERAL_RATIONAL(2764, 1)
MAKE_LITERAL_RATIONAL(2765, 1)
MAKE_LITERAL_RATIONAL(2766, 1)
MAKE_LITERAL_RATIONAL(2767, 1)
MAKE_LITERAL_RATIONAL(2768, 1)
MAKE_LITERAL_RATIONAL(2769, 1)
MAKE_LITERAL_RATIONAL(2770, 1)
MAKE_LITERAL_RATIONAL(2771, 1)
MAKE_LITERAL_RATIONAL(2772, 1)
MAKE_LITERAL_RATIONAL(2773, 1)
MAKE_LITERAL_RATIONAL(2774, 1)
MAKE_LITERAL_RATIONAL(2775, 1)
MAKE_LITERAL_RATIONAL(2776, 1)
MAKE_LITERAL_RATIONAL(2777, 1)
MAKE_LITERAL_RATIONAL(2778, 1)
MAKE_LITERAL_RATIONAL(2779, 1)
MAKE_LITERAL_RATIONAL(2780, 1)
MAKE_LITERAL_RATIONAL(2781, 1)
MAKE_LITERAL_RATIONAL(2782, 1)
MAKE_LITERAL_RATIONAL(2783, 1)
MAKE_LITERAL_RATIONAL(2784, 1)
MAKE_LITERAL_RATIONAL(2785, 1)
MAKE_LITERAL_RATIONAL(2786, 1)
MAKE_LITERAL_RATIONAL(2787, 1)
MAKE_LITERAL_RATIONAL(2788, 1)
MAKE_LITERAL_RATIONAL(2789, 1)
MAKE_LITERAL_RATIONAL(2790, 1)
MAKE_LITERAL_RATIONAL(2791, 1)
MAKE_LITERAL_RATIONAL(2792, 1)
MAKE_LITERAL_RATIONAL(2793, 1)
MAKE_LITERAL_RATIONAL(2794, 1)
MAKE_LITERAL_RATIONAL(2795, 1)
MAKE_LITERAL_RATIONAL(2796, 1)
MAKE_LITERAL_RATIONAL(2797, 1)
MAKE_LITERAL_RATIONAL(2798, 1)
MAKE_LITERAL_RATIONAL(2799, 1)
MAKE_LITERAL_RATIONAL(2800, 1)
MAKE_LITERAL_RATIONAL(2801, 1)
MAKE_LITERAL_RATIONAL(2802, 1)
MAKE_LITERAL_RATIONAL(2803, 1)
MAKE_LITERAL_RATIONAL(2804, 1)
MAKE_LITERAL_RATIONAL(2805, 1)
MAKE_LITERAL_RATIONAL(2806, 1)
MAKE_LITERAL_RATIONAL(2807, 1)
MAKE_LITERAL_RATIONAL(2808, 1)
MAKE_LITERAL_RATIONAL(2809, 1)
MAKE_LITERAL_RATIONAL(2810, 1)
MAKE_LITERAL_RATIONAL(2811, 1)
MAKE_LITERAL_RATIONAL(2812, 1)
MAKE_LITERAL_RATIONAL(2813, 1)
MAKE_LITERAL_RATIONAL(2814, 1)
MAKE_LITERAL_RATIONAL(2815, 1)
MAKE_LITERAL_RATIONAL(2816, 1)
MAKE_LITERAL_RATIONAL(2817, 1)
MAKE_LITERAL_RATIONAL(2818, 1)
MAKE_LITERAL_RATIONAL(2819, 1)
MAKE_LITERAL_RATIONAL(2820, 1)
MAKE_LITERAL_RATIONAL(2821, 1)
MAKE_LITERAL_RATIONAL(2822, 1)
MAKE_LITERAL_RATIONAL(2823, 1)
MAKE_LITERAL_RATIONAL(2824, 1)
MAKE_LITERAL_RATIONAL(2825, 1)
MAKE_LITERAL_RATIONAL(2826, 1)
MAKE_LITERAL_RATIONAL(2827, 1)
MAKE_LITERAL_RATIONAL(2828, 1)
MAKE_LITERAL_RATIONAL(2829, 1)
MAKE_LITERAL_RATIONAL(2830, 1)
MAKE_LITERAL_RATIONAL(2831, 1)
MAKE_LITERAL_RATIONAL(2832, 1)
MAKE_LITERAL_RATIONAL(2833, 1)
MAKE_LITERAL_RATIONAL(2834, 1)
MAKE_LITERAL_RATIONAL(2835, 1)
MAKE_LITERAL_RATIONAL(2836, 1)
MAKE_LITERAL_RATIONAL(2837, 1)
MAKE_LITERAL_RATIONAL(2838, 1)
MAKE_LITERAL_RATIONAL(2839, 1)
MAKE_LITERAL_RATIONAL(2840, 1)
MAKE_LITERAL_RATIONAL(2841, 1)
MAKE_LITERAL_RATIONAL(2842, 1)
MAKE_LITERAL_RATIONAL(2843, 1)
MAKE_LITERAL_RATIONAL(2844, 1)
MAKE_LITERAL_RATIONAL(2845, 1)
MAKE_LITERAL_RATIONAL(2846, 1)
MAKE_LITERAL_RATIONAL(2847, 1)
MAKE_LITERAL_RATIONAL(2848, 1)
MAKE_LITERAL_RATIONAL(2849, 1)
MAKE_LITERAL_RATIONAL(2850, 1)
MAKE_LITERAL_RATIONAL(2851, 1)
MAKE_LITERAL_RATIONAL(2852, 1)
MAKE_LITERAL_RATIONAL(2853, 1)
MAKE_LITERAL_RATIONAL(2854, 1)
MAKE_LITERAL_RATIONAL(2855, 1)
MAKE_LITERAL_RATIONAL(2856, 1)
MAKE_LITERAL_RATIONAL(2857, 1)
MAKE_LITERAL_RATIONAL(2858, 1)
MAKE_LITERAL_RATIONAL(2859, 1)
MAKE_LITERAL_RATIONAL(2860, 1)
MAKE_LITERAL_RATIONAL(2861, 1)
MAKE_LITERAL_RATIONAL(2862, 1)
MAKE_LITERAL_RATIONAL(2863, 1)
MAKE_LITERAL_RATIONAL(2864, 1)
MAKE_LITERAL_RATIONAL(2865, 1)
MAKE_LITERAL_RATIONAL(2866, 1)
MAKE_LITERAL_RATIONAL(2867, 1)
MAKE_LITERAL_RATIONAL(2868, 1)
MAKE_LITERAL_RATIONAL(2869, 1)
MAKE_LITERAL_RATIONAL(2870, 1)
MAKE_LITERAL_RATIONAL(2871, 1)
MAKE_LITERAL_RATIONAL(2872, 1)
MAKE_LITERAL_RATIONAL(2873, 1)
MAKE_LITERAL_RATIONAL(2874, 1)
MAKE_LITERAL_RATIONAL(2875, 1)
MAKE_LITERAL_RATIONAL(2876, 1)
MAKE_LITERAL_RATIONAL(2877, 1)
MAKE_LITERAL_RATIONAL(2878, 1)
MAKE_LITERAL_RATIONAL(2879, 1)
MAKE_LITERAL_RATIONAL(2880, 1)
MAKE_LITERAL_RATIONAL(2881, 1)
MAKE_LITERAL_RATIONAL(2882, 1)
MAKE_LITERAL_RATIONAL(2883, 1)
MAKE_LITERAL_RATIONAL(2884, 1)
MAKE_LITERAL_RATIONAL(2885, 1)
MAKE_LITERAL_RATIONAL(2886, 1)
MAKE_LITERAL_RATIONAL(2887, 1)
MAKE_LITERAL_RATIONAL(2888, 1)
MAKE_LITERAL_RATIONAL(2889, 1)
MAKE_LITERAL_RATIONAL(2890, 1)
MAKE_LITERAL_RATIONAL(2891, 1)
MAKE_LITERAL_RATIONAL(2892, 1)
MAKE_LITERAL_RATIONAL(2893, 1)
MAKE_LITERAL_RATIONAL(2894, 1)
MAKE_LITERAL_RATIONAL(2895, 1)
MAKE_LITERAL_RATIONAL(2896, 1)
MAKE_LITERAL_RATIONAL(2897, 1)
MAKE_LITERAL_RATIONAL(2898, 1)
MAKE_LITERAL_RATIONAL(2899, 1)
MAKE_LITERAL_RATIONAL(2900, 1)
MAKE_LITERAL_RATIONAL(2901, 1)
MAKE_LITERAL_RATIONAL(2902, 1)
MAKE_LITERAL_RATIONAL(2903, 1)
MAKE_LITERAL_RATIONAL(2904, 1)
MAKE_LITERAL_RATIONAL(2905, 1)
MAKE_LITERAL_RATIONAL(2906, 1)
MAKE_LITERAL_RATIONAL(2907, 1)
MAKE_LITERAL_RATIONAL(2908, 1)
MAKE_LITERAL_RATIONAL(2909, 1)
MAKE_LITERAL_RATIONAL(2910, 1)
MAKE_LITERAL_RATIONAL(2911, 1)
MAKE_LITERAL_RATIONAL(2912, 1)
MAKE_LITERAL_RATIONAL(2913, 1)
MAKE_LITERAL_RATIONAL(2914, 1)
MAKE_LITERAL_RATIONAL(2915, 1)
MAKE_LITERAL_RATIONAL(2916, 1)
MAKE_LITERAL_RATIONAL(2917, 1)
MAKE_LITERAL_RATIONAL(2918, 1)
MAKE_LITERAL_RATIONAL(2919, 1)
MAKE_LITERAL_RATIONAL(2920, 1)
MAKE_LITERAL_RATIONAL(2921, 1)
MAKE_LITERAL_RATIONAL(2922, 1)
MAKE_LITERAL_RATIONAL(2923, 1)
MAKE_LITERAL_RATIONAL(2924, 1)
MAKE_LITERAL_RATIONAL(2925, 1)
MAKE_LITERAL_RATIONAL(2926, 1)
MAKE_LITERAL_RATIONAL(2927, 1)
MAKE_LITERAL_RATIONAL(2928, 1)
MAKE_LITERAL_RATIONAL(2929, 1)
MAKE_LITERAL_RATIONAL(2930, 1)
MAKE_LITERAL_RATIONAL(2931, 1)
MAKE_LITERAL_RATIONAL(2932, 1)
MAKE_LITERAL_RATIONAL(2933, 1)
MAKE_LITERAL_RATIONAL(2934, 1)
MAKE_LITERAL_RATIONAL(2935, 1)
MAKE_LITERAL_RATIONAL(2936, 1)
MAKE_LITERAL_RATIONAL(2937, 1)
MAKE_LITERAL_RATIONAL(2938, 1)
MAKE_LITERAL_RATIONAL(2939, 1)
MAKE_LITERAL_RATIONAL(2940, 1)
MAKE_LITERAL_RATIONAL(2941, 1)
MAKE_LITERAL_RATIONAL(2942, 1)
MAKE_LITERAL_RATIONAL(2943, 1)
MAKE_LITERAL_RATIONAL(2944, 1)
MAKE_LITERAL_RATIONAL(2945, 1)
MAKE_LITERAL_RATIONAL(2946, 1)
MAKE_LITERAL_RATIONAL(2947, 1)
MAKE_LITERAL_RATIONAL(2948, 1)
MAKE_LITERAL_RATIONAL(2949, 1)
MAKE_LITERAL_RATIONAL(2950, 1)
MAKE_LITERAL_RATIONAL(2951, 1)
MAKE_LITERAL_RATIONAL(2952, 1)
MAKE_LITERAL_RATIONAL(2953, 1)
MAKE_LITERAL_RATIONAL(2954, 1)
MAKE_LITERAL_RATIONAL(2955, 1)
MAKE_LITERAL_RATIONAL(2956, 1)
MAKE_LITERAL_RATIONAL(2957, 1)
MAKE_LITERAL_RATIONAL(2958, 1)
MAKE_LITERAL_RATIONAL(2959, 1)
MAKE_LITERAL_RATIONAL(2960, 1)
MAKE_LITERAL_RATIONAL(2961, 1)
MAKE_LITERAL_RATIONAL(2962, 1)
MAKE_LITERAL_RATIONAL(2963, 1)
MAKE_LITERAL_RATIONAL(2964, 1)
MAKE_LITERAL_RATIONAL(2965, 1)
MAKE_LITERAL_RATIONAL(2966, 1)
MAKE_LITERAL_RATIONAL(2967, 1)
MAKE_LITERAL_RATIONAL(2968, 1)
MAKE_LITERAL_RATIONAL(2969, 1)
MAKE_LITERAL_RATIONAL(2970, 1)
MAKE_LITERAL_RATIONAL(2971, 1)
MAKE_LITERAL_RATIONAL(2972, 1)
MAKE_LITERAL_RATIONAL(2973, 1)
MAKE_LITERAL_RATIONAL(2974, 1)
MAKE_LITERAL_RATIONAL(2975, 1)
MAKE_LITERAL_RATIONAL(2976, 1)
MAKE_LITERAL_RATIONAL(2977, 1)
MAKE_LITERAL_RATIONAL(2978, 1)
MAKE_LITERAL_RATIONAL(2979, 1)
MAKE_LITERAL_RATIONAL(2980, 1)
MAKE_LITERAL_RATIONAL(2981, 1)
MAKE_LITERAL_RATIONAL(2982, 1)
MAKE_LITERAL_RATIONAL(2983, 1)
MAKE_LITERAL_RATIONAL(2984, 1)
MAKE_LITERAL_RATIONAL(2985, 1)
MAKE_LITERAL_RATIONAL(2986, 1)
MAKE_LITERAL_RATIONAL(2987, 1)
MAKE_LITERAL_RATIONAL(2988, 1)
MAKE_LITERAL_RATIONAL(2989, 1)
MAKE_LITERAL_RATIONAL(2990, 1)
MAKE_LITERAL_RATIONAL(2991, 1)
MAKE_LITERAL_RATIONAL(2992, 1)
MAKE_LITERAL_RATIONAL(2993, 1)
MAKE_LITERAL_RATIONAL(2994, 1)
MAKE_LITERAL_RATIONAL(2995, 1)
MAKE_LITERAL_RATIONAL(2996, 1)
MAKE_LITERAL_RATIONAL(2997, 1)
MAKE_LITERAL_RATIONAL(2998, 1)
MAKE_LITERAL_RATIONAL(2999, 1)
MAKE_LITERAL_RATIONAL(3000, 1)
MAKE_LITERAL_RATIONAL(3001, 1)
MAKE_LITERAL_RATIONAL(3002, 1)
MAKE_LITERAL_RATIONAL(3003, 1)
MAKE_LITERAL_RATIONAL(3004, 1)
MAKE_LITERAL_RATIONAL(3005, 1)
MAKE_LITERAL_RATIONAL(3006, 1)
MAKE_LITERAL_RATIONAL(3007, 1)
MAKE_LITERAL_RATIONAL(3008, 1)
MAKE_LITERAL_RATIONAL(3009, 1)
MAKE_LITERAL_RATIONAL(3010, 1)
MAKE_LITERAL_RATIONAL(3011, 1)
MAKE_LITERAL_RATIONAL(3012, 1)
MAKE_LITERAL_RATIONAL(3013, 1)
MAKE_LITERAL_RATIONAL(3014, 1)
MAKE_LITERAL_RATIONAL(3015, 1)
MAKE_LITERAL_RATIONAL(3016, 1)
MAKE_LITERAL_RATIONAL(3017, 1)
MAKE_LITERAL_RATIONAL(3018, 1)
MAKE_LITERAL_RATIONAL(3019, 1)
MAKE_LITERAL_RATIONAL(3020, 1)
MAKE_LITERAL_RATIONAL(3021, 1)
MAKE_LITERAL_RATIONAL(3022, 1)
MAKE_LITERAL_RATIONAL(3023, 1)
MAKE_LITERAL_RATIONAL(3024, 1)
MAKE_LITERAL_RATIONAL(3025, 1)
MAKE_LITERAL_RATIONAL(3026, 1)
MAKE_LITERAL_RATIONAL(3027, 1)
MAKE_LITERAL_RATIONAL(3028, 1)
MAKE_LITERAL_RATIONAL(3029, 1)
MAKE_LITERAL_RATIONAL(3030, 1)
MAKE_LITERAL_RATIONAL(3031, 1)
MAKE_LITERAL_RATIONAL(3032, 1)
MAKE_LITERAL_RATIONAL(3033, 1)
MAKE_LITERAL_RATIONAL(3034, 1)
MAKE_LITERAL_RATIONAL(3035, 1)
MAKE_LITERAL_RATIONAL(3036, 1)
MAKE_LITERAL_RATIONAL(3037, 1)
MAKE_LITERAL_RATIONAL(3038, 1)
MAKE_LITERAL_RATIONAL(3039, 1)
MAKE_LITERAL_RATIONAL(3040, 1)
MAKE_LITERAL_RATIONAL(3041, 1)
MAKE_LITERAL_RATIONAL(3042, 1)
MAKE_LITERAL_RATIONAL(3043, 1)
MAKE_LITERAL_RATIONAL(3044, 1)
MAKE_LITERAL_RATIONAL(3045, 1)
MAKE_LITERAL_RATIONAL(3046, 1)
MAKE_LITERAL_RATIONAL(3047, 1)
MAKE_LITERAL_RATIONAL(3048, 1)
MAKE_LITERAL_RATIONAL(3049, 1)
MAKE_LITERAL_RATIONAL(3050, 1)
MAKE_LITERAL_RATIONAL(3051, 1)
MAKE_LITERAL_RATIONAL(3052, 1)
MAKE_LITERAL_RATIONAL(3053, 1)
MAKE_LITERAL_RATIONAL(3054, 1)
MAKE_LITERAL_RATIONAL(3055, 1)
MAKE_LITERAL_RATIONAL(3056, 1)
MAKE_LITERAL_RATIONAL(3057, 1)
MAKE_LITERAL_RATIONAL(3058, 1)
MAKE_LITERAL_RATIONAL(3059, 1)
MAKE_LITERAL_RATIONAL(3060, 1)
MAKE_LITERAL_RATIONAL(3061, 1)
MAKE_LITERAL_RATIONAL(3062, 1)
MAKE_LITERAL_RATIONAL(3063, 1)
MAKE_LITERAL_RATIONAL(3064, 1)
MAKE_LITERAL_RATIONAL(3065, 1)
MAKE_LITERAL_RATIONAL(3066, 1)
MAKE_LITERAL_RATIONAL(3067, 1)
MAKE_LITERAL_RATIONAL(3068, 1)
MAKE_LITERAL_RATIONAL(3069, 1)
MAKE_LITERAL_RATIONAL(3070, 1)
MAKE_LITERAL_RATIONAL(3071, 1)
MAKE_LITERAL_RATIONAL(3072, 1)
MAKE_LITERAL_RATIONAL(3073, 1)
MAKE_LITERAL_RATIONAL(3074, 1)
MAKE_LITERAL_RATIONAL(3075, 1)
MAKE_LITERAL_RATIONAL(3076, 1)
MAKE_LITERAL_RATIONAL(3077, 1)
MAKE_LITERAL_RATIONAL(3078, 1)
MAKE_LITERAL_RATIONAL(3079, 1)
MAKE_LITERAL_RATIONAL(3080, 1)
MAKE_LITERAL_RATIONAL(3081, 1)
MAKE_LITERAL_RATIONAL(3082, 1)
MAKE_LITERAL_RATIONAL(3083, 1)
MAKE_LITERAL_RATIONAL(3084, 1)
MAKE_LITERAL_RATIONAL(3085, 1)
MAKE_LITERAL_RATIONAL(3086, 1)
MAKE_LITERAL_RATIONAL(3087, 1)
MAKE_LITERAL_RATIONAL(3088, 1)
MAKE_LITERAL_RATIONAL(3089, 1)
MAKE_LITERAL_RATIONAL(3090, 1)
MAKE_LITERAL_RATIONAL(3091, 1)
MAKE_LITERAL_RATIONAL(3092, 1)
MAKE_LITERAL_RATIONAL(3093, 1)
MAKE_LITERAL_RATIONAL(3094, 1)
MAKE_LITERAL_RATIONAL(3095, 1)
MAKE_LITERAL_RATIONAL(3096, 1)
MAKE_LITERAL_RATIONAL(3097, 1)
MAKE_LITERAL_RATIONAL(3098, 1)
MAKE_LITERAL_RATIONAL(3099, 1)
MAKE_LITERAL_RATIONAL(3100, 1)
MAKE_LITERAL_RATIONAL(3101, 1)
MAKE_LITERAL_RATIONAL(3102, 1)
MAKE_LITERAL_RATIONAL(3103, 1)
MAKE_LITERAL_RATIONAL(3104, 1)
MAKE_LITERAL_RATIONAL(3105, 1)
MAKE_LITERAL_RATIONAL(3106, 1)
MAKE_LITERAL_RATIONAL(3107, 1)
MAKE_LITERAL_RATIONAL(3108, 1)
MAKE_LITERAL_RATIONAL(3109, 1)
MAKE_LITERAL_RATIONAL(3110, 1)
MAKE_LITERAL_RATIONAL(3111, 1)
MAKE_LITERAL_RATIONAL(3112, 1)
MAKE_LITERAL_RATIONAL(3113, 1)
MAKE_LITERAL_RATIONAL(3114, 1)
MAKE_LITERAL_RATIONAL(3115, 1)
MAKE_LITERAL_RATIONAL(3116, 1)
MAKE_LITERAL_RATIONAL(3117, 1)
MAKE_LITERAL_RATIONAL(3118, 1)
MAKE_LITERAL_RATIONAL(3119, 1)
MAKE_LITERAL_RATIONAL(3120, 1)
MAKE_LITERAL_RATIONAL(3121, 1)
MAKE_LITERAL_RATIONAL(3122, 1)
MAKE_LITERAL_RATIONAL(3123, 1)
MAKE_LITERAL_RATIONAL(3124, 1)
MAKE_LITERAL_RATIONAL(3125, 1)
MAKE_LITERAL_RATIONAL(3126, 1)
MAKE_LITERAL_RATIONAL(3127, 1)
MAKE_LITERAL_RATIONAL(3128, 1)
MAKE_LITERAL_RATIONAL(3129, 1)
MAKE_LITERAL_RATIONAL(3130, 1)
MAKE_LITERAL_RATIONAL(3131, 1)
MAKE_LITERAL_RATIONAL(3132, 1)
MAKE_LITERAL_RATIONAL(3133, 1)
MAKE_LITERAL_RATIONAL(3134, 1)
MAKE_LITERAL_RATIONAL(3135, 1)
MAKE_LITERAL_RATIONAL(3136, 1)
MAKE_LITERAL_RATIONAL(3137, 1)
MAKE_LITERAL_RATIONAL(3138, 1)
MAKE_LITERAL_RATIONAL(3139, 1)
MAKE_LITERAL_RATIONAL(3140, 1)
MAKE_LITERAL_RATIONAL(3141, 1)
MAKE_LITERAL_RATIONAL(3142, 1)
MAKE_LITERAL_RATIONAL(3143, 1)
MAKE_LITERAL_RATIONAL(3144, 1)
MAKE_LITERAL_RATIONAL(3145, 1)
MAKE_LITERAL_RATIONAL(3146, 1)
MAKE_LITERAL_RATIONAL(3147, 1)
MAKE_LITERAL_RATIONAL(3148, 1)
MAKE_LITERAL_RATIONAL(3149, 1)
MAKE_LITERAL_RATIONAL(3150, 1)
MAKE_LITERAL_RATIONAL(3151, 1)
MAKE_LITERAL_RATIONAL(3152, 1)
MAKE_LITERAL_RATIONAL(3153, 1)
MAKE_LITERAL_RATIONAL(3154, 1)
MAKE_LITERAL_RATIONAL(3155, 1)
MAKE_LITERAL_RATIONAL(3156, 1)
MAKE_LITERAL_RATIONAL(3157, 1)
MAKE_LITERAL_RATIONAL(3158, 1)
MAKE_LITERAL_RATIONAL(3159, 1)
MAKE_LITERAL_RATIONAL(3160, 1)
MAKE_LITERAL_RATIONAL(3161, 1)
MAKE_LITERAL_RATIONAL(3162, 1)
MAKE_LITERAL_RATIONAL(3163, 1)
MAKE_LITERAL_RATIONAL(3164, 1)
MAKE_LITERAL_RATIONAL(3165, 1)
MAKE_LITERAL_RATIONAL(3166, 1)
MAKE_LITERAL_RATIONAL(3167, 1)
MAKE_LITERAL_RATIONAL(3168, 1)
MAKE_LITERAL_RATIONAL(3169, 1)
MAKE_LITERAL_RATIONAL(3170, 1)
MAKE_LITERAL_RATIONAL(3171, 1)
MAKE_LITERAL_RATIONAL(3172, 1)
MAKE_LITERAL_RATIONAL(3173, 1)
MAKE_LITERAL_RATIONAL(3174, 1)
MAKE_LITERAL_RATIONAL(3175, 1)
MAKE_LITERAL_RATIONAL(3176, 1)
MAKE_LITERAL_RATIONAL(3177, 1)
MAKE_LITERAL_RATIONAL(3178, 1)
MAKE_LITERAL_RATIONAL(3179, 1)
MAKE_LITERAL_RATIONAL(3180, 1)
MAKE_LITERAL_RATIONAL(3181, 1)
MAKE_LITERAL_RATIONAL(3182, 1)
MAKE_LITERAL_RATIONAL(3183, 1)
MAKE_LITERAL_RATIONAL(3184, 1)
MAKE_LITERAL_RATIONAL(3185, 1)
MAKE_LITERAL_RATIONAL(3186, 1)
MAKE_LITERAL_RATIONAL(3187, 1)
MAKE_LITERAL_RATIONAL(3188, 1)
MAKE_LITERAL_RATIONAL(3189, 1)
MAKE_LITERAL_RATIONAL(3190, 1)
MAKE_LITERAL_RATIONAL(3191, 1)
MAKE_LITERAL_RATIONAL(3192, 1)
MAKE_LITERAL_RATIONAL(3193, 1)
MAKE_LITERAL_RATIONAL(3194, 1)
MAKE_LITERAL_RATIONAL(3195, 1)
MAKE_LITERAL_RATIONAL(3196, 1)
MAKE_LITERAL_RATIONAL(3197, 1)
MAKE_LITERAL_RATIONAL(3198, 1)
MAKE_LITERAL_RATIONAL(3199, 1)
MAKE_LITERAL_RATIONAL(3200, 1)
MAKE_LITERAL_RATIONAL(3201, 1)
MAKE_LITERAL_RATIONAL(3202, 1)
MAKE_LITERAL_RATIONAL(3203, 1)
MAKE_LITERAL_RATIONAL(3204, 1)
MAKE_LITERAL_RATIONAL(3205, 1)
MAKE_LITERAL_RATIONAL(3206, 1)
MAKE_LITERAL_RATIONAL(3207, 1)
MAKE_LITERAL_RATIONAL(3208, 1)
MAKE_LITERAL_RATIONAL(3209, 1)
MAKE_LITERAL_RATIONAL(3210, 1)
MAKE_LITERAL_RATIONAL(3211, 1)
MAKE_LITERAL_RATIONAL(3212, 1)
MAKE_LITERAL_RATIONAL(3213, 1)
MAKE_LITERAL_RATIONAL(3214, 1)
MAKE_LITERAL_RATIONAL(3215, 1)
MAKE_LITERAL_RATIONAL(3216, 1)
MAKE_LITERAL_RATIONAL(3217, 1)
MAKE_LITERAL_RATIONAL(3218, 1)
MAKE_LITERAL_RATIONAL(3219, 1)
MAKE_LITERAL_RATIONAL(3220, 1)
MAKE_LITERAL_RATIONAL(3221, 1)
MAKE_LITERAL_RATIONAL(3222, 1)
MAKE_LITERAL_RATIONAL(3223, 1)
MAKE_LITERAL_RATIONAL(3224, 1)
MAKE_LITERAL_RATIONAL(3225, 1)
MAKE_LITERAL_RATIONAL(3226, 1)
MAKE_LITERAL_RATIONAL(3227, 1)
MAKE_LITERAL_RATIONAL(3228, 1)
MAKE_LITERAL_RATIONAL(3229, 1)
MAKE_LITERAL_RATIONAL(3230, 1)
MAKE_LITERAL_RATIONAL(3231, 1)
MAKE_LITERAL_RATIONAL(3232, 1)
MAKE_LITERAL_RATIONAL(3233, 1)
MAKE_LITERAL_RATIONAL(3234, 1)
MAKE_LITERAL_RATIONAL(3235, 1)
MAKE_LITERAL_RATIONAL(3236, 1)
MAKE_LITERAL_RATIONAL(3237, 1)
MAKE_LITERAL_RATIONAL(3238, 1)
MAKE_LITERAL_RATIONAL(3239, 1)
MAKE_LITERAL_RATIONAL(3240, 1)
MAKE_LITERAL_RATIONAL(3241, 1)
MAKE_LITERAL_RATIONAL(3242, 1)
MAKE_LITERAL_RATIONAL(3243, 1)
MAKE_LITERAL_RATIONAL(3244, 1)
MAKE_LITERAL_RATIONAL(3245, 1)
MAKE_LITERAL_RATIONAL(3246, 1)
MAKE_LITERAL_RATIONAL(3247, 1)
MAKE_LITERAL_RATIONAL(3248, 1)
MAKE_LITERAL_RATIONAL(3249, 1)
MAKE_LITERAL_RATIONAL(3250, 1)
MAKE_LITERAL_RATIONAL(3251, 1)
MAKE_LITERAL_RATIONAL(3252, 1)
MAKE_LITERAL_RATIONAL(3253, 1)
MAKE_LITERAL_RATIONAL(3254, 1)
MAKE_LITERAL_RATIONAL(3255, 1)
MAKE_LITERAL_RATIONAL(3256, 1)
MAKE_LITERAL_RATIONAL(3257, 1)
MAKE_LITERAL_RATIONAL(3258, 1)
MAKE_LITERAL_RATIONAL(3259, 1)
MAKE_LITERAL_RATIONAL(3260, 1)
MAKE_LITERAL_RATIONAL(3261, 1)
MAKE_LITERAL_RATIONAL(3262, 1)
MAKE_LITERAL_RATIONAL(3263, 1)
MAKE_LITERAL_RATIONAL(3264, 1)
MAKE_LITERAL_RATIONAL(3265, 1)
MAKE_LITERAL_RATIONAL(3266, 1)
MAKE_LITERAL_RATIONAL(3267, 1)
MAKE_LITERAL_RATIONAL(3268, 1)
MAKE_LITERAL_RATIONAL(3269, 1)
MAKE_LITERAL_RATIONAL(3270, 1)
MAKE_LITERAL_RATIONAL(3271, 1)
MAKE_LITERAL_RATIONAL(3272, 1)
MAKE_LITERAL_RATIONAL(3273, 1)
MAKE_LITERAL_RATIONAL(3274, 1)
MAKE_LITERAL_RATIONAL(3275, 1)
MAKE_LITERAL_RATIONAL(3276, 1)
MAKE_LITERAL_RATIONAL(3277, 1)
MAKE_LITERAL_RATIONAL(3278, 1)
MAKE_LITERAL_RATIONAL(3279, 1)
MAKE_LITERAL_RATIONAL(3280, 1)
MAKE_LITERAL_RATIONAL(3281, 1)
MAKE_LITERAL_RATIONAL(3282, 1)
MAKE_LITERAL_RATIONAL(3283, 1)
MAKE_LITERAL_RATIONAL(3284, 1)
MAKE_LITERAL_RATIONAL(3285, 1)
MAKE_LITERAL_RATIONAL(3286, 1)
MAKE_LITERAL_RATIONAL(3287, 1)
MAKE_LITERAL_RATIONAL(3288, 1)
MAKE_LITERAL_RATIONAL(3289, 1)
MAKE_LITERAL_RATIONAL(3290, 1)
MAKE_LITERAL_RATIONAL(3291, 1)
MAKE_LITERAL_RATIONAL(3292, 1)
MAKE_LITERAL_RATIONAL(3293, 1)
MAKE_LITERAL_RATIONAL(3294, 1)
MAKE_LITERAL_RATIONAL(3295, 1)
MAKE_LITERAL_RATIONAL(3296, 1)
MAKE_LITERAL_RATIONAL(3297, 1)
MAKE_LITERAL_RATIONAL(3298, 1)
MAKE_LITERAL_RATIONAL(3299, 1)
MAKE_LITERAL_RATIONAL(3300, 1)
MAKE_LITERAL_RATIONAL(3301, 1)
MAKE_LITERAL_RATIONAL(3302, 1)
MAKE_LITERAL_RATIONAL(3303, 1)
MAKE_LITERAL_RATIONAL(3304, 1)
MAKE_LITERAL_RATIONAL(3305, 1)
MAKE_LITERAL_RATIONAL(3306, 1)
MAKE_LITERAL_RATIONAL(3307, 1)
MAKE_LITERAL_RATIONAL(3308, 1)
MAKE_LITERAL_RATIONAL(3309, 1)
MAKE_LITERAL_RATIONAL(3310, 1)
MAKE_LITERAL_RATIONAL(3311, 1)
MAKE_LITERAL_RATIONAL(3312, 1)
MAKE_LITERAL_RATIONAL(3313, 1)
MAKE_LITERAL_RATIONAL(3314, 1)
MAKE_LITERAL_RATIONAL(3315, 1)
MAKE_LITERAL_RATIONAL(3316, 1)
MAKE_LITERAL_RATIONAL(3317, 1)
MAKE_LITERAL_RATIONAL(3318, 1)
MAKE_LITERAL_RATIONAL(3319, 1)
MAKE_LITERAL_RATIONAL(3320, 1)
MAKE_LITERAL_RATIONAL(3321, 1)
MAKE_LITERAL_RATIONAL(3322, 1)
MAKE_LITERAL_RATIONAL(3323, 1)
MAKE_LITERAL_RATIONAL(3324, 1)
MAKE_LITERAL_RATIONAL(3325, 1)
MAKE_LITERAL_RATIONAL(3326, 1)
MAKE_LITERAL_RATIONAL(3327, 1)
MAKE_LITERAL_RATIONAL(3328, 1)
MAKE_LITERAL_RATIONAL(3329, 1)
MAKE_LITERAL_RATIONAL(3330, 1)
MAKE_LITERAL_RATIONAL(3331, 1)
MAKE_LITERAL_RATIONAL(3332, 1)
MAKE_LITERAL_RATIONAL(3333, 1)
MAKE_LITERAL_RATIONAL(3334, 1)
MAKE_LITERAL_RATIONAL(3335, 1)
MAKE_LITERAL_RATIONAL(3336, 1)
MAKE_LITERAL_RATIONAL(3337, 1)
MAKE_LITERAL_RATIONAL(3338, 1)
MAKE_LITERAL_RATIONAL(3339, 1)
MAKE_LITERAL_RATIONAL(3340, 1)
MAKE_LITERAL_RATIONAL(3341, 1)
MAKE_LITERAL_RATIONAL(3342, 1)
MAKE_LITERAL_RATIONAL(3343, 1)
MAKE_LITERAL_RATIONAL(3344, 1)
MAKE_LITERAL_RATIONAL(3345, 1)
MAKE_LITERAL_RATIONAL(3346, 1)
MAKE_LITERAL_RATIONAL(3347, 1)
MAKE_LITERAL_RATIONAL(3348, 1)
MAKE_LITERAL_RATIONAL(3349, 1)
MAKE_LITERAL_RATIONAL(3350, 1)
MAKE_LITERAL_RATIONAL(3351, 1)
MAKE_LITERAL_RATIONAL(3352, 1)
MAKE_LITERAL_RATIONAL(3353, 1)
MAKE_LITERAL_RATIONAL(3354, 1)
MAKE_LITERAL_RATIONAL(3355, 1)
MAKE_LITERAL_RATIONAL(3356, 1)
MAKE_LITERAL_RATIONAL(3357, 1)
MAKE_LITERAL_RATIONAL(3358, 1)
MAKE_LITERAL_RATIONAL(3359, 1)
MAKE_LITERAL_RATIONAL(3360, 1)
MAKE_LITERAL_RATIONAL(3361, 1)
MAKE_LITERAL_RATIONAL(3362, 1)
MAKE_LITERAL_RATIONAL(3363, 1)
MAKE_LITERAL_RATIONAL(3364, 1)
MAKE_LITERAL_RATIONAL(3365, 1)
MAKE_LITERAL_RATIONAL(3366, 1)
MAKE_LITERAL_RATIONAL(3367, 1)
MAKE_LITERAL_RATIONAL(3368, 1)
MAKE_LITERAL_RATIONAL(3369, 1)
MAKE_LITERAL_RATIONAL(3370, 1)
MAKE_LITERAL_RATIONAL(3371, 1)
MAKE_LITERAL_RATIONAL(3372, 1)
MAKE_LITERAL_RATIONAL(3373, 1)
MAKE_LITERAL_RATIONAL(3374, 1)
MAKE_LITERAL_RATIONAL(3375, 1)
MAKE_LITERAL_RATIONAL(3376, 1)
MAKE_LITERAL_RATIONAL(3377, 1)
MAKE_LITERAL_RATIONAL(3378, 1)
MAKE_LITERAL_RATIONAL(3379, 1)
MAKE_LITERAL_RATIONAL(3380, 1)
MAKE_LITERAL_RATIONAL(3381, 1)
MAKE_LITERAL_RATIONAL(3382, 1)
MAKE_LITERAL_RATIONAL(3383, 1)
MAKE_LITERAL_RATIONAL(3384, 1)
MAKE_LITERAL_RATIONAL(3385, 1)
MAKE_LITERAL_RATIONAL(3386, 1)
MAKE_LITERAL_RATIONAL(3387, 1)
MAKE_LITERAL_RATIONAL(3388, 1)
MAKE_LITERAL_RATIONAL(3389, 1)
MAKE_LITERAL_RATIONAL(3390, 1)
MAKE_LITERAL_RATIONAL(3391, 1)
MAKE_LITERAL_RATIONAL(3392, 1)
MAKE_LITERAL_RATIONAL(3393, 1)
MAKE_LITERAL_RATIONAL(3394, 1)
MAKE_LITERAL_RATIONAL(3395, 1)
MAKE_LITERAL_RATIONAL(3396, 1)
MAKE_LITERAL_RATIONAL(3397, 1)
MAKE_LITERAL_RATIONAL(3398, 1)
MAKE_LITERAL_RATIONAL(3399, 1)
MAKE_LITERAL_RATIONAL(3400, 1)
MAKE_LITERAL_RATIONAL(3401, 1)
MAKE_LITERAL_RATIONAL(3402, 1)
MAKE_LITERAL_RATIONAL(3403, 1)
MAKE_LITERAL_RATIONAL(3404, 1)
MAKE_LITERAL_RATIONAL(3405, 1)
MAKE_LITERAL_RATIONAL(3406, 1)
MAKE_LITERAL_RATIONAL(3407, 1)
MAKE_LITERAL_RATIONAL(3408, 1)
MAKE_LITERAL_RATIONAL(3409, 1)
MAKE_LITERAL_RATIONAL(3410, 1)
MAKE_LITERAL_RATIONAL(3411, 1)
MAKE_LITERAL_RATIONAL(3412, 1)
MAKE_LITERAL_RATIONAL(3413, 1)
MAKE_LITERAL_RATIONAL(3414, 1)
MAKE_LITERAL_RATIONAL(3415, 1)
MAKE_LITERAL_RATIONAL(3416, 1)
MAKE_LITERAL_RATIONAL(3417, 1)
MAKE_LITERAL_RATIONAL(3418, 1)
MAKE_LITERAL_RATIONAL(3419, 1)
MAKE_LITERAL_RATIONAL(3420, 1)
MAKE_LITERAL_RATIONAL(3421, 1)
MAKE_LITERAL_RATIONAL(3422, 1)
MAKE_LITERAL_RATIONAL(3423, 1)
MAKE_LITERAL_RATIONAL(3424, 1)
MAKE_LITERAL_RATIONAL(3425, 1)
MAKE_LITERAL_RATIONAL(3426, 1)
MAKE_LITERAL_RATIONAL(3427, 1)
MAKE_LITERAL_RATIONAL(3428, 1)
MAKE_LITERAL_RATIONAL(3429, 1)
MAKE_LITERAL_RATIONAL(3430, 1)
MAKE_LITERAL_RATIONAL(3431, 1)
MAKE_LITERAL_RATIONAL(3432, 1)
MAKE_LITERAL_RATIONAL(3433, 1)
MAKE_LITERAL_RATIONAL(3434, 1)
MAKE_LITERAL_RATIONAL(3435, 1)
MAKE_LITERAL_RATIONAL(3436, 1)
MAKE_LITERAL_RATIONAL(3437, 1)
MAKE_LITERAL_RATIONAL(3438, 1)
MAKE_LITERAL_RATIONAL(3439, 1)
MAKE_LITERAL_RATIONAL(3440, 1)
MAKE_LITERAL_RATIONAL(3441, 1)
MAKE_LITERAL_RATIONAL(3442, 1)
MAKE_LITERAL_RATIONAL(3443, 1)
MAKE_LITERAL_RATIONAL(3444, 1)
MAKE_LITERAL_RATIONAL(3445, 1)
MAKE_LITERAL_RATIONAL(3446, 1)
MAKE_LITERAL_RATIONAL(3447, 1)
MAKE_LITERAL_RATIONAL(3448, 1)
MAKE_LITERAL_RATIONAL(3449, 1)
MAKE_LITERAL_RATIONAL(3450, 1)
MAKE_LITERAL_RATIONAL(3451, 1)
MAKE_LITERAL_RATIONAL(3452, 1)
MAKE_LITERAL_RATIONAL(3453, 1)
MAKE_LITERAL_RATIONAL(3454, 1)
MAKE_LITERAL_RATIONAL(3455, 1)
MAKE_LITERAL_RATIONAL(3456, 1)
MAKE_LITERAL_RATIONAL(3457, 1)
MAKE_LITERAL_RATIONAL(3458, 1)
MAKE_LITERAL_RATIONAL(3459, 1)
MAKE_LITERAL_RATIONAL(3460, 1)
MAKE_LITERAL_RATIONAL(3461, 1)
MAKE_LITERAL_RATIONAL(3462, 1)
MAKE_LITERAL_RATIONAL(3463, 1)
MAKE_LITERAL_RATIONAL(3464, 1)
MAKE_LITERAL_RATIONAL(3465, 1)
MAKE_LITERAL_RATIONAL(3466, 1)
MAKE_LITERAL_RATIONAL(3467, 1)
MAKE_LITERAL_RATIONAL(3468, 1)
MAKE_LITERAL_RATIONAL(3469, 1)
MAKE_LITERAL_RATIONAL(3470, 1)
MAKE_LITERAL_RATIONAL(3471, 1)
MAKE_LITERAL_RATIONAL(3472, 1)
MAKE_LITERAL_RATIONAL(3473, 1)
MAKE_LITERAL_RATIONAL(3474, 1)
MAKE_LITERAL_RATIONAL(3475, 1)
MAKE_LITERAL_RATIONAL(3476, 1)
MAKE_LITERAL_RATIONAL(3477, 1)
MAKE_LITERAL_RATIONAL(3478, 1)
MAKE_LITERAL_RATIONAL(3479, 1)
MAKE_LITERAL_RATIONAL(3480, 1)
MAKE_LITERAL_RATIONAL(3481, 1)
MAKE_LITERAL_RATIONAL(3482, 1)
MAKE_LITERAL_RATIONAL(3483, 1)
MAKE_LITERAL_RATIONAL(3484, 1)
MAKE_LITERAL_RATIONAL(3485, 1)
MAKE_LITERAL_RATIONAL(3486, 1)
MAKE_LITERAL_RATIONAL(3487, 1)
MAKE_LITERAL_RATIONAL(3488, 1)
MAKE_LITERAL_RATIONAL(3489, 1)
MAKE_LITERAL_RATIONAL(3490, 1)
MAKE_LITERAL_RATIONAL(3491, 1)
MAKE_LITERAL_RATIONAL(3492, 1)
MAKE_LITERAL_RATIONAL(3493, 1)
MAKE_LITERAL_RATIONAL(3494, 1)
MAKE_LITERAL_RATIONAL(3495, 1)
MAKE_LITERAL_RATIONAL(3496, 1)
MAKE_LITERAL_RATIONAL(3497, 1)
MAKE_LITERAL_RATIONAL(3498, 1)
MAKE_LITERAL_RATIONAL(3499, 1)
MAKE_LITERAL_RATIONAL(3500, 1)
MAKE_LITERAL_RATIONAL(3501, 1)
MAKE_LITERAL_RATIONAL(3502, 1)
MAKE_LITERAL_RATIONAL(3503, 1)
MAKE_LITERAL_RATIONAL(3504, 1)
MAKE_LITERAL_RATIONAL(3505, 1)
MAKE_LITERAL_RATIONAL(3506, 1)
MAKE_LITERAL_RATIONAL(3507, 1)
MAKE_LITERAL_RATIONAL(3508, 1)
MAKE_LITERAL_RATIONAL(3509, 1)
MAKE_LITERAL_RATIONAL(3510, 1)
MAKE_LITERAL_RATIONAL(3511, 1)
MAKE_LITERAL_RATIONAL(3512, 1)
MAKE_LITERAL_RATIONAL(3513, 1)
MAKE_LITERAL_RATIONAL(3514, 1)
MAKE_LITERAL_RATIONAL(3515, 1)
MAKE_LITERAL_RATIONAL(3516, 1)
MAKE_LITERAL_RATIONAL(3517, 1)
MAKE_LITERAL_RATIONAL(3518, 1)
MAKE_LITERAL_RATIONAL(3519, 1)
MAKE_LITERAL_RATIONAL(3520, 1)
MAKE_LITERAL_RATIONAL(3521, 1)
MAKE_LITERAL_RATIONAL(3522, 1)
MAKE_LITERAL_RATIONAL(3523, 1)
MAKE_LITERAL_RATIONAL(3524, 1)
MAKE_LITERAL_RATIONAL(3525, 1)
MAKE_LITERAL_RATIONAL(3526, 1)
MAKE_LITERAL_RATIONAL(3527, 1)
MAKE_LITERAL_RATIONAL(3528, 1)
MAKE_LITERAL_RATIONAL(3529, 1)
MAKE_LITERAL_RATIONAL(3530, 1)
MAKE_LITERAL_RATIONAL(3531, 1)
MAKE_LITERAL_RATIONAL(3532, 1)
MAKE_LITERAL_RATIONAL(3533, 1)
MAKE_LITERAL_RATIONAL(3534, 1)
MAKE_LITERAL_RATIONAL(3535, 1)
MAKE_LITERAL_RATIONAL(3536, 1)
MAKE_LITERAL_RATIONAL(3537, 1)
MAKE_LITERAL_RATIONAL(3538, 1)
MAKE_LITERAL_RATIONAL(3539, 1)
MAKE_LITERAL_RATIONAL(3540, 1)
MAKE_LITERAL_RATIONAL(3541, 1)
MAKE_LITERAL_RATIONAL(3542, 1)
MAKE_LITERAL_RATIONAL(3543, 1)
MAKE_LITERAL_RATIONAL(3544, 1)
MAKE_LITERAL_RATIONAL(3545, 1)
MAKE_LITERAL_RATIONAL(3546, 1)
MAKE_LITERAL_RATIONAL(3547, 1)
MAKE_LITERAL_RATIONAL(3548, 1)
MAKE_LITERAL_RATIONAL(3549, 1)
MAKE_LITERAL_RATIONAL(3550, 1)
MAKE_LITERAL_RATIONAL(3551, 1)
MAKE_LITERAL_RATIONAL(3552, 1)
MAKE_LITERAL_RATIONAL(3553, 1)
MAKE_LITERAL_RATIONAL(3554, 1)
MAKE_LITERAL_RATIONAL(3555, 1)
MAKE_LITERAL_RATIONAL(3556, 1)
MAKE_LITERAL_RATIONAL(3557, 1)
MAKE_LITERAL_RATIONAL(3558, 1)
MAKE_LITERAL_RATIONAL(3559, 1)
MAKE_LITERAL_RATIONAL(3560, 1)
MAKE_LITERAL_RATIONAL(3561, 1)
MAKE_LITERAL_RATIONAL(3562, 1)
MAKE_LITERAL_RATIONAL(3563, 1)
MAKE_LITERAL_RATIONAL(3564, 1)
MAKE_LITERAL_RATIONAL(3565, 1)
MAKE_LITERAL_RATIONAL(3566, 1)
MAKE_LITERAL_RATIONAL(3567, 1)
MAKE_LITERAL_RATIONAL(3568, 1)
MAKE_LITERAL_RATIONAL(3569, 1)
MAKE_LITERAL_RATIONAL(3570, 1)
MAKE_LITERAL_RATIONAL(3571, 1)
MAKE_LITERAL_RATIONAL(3572, 1)
MAKE_LITERAL_RATIONAL(3573, 1)
MAKE_LITERAL_RATIONAL(3574, 1)
MAKE_LITERAL_RATIONAL(3575, 1)
MAKE_LITERAL_RATIONAL(3576, 1)
MAKE_LITERAL_RATIONAL(3577, 1)
MAKE_LITERAL_RATIONAL(3578, 1)
MAKE_LITERAL_RATIONAL(3579, 1)
MAKE_LITERAL_RATIONAL(3580, 1)
MAKE_LITERAL_RATIONAL(3581, 1)
MAKE_LITERAL_RATIONAL(3582, 1)
MAKE_LITERAL_RATIONAL(3583, 1)
MAKE_LITERAL_RATIONAL(3584, 1)
MAKE_LITERAL_RATIONAL(3585, 1)
MAKE_LITERAL_RATIONAL(3586, 1)
MAKE_LITERAL_RATIONAL(3587, 1)
MAKE_LITERAL_RATIONAL(3588, 1)
MAKE_LITERAL_RATIONAL(3589, 1)
MAKE_LITERAL_RATIONAL(3590, 1)
MAKE_LITERAL_RATIONAL(3591, 1)
MAKE_LITERAL_RATIONAL(3592, 1)
MAKE_LITERAL_RATIONAL(3593, 1)
MAKE_LITERAL_RATIONAL(3594, 1)
MAKE_LITERAL_RATIONAL(3595, 1)
MAKE_LITERAL_RATIONAL(3596, 1)
MAKE_LITERAL_RATIONAL(3597, 1)
MAKE_LITERAL_RATIONAL(3598, 1)
MAKE_LITERAL_RATIONAL(3599, 1)
MAKE_LITERAL_RATIONAL(3600, 1)
MAKE_LITERAL_RATIONAL(3601, 1)
MAKE_LITERAL_RATIONAL(3602, 1)
MAKE_LITERAL_RATIONAL(3603, 1)
MAKE_LITERAL_RATIONAL(3604, 1)
MAKE_LITERAL_RATIONAL(3605, 1)
MAKE_LITERAL_RATIONAL(3606, 1)
MAKE_LITERAL_RATIONAL(3607, 1)
MAKE_LITERAL_RATIONAL(3608, 1)
MAKE_LITERAL_RATIONAL(3609, 1)
MAKE_LITERAL_RATIONAL(3610, 1)
MAKE_LITERAL_RATIONAL(3611, 1)
MAKE_LITERAL_RATIONAL(3612, 1)
MAKE_LITERAL_RATIONAL(3613, 1)
MAKE_LITERAL_RATIONAL(3614, 1)
MAKE_LITERAL_RATIONAL(3615, 1)
MAKE_LITERAL_RATIONAL(3616, 1)
MAKE_LITERAL_RATIONAL(3617, 1)
MAKE_LITERAL_RATIONAL(3618, 1)
MAKE_LITERAL_RATIONAL(3619, 1)
MAKE_LITERAL_RATIONAL(3620, 1)
MAKE_LITERAL_RATIONAL(3621, 1)
MAKE_LITERAL_RATIONAL(3622, 1)
MAKE_LITERAL_RATIONAL(3623, 1)
MAKE_LITERAL_RATIONAL(3624, 1)
MAKE_LITERAL_RATIONAL(3625, 1)
MAKE_LITERAL_RATIONAL(3626, 1)
MAKE_LITERAL_RATIONAL(3627, 1)
MAKE_LITERAL_RATIONAL(3628, 1)
MAKE_LITERAL_RATIONAL(3629, 1)
MAKE_LITERAL_RATIONAL(3630, 1)
MAKE_LITERAL_RATIONAL(3631, 1)
MAKE_LITERAL_RATIONAL(3632, 1)
MAKE_LITERAL_RATIONAL(3633, 1)
MAKE_LITERAL_RATIONAL(3634, 1)
MAKE_LITERAL_RATIONAL(3635, 1)
MAKE_LITERAL_RATIONAL(3636, 1)
MAKE_LITERAL_RATIONAL(3637, 1)
MAKE_LITERAL_RATIONAL(3638, 1)
MAKE_LITERAL_RATIONAL(3639, 1)
MAKE_LITERAL_RATIONAL(3640, 1)
MAKE_LITERAL_RATIONAL(3641, 1)
MAKE_LITERAL_RATIONAL(3642, 1)
MAKE_LITERAL_RATIONAL(3643, 1)
MAKE_LITERAL_RATIONAL(3644, 1)
MAKE_LITERAL_RATIONAL(3645, 1)
MAKE_LITERAL_RATIONAL(3646, 1)
MAKE_LITERAL_RATIONAL(3647, 1)
MAKE_LITERAL_RATIONAL(3648, 1)
MAKE_LITERAL_RATIONAL(3649, 1)
MAKE_LITERAL_RATIONAL(3650, 1)
MAKE_LITERAL_RATIONAL(3651, 1)
MAKE_LITERAL_RATIONAL(3652, 1)
MAKE_LITERAL_RATIONAL(3653, 1)
MAKE_LITERAL_RATIONAL(3654, 1)
MAKE_LITERAL_RATIONAL(3655, 1)
MAKE_LITERAL_RATIONAL(3656, 1)
MAKE_LITERAL_RATIONAL(3657, 1)
MAKE_LITERAL_RATIONAL(3658, 1)
MAKE_LITERAL_RATIONAL(3659, 1)
MAKE_LITERAL_RATIONAL(3660, 1)
MAKE_LITERAL_RATIONAL(3661, 1)
MAKE_LITERAL_RATIONAL(3662, 1)
MAKE_LITERAL_RATIONAL(3663, 1)
MAKE_LITERAL_RATIONAL(3664, 1)
MAKE_LITERAL_RATIONAL(3665, 1)
MAKE_LITERAL_RATIONAL(3666, 1)
MAKE_LITERAL_RATIONAL(3667, 1)
MAKE_LITERAL_RATIONAL(3668, 1)
MAKE_LITERAL_RATIONAL(3669, 1)
MAKE_LITERAL_RATIONAL(3670, 1)
MAKE_LITERAL_RATIONAL(3671, 1)
MAKE_LITERAL_RATIONAL(3672, 1)
MAKE_LITERAL_RATIONAL(3673, 1)
MAKE_LITERAL_RATIONAL(3674, 1)
MAKE_LITERAL_RATIONAL(3675, 1)
MAKE_LITERAL_RATIONAL(3676, 1)
MAKE_LITERAL_RATIONAL(3677, 1)
MAKE_LITERAL_RATIONAL(3678, 1)
MAKE_LITERAL_RATIONAL(3679, 1)
MAKE_LITERAL_RATIONAL(3680, 1)
MAKE_LITERAL_RATIONAL(3681, 1)
MAKE_LITERAL_RATIONAL(3682, 1)
MAKE_LITERAL_RATIONAL(3683, 1)
MAKE_LITERAL_RATIONAL(3684, 1)
MAKE_LITERAL_RATIONAL(3685, 1)
MAKE_LITERAL_RATIONAL(3686, 1)
MAKE_LITERAL_RATIONAL(3687, 1)
MAKE_LITERAL_RATIONAL(3688, 1)
MAKE_LITERAL_RATIONAL(3689, 1)
MAKE_LITERAL_RATIONAL(3690, 1)
MAKE_LITERAL_RATIONAL(3691, 1)
MAKE_LITERAL_RATIONAL(3692, 1)
MAKE_LITERAL_RATIONAL(3693, 1)
MAKE_LITERAL_RATIONAL(3694, 1)
MAKE_LITERAL_RATIONAL(3695, 1)
MAKE_LITERAL_RATIONAL(3696, 1)
MAKE_LITERAL_RATIONAL(3697, 1)
MAKE_LITERAL_RATIONAL(3698, 1)
MAKE_LITERAL_RATIONAL(3699, 1)
MAKE_LITERAL_RATIONAL(3700, 1)
MAKE_LITERAL_RATIONAL(3701, 1)
MAKE_LITERAL_RATIONAL(3702, 1)
MAKE_LITERAL_RATIONAL(3703, 1)
MAKE_LITERAL_RATIONAL(3704, 1)
MAKE_LITERAL_RATIONAL(3705, 1)
MAKE_LITERAL_RATIONAL(3706, 1)
MAKE_LITERAL_RATIONAL(3707, 1)
MAKE_LITERAL_RATIONAL(3708, 1)
MAKE_LITERAL_RATIONAL(3709, 1)
MAKE_LITERAL_RATIONAL(3710, 1)
MAKE_LITERAL_RATIONAL(3711, 1)
MAKE_LITERAL_RATIONAL(3712, 1)
MAKE_LITERAL_RATIONAL(3713, 1)
MAKE_LITERAL_RATIONAL(3714, 1)
MAKE_LITERAL_RATIONAL(3715, 1)
MAKE_LITERAL_RATIONAL(3716, 1)
MAKE_LITERAL_RATIONAL(3717, 1)
MAKE_LITERAL_RATIONAL(3718, 1)
MAKE_LITERAL_RATIONAL(3719, 1)
MAKE_LITERAL_RATIONAL(3720, 1)
MAKE_LITERAL_RATIONAL(3721, 1)
MAKE_LITERAL_RATIONAL(3722, 1)
MAKE_LITERAL_RATIONAL(3723, 1)
MAKE_LITERAL_RATIONAL(3724, 1)
MAKE_LITERAL_RATIONAL(3725, 1)
MAKE_LITERAL_RATIONAL(3726, 1)
MAKE_LITERAL_RATIONAL(3727, 1)
MAKE_LITERAL_RATIONAL(3728, 1)
MAKE_LITERAL_RATIONAL(3729, 1)
MAKE_LITERAL_RATIONAL(3730, 1)
MAKE_LITERAL_RATIONAL(3731, 1)
MAKE_LITERAL_RATIONAL(3732, 1)
MAKE_LITERAL_RATIONAL(3733, 1)
MAKE_LITERAL_RATIONAL(3734, 1)
MAKE_LITERAL_RATIONAL(3735, 1)
MAKE_LITERAL_RATIONAL(3736, 1)
MAKE_LITERAL_RATIONAL(3737, 1)
MAKE_LITERAL_RATIONAL(3738, 1)
MAKE_LITERAL_RATIONAL(3739, 1)
MAKE_LITERAL_RATIONAL(3740, 1)
MAKE_LITERAL_RATIONAL(3741, 1)
MAKE_LITERAL_RATIONAL(3742, 1)
MAKE_LITERAL_RATIONAL(3743, 1)
MAKE_LITERAL_RATIONAL(3744, 1)
MAKE_LITERAL_RATIONAL(3745, 1)
MAKE_LITERAL_RATIONAL(3746, 1)
MAKE_LITERAL_RATIONAL(3747, 1)
MAKE_LITERAL_RATIONAL(3748, 1)
MAKE_LITERAL_RATIONAL(3749, 1)
MAKE_LITERAL_RATIONAL(3750, 1)
MAKE_LITERAL_RATIONAL(3751, 1)
MAKE_LITERAL_RATIONAL(3752, 1)
MAKE_LITERAL_RATIONAL(3753, 1)
MAKE_LITERAL_RATIONAL(3754, 1)
MAKE_LITERAL_RATIONAL(3755, 1)
MAKE_LITERAL_RATIONAL(3756, 1)
MAKE_LITERAL_RATIONAL(3757, 1)
MAKE_LITERAL_RATIONAL(3758, 1)
MAKE_LITERAL_RATIONAL(3759, 1)
MAKE_LITERAL_RATIONAL(3760, 1)
MAKE_LITERAL_RATIONAL(3761, 1)
MAKE_LITERAL_RATIONAL(3762, 1)
MAKE_LITERAL_RATIONAL(3763, 1)
MAKE_LITERAL_RATIONAL(3764, 1)
MAKE_LITERAL_RATIONAL(3765, 1)
MAKE_LITERAL_RATIONAL(3766, 1)
MAKE_LITERAL_RATIONAL(3767, 1)
MAKE_LITERAL_RATIONAL(3768, 1)
MAKE_LITERAL_RATIONAL(3769, 1)
MAKE_LITERAL_RATIONAL(3770, 1)
MAKE_LITERAL_RATIONAL(3771, 1)
MAKE_LITERAL_RATIONAL(3772, 1)
MAKE_LITERAL_RATIONAL(3773, 1)
MAKE_LITERAL_RATIONAL(3774, 1)
MAKE_LITERAL_RATIONAL(3775, 1)
MAKE_LITERAL_RATIONAL(3776, 1)
MAKE_LITERAL_RATIONAL(3777, 1)
MAKE_LITERAL_RATIONAL(3778, 1)
MAKE_LITERAL_RATIONAL(3779, 1)
MAKE_LITERAL_RATIONAL(3780, 1)
MAKE_LITERAL_RATIONAL(3781, 1)
MAKE_LITERAL_RATIONAL(3782, 1)
MAKE_LITERAL_RATIONAL(3783, 1)
MAKE_LITERAL_RATIONAL(3784, 1)
MAKE_LITERAL_RATIONAL(3785, 1)
MAKE_LITERAL_RATIONAL(3786, 1)
MAKE_LITERAL_RATIONAL(3787, 1)
MAKE_LITERAL_RATIONAL(3788, 1)
MAKE_LITERAL_RATIONAL(3789, 1)
MAKE_LITERAL_RATIONAL(3790, 1)
MAKE_LITERAL_RATIONAL(3791, 1)
MAKE_LITERAL_RATIONAL(3792, 1)
MAKE_LITERAL_RATIONAL(3793, 1)
MAKE_LITERAL_RATIONAL(3794, 1)
MAKE_LITERAL_RATIONAL(3795, 1)
MAKE_LITERAL_RATIONAL(3796, 1)
MAKE_LITERAL_RATIONAL(3797, 1)
MAKE_LITERAL_RATIONAL(3798, 1)
MAKE_LITERAL_RATIONAL(3799, 1)
MAKE_LITERAL_RATIONAL(3800, 1)
MAKE_LITERAL_RATIONAL(3801, 1)
MAKE_LITERAL_RATIONAL(3802, 1)
MAKE_LITERAL_RATIONAL(3803, 1)
MAKE_LITERAL_RATIONAL(3804, 1)
MAKE_LITERAL_RATIONAL(3805, 1)
MAKE_LITERAL_RATIONAL(3806, 1)
MAKE_LITERAL_RATIONAL(3807, 1)
MAKE_LITERAL_RATIONAL(3808, 1)
MAKE_LITERAL_RATIONAL(3809, 1)
MAKE_LITERAL_RATIONAL(3810, 1)
MAKE_LITERAL_RATIONAL(3811, 1)
MAKE_LITERAL_RATIONAL(3812, 1)
MAKE_LITERAL_RATIONAL(3813, 1)
MAKE_LITERAL_RATIONAL(3814, 1)
MAKE_LITERAL_RATIONAL(3815, 1)
MAKE_LITERAL_RATIONAL(3816, 1)
MAKE_LITERAL_RATIONAL(3817, 1)
MAKE_LITERAL_RATIONAL(3818, 1)
MAKE_LITERAL_RATIONAL(3819, 1)
MAKE_LITERAL_RATIONAL(3820, 1)
MAKE_LITERAL_RATIONAL(3821, 1)
MAKE_LITERAL_RATIONAL(3822, 1)
MAKE_LITERAL_RATIONAL(3823, 1)
MAKE_LITERAL_RATIONAL(3824, 1)
MAKE_LITERAL_RATIONAL(3825, 1)
MAKE_LITERAL_RATIONAL(3826, 1)
MAKE_LITERAL_RATIONAL(3827, 1)
MAKE_LITERAL_RATIONAL(3828, 1)
MAKE_LITERAL_RATIONAL(3829, 1)
MAKE_LITERAL_RATIONAL(3830, 1)
MAKE_LITERAL_RATIONAL(3831, 1)
MAKE_LITERAL_RATIONAL(3832, 1)
MAKE_LITERAL_RATIONAL(3833, 1)
MAKE_LITERAL_RATIONAL(3834, 1)
MAKE_LITERAL_RATIONAL(3835, 1)
MAKE_LITERAL_RATIONAL(3836, 1)
MAKE_LITERAL_RATIONAL(3837, 1)
MAKE_LITERAL_RATIONAL(3838, 1)
MAKE_LITERAL_RATIONAL(3839, 1)
MAKE_LITERAL_RATIONAL(3840, 1)
MAKE_LITERAL_RATIONAL(3841, 1)
MAKE_LITERAL_RATIONAL(3842, 1)
MAKE_LITERAL_RATIONAL(3843, 1)
MAKE_LITERAL_RATIONAL(3844, 1)
MAKE_LITERAL_RATIONAL(3845, 1)
MAKE_LITERAL_RATIONAL(3846, 1)
MAKE_LITERAL_RATIONAL(3847, 1)
MAKE_LITERAL_RATIONAL(3848, 1)
MAKE_LITERAL_RATIONAL(3849, 1)
MAKE_LITERAL_RATIONAL(3850, 1)
MAKE_LITERAL_RATIONAL(3851, 1)
MAKE_LITERAL_RATIONAL(3852, 1)
MAKE_LITERAL_RATIONAL(3853, 1)
MAKE_LITERAL_RATIONAL(3854, 1)
MAKE_LITERAL_RATIONAL(3855, 1)
MAKE_LITERAL_RATIONAL(3856, 1)
MAKE_LITERAL_RATIONAL(3857, 1)
MAKE_LITERAL_RATIONAL(3858, 1)
MAKE_LITERAL_RATIONAL(3859, 1)
MAKE_LITERAL_RATIONAL(3860, 1)
MAKE_LITERAL_RATIONAL(3861, 1)
MAKE_LITERAL_RATIONAL(3862, 1)
MAKE_LITERAL_RATIONAL(3863, 1)
MAKE_LITERAL_RATIONAL(3864, 1)
MAKE_LITERAL_RATIONAL(3865, 1)
MAKE_LITERAL_RATIONAL(3866, 1)
MAKE_LITERAL_RATIONAL(3867, 1)
MAKE_LITERAL_RATIONAL(3868, 1)
MAKE_LITERAL_RATIONAL(3869, 1)
MAKE_LITERAL_RATIONAL(3870, 1)
MAKE_LITERAL_RATIONAL(3871, 1)
MAKE_LITERAL_RATIONAL(3872, 1)
MAKE_LITERAL_RATIONAL(3873, 1)
MAKE_LITERAL_RATIONAL(3874, 1)
MAKE_LITERAL_RATIONAL(3875, 1)
MAKE_LITERAL_RATIONAL(3876, 1)
MAKE_LITERAL_RATIONAL(3877, 1)
MAKE_LITERAL_RATIONAL(3878, 1)
MAKE_LITERAL_RATIONAL(3879, 1)
MAKE_LITERAL_RATIONAL(3880, 1)
MAKE_LITERAL_RATIONAL(3881, 1)
MAKE_LITERAL_RATIONAL(3882, 1)
MAKE_LITERAL_RATIONAL(3883, 1)
MAKE_LITERAL_RATIONAL(3884, 1)
MAKE_LITERAL_RATIONAL(3885, 1)
MAKE_LITERAL_RATIONAL(3886, 1)
MAKE_LITERAL_RATIONAL(3887, 1)
MAKE_LITERAL_RATIONAL(3888, 1)
MAKE_LITERAL_RATIONAL(3889, 1)
MAKE_LITERAL_RATIONAL(3890, 1)
MAKE_LITERAL_RATIONAL(3891, 1)
MAKE_LITERAL_RATIONAL(3892, 1)
MAKE_LITERAL_RATIONAL(3893, 1)
MAKE_LITERAL_RATIONAL(3894, 1)
MAKE_LITERAL_RATIONAL(3895, 1)
MAKE_LITERAL_RATIONAL(3896, 1)
MAKE_LITERAL_RATIONAL(3897, 1)
MAKE_LITERAL_RATIONAL(3898, 1)
MAKE_LITERAL_RATIONAL(3899, 1)
MAKE_LITERAL_RATIONAL(3900, 1)
MAKE_LITERAL_RATIONAL(3901, 1)
MAKE_LITERAL_RATIONAL(3902, 1)
MAKE_LITERAL_RATIONAL(3903, 1)
MAKE_LITERAL_RATIONAL(3904, 1)
MAKE_LITERAL_RATIONAL(3905, 1)
MAKE_LITERAL_RATIONAL(3906, 1)
MAKE_LITERAL_RATIONAL(3907, 1)
MAKE_LITERAL_RATIONAL(3908, 1)
MAKE_LITERAL_RATIONAL(3909, 1)
MAKE_LITERAL_RATIONAL(3910, 1)
MAKE_LITERAL_RATIONAL(3911, 1)
MAKE_LITERAL_RATIONAL(3912, 1)
MAKE_LITERAL_RATIONAL(3913, 1)
MAKE_LITERAL_RATIONAL(3914, 1)
MAKE_LITERAL_RATIONAL(3915, 1)
MAKE_LITERAL_RATIONAL(3916, 1)
MAKE_LITERAL_RATIONAL(3917, 1)
MAKE_LITERAL_RATIONAL(3918, 1)
MAKE_LITERAL_RATIONAL(3919, 1)
MAKE_LITERAL_RATIONAL(3920, 1)
MAKE_LITERAL_RATIONAL(3921, 1)
MAKE_LITERAL_RATIONAL(3922, 1)
MAKE_LITERAL_RATIONAL(3923, 1)
MAKE_LITERAL_RATIONAL(3924, 1)
MAKE_LITERAL_RATIONAL(3925, 1)
MAKE_LITERAL_RATIONAL(3926, 1)
MAKE_LITERAL_RATIONAL(3927, 1)
MAKE_LITERAL_RATIONAL(3928, 1)
MAKE_LITERAL_RATIONAL(3929, 1)
MAKE_LITERAL_RATIONAL(3930, 1)
MAKE_LITERAL_RATIONAL(3931, 1)
MAKE_LITERAL_RATIONAL(3932, 1)
MAKE_LITERAL_RATIONAL(3933, 1)
MAKE_LITERAL_RATIONAL(3934, 1)
MAKE_LITERAL_RATIONAL(3935, 1)
MAKE_LITERAL_RATIONAL(3936, 1)
MAKE_LITERAL_RATIONAL(3937, 1)
MAKE_LITERAL_RATIONAL(3938, 1)
MAKE_LITERAL_RATIONAL(3939, 1)
MAKE_LITERAL_RATIONAL(3940, 1)
MAKE_LITERAL_RATIONAL(3941, 1)
MAKE_LITERAL_RATIONAL(3942, 1)
MAKE_LITERAL_RATIONAL(3943, 1)
MAKE_LITERAL_RATIONAL(3944, 1)
MAKE_LITERAL_RATIONAL(3945, 1)
MAKE_LITERAL_RATIONAL(3946, 1)
MAKE_LITERAL_RATIONAL(3947, 1)
MAKE_LITERAL_RATIONAL(3948, 1)
MAKE_LITERAL_RATIONAL(3949, 1)
MAKE_LITERAL_RATIONAL(3950, 1)
MAKE_LITERAL_RATIONAL(3951, 1)
MAKE_LITERAL_RATIONAL(3952, 1)
MAKE_LITERAL_RATIONAL(3953, 1)
MAKE_LITERAL_RATIONAL(3954, 1)
MAKE_LITERAL_RATIONAL(3955, 1)
MAKE_LITERAL_RATIONAL(3956, 1)
MAKE_LITERAL_RATIONAL(3957, 1)
MAKE_LITERAL_RATIONAL(3958, 1)
MAKE_LITERAL_RATIONAL(3959, 1)
MAKE_LITERAL_RATIONAL(3960, 1)
MAKE_LITERAL_RATIONAL(3961, 1)
MAKE_LITERAL_RATIONAL(3962, 1)
MAKE_LITERAL_RATIONAL(3963, 1)
MAKE_LITERAL_RATIONAL(3964, 1)
MAKE_LITERAL_RATIONAL(3965, 1)
MAKE_LITERAL_RATIONAL(3966, 1)
MAKE_LITERAL_RATIONAL(3967, 1)
MAKE_LITERAL_RATIONAL(3968, 1)
MAKE_LITERAL_RATIONAL(3969, 1)
MAKE_LITERAL_RATIONAL(3970, 1)
MAKE_LITERAL_RATIONAL(3971, 1)
MAKE_LITERAL_RATIONAL(3972, 1)
MAKE_LITERAL_RATIONAL(3973, 1)
MAKE_LITERAL_RATIONAL(3974, 1)
MAKE_LITERAL_RATIONAL(3975, 1)
MAKE_LITERAL_RATIONAL(3976, 1)
MAKE_LITERAL_RATIONAL(3977, 1)
MAKE_LITERAL_RATIONAL(3978, 1)
MAKE_LITERAL_RATIONAL(3979, 1)
MAKE_LITERAL_RATIONAL(3980, 1)
MAKE_LITERAL_RATIONAL(3981, 1)
MAKE_LITERAL_RATIONAL(3982, 1)
MAKE_LITERAL_RATIONAL(3983, 1)
MAKE_LITERAL_RATIONAL(3984, 1)
MAKE_LITERAL_RATIONAL(3985, 1)
MAKE_LITERAL_RATIONAL(3986, 1)
MAKE_LITERAL_RATIONAL(3987, 1)
MAKE_LITERAL_RATIONAL(3988, 1)
MAKE_LITERAL_RATIONAL(3989, 1)
MAKE_LITERAL_RATIONAL(3990, 1)
MAKE_LITERAL_RATIONAL(3991, 1)
MAKE_LITERAL_RATIONAL(3992, 1)
MAKE_LITERAL_RATIONAL(3993, 1)
MAKE_LITERAL_RATIONAL(3994, 1)
MAKE_LITERAL_RATIONAL(3995, 1)
MAKE_LITERAL_RATIONAL(3996, 1)
MAKE_LITERAL_RATIONAL(3997, 1)
MAKE_LITERAL_RATIONAL(3998, 1)
MAKE_LITERAL_RATIONAL(3999, 1)
MAKE_LITERAL_RATIONAL(4000, 1)
MAKE_LITERAL_RATIONAL(4001, 1)
MAKE_LITERAL_RATIONAL(4002, 1)
MAKE_LITERAL_RATIONAL(4003, 1)
MAKE_LITERAL_RATIONAL(4004, 1)
MAKE_LITERAL_RATIONAL(4005, 1)
MAKE_LITERAL_RATIONAL(4006, 1)
MAKE_LITERAL_RATIONAL(4007, 1)
MAKE_LITERAL_RATIONAL(4008, 1)
MAKE_LITERAL_RATIONAL(4009, 1)
MAKE_LITERAL_RATIONAL(4010, 1)
MAKE_LITERAL_RATIONAL(4011, 1)
MAKE_LITERAL_RATIONAL(4012, 1)
MAKE_LITERAL_RATIONAL(4013, 1)
MAKE_LITERAL_RATIONAL(4014, 1)
MAKE_LITERAL_RATIONAL(4015, 1)
MAKE_LITERAL_RATIONAL(4016, 1)
MAKE_LITERAL_RATIONAL(4017, 1)
MAKE_LITERAL_RATIONAL(4018, 1)
MAKE_LITERAL_RATIONAL(4019, 1)
MAKE_LITERAL_RATIONAL(4020, 1)
MAKE_LITERAL_RATIONAL(4021, 1)
MAKE_LITERAL_RATIONAL(4022, 1)
MAKE_LITERAL_RATIONAL(4023, 1)
MAKE_LITERAL_RATIONAL(4024, 1)
MAKE_LITERAL_RATIONAL(4025, 1)
MAKE_LITERAL_RATIONAL(4026, 1)
MAKE_LITERAL_RATIONAL(4027, 1)
MAKE_LITERAL_RATIONAL(4028, 1)
MAKE_LITERAL_RATIONAL(4029, 1)
MAKE_LITERAL_RATIONAL(4030, 1)
MAKE_LITERAL_RATIONAL(4031, 1)
MAKE_LITERAL_RATIONAL(4032, 1)
MAKE_LITERAL_RATIONAL(4033, 1)
MAKE_LITERAL_RATIONAL(4034, 1)
MAKE_LITERAL_RATIONAL(4035, 1)
MAKE_LITERAL_RATIONAL(4036, 1)
MAKE_LITERAL_RATIONAL(4037, 1)
MAKE_LITERAL_RATIONAL(4038, 1)
MAKE_LITERAL_RATIONAL(4039, 1)
MAKE_LITERAL_RATIONAL(4040, 1)
MAKE_LITERAL_RATIONAL(4041, 1)
MAKE_LITERAL_RATIONAL(4042, 1)
MAKE_LITERAL_RATIONAL(4043, 1)
MAKE_LITERAL_RATIONAL(4044, 1)
MAKE_LITERAL_RATIONAL(4045, 1)
MAKE_LITERAL_RATIONAL(4046, 1)
MAKE_LITERAL_RATIONAL(4047, 1)
MAKE_LITERAL_RATIONAL(4048, 1)
MAKE_LITERAL_RATIONAL(4049, 1)
MAKE_LITERAL_RATIONAL(4050, 1)
MAKE_LITERAL_RATIONAL(4051, 1)
MAKE_LITERAL_RATIONAL(4052, 1)
MAKE_LITERAL_RATIONAL(4053, 1)
MAKE_LITERAL_RATIONAL(4054, 1)
MAKE_LITERAL_RATIONAL(4055, 1)
MAKE_LITERAL_RATIONAL(4056, 1)
MAKE_LITERAL_RATIONAL(4057, 1)
MAKE_LITERAL_RATIONAL(4058, 1)
MAKE_LITERAL_RATIONAL(4059, 1)
MAKE_LITERAL_RATIONAL(4060, 1)
MAKE_LITERAL_RATIONAL(4061, 1)
MAKE_LITERAL_RATIONAL(4062, 1)
MAKE_LITERAL_RATIONAL(4063, 1)
MAKE_LITERAL_RATIONAL(4064, 1)
MAKE_LITERAL_RATIONAL(4065, 1)
MAKE_LITERAL_RATIONAL(4066, 1)
MAKE_LITERAL_RATIONAL(4067, 1)
MAKE_LITERAL_RATIONAL(4068, 1)
MAKE_LITERAL_RATIONAL(4069, 1)
MAKE_LITERAL_RATIONAL(4070, 1)
MAKE_LITERAL_RATIONAL(4071, 1)
MAKE_LITERAL_RATIONAL(4072, 1)
MAKE_LITERAL_RATIONAL(4073, 1)
MAKE_LITERAL_RATIONAL(4074, 1)
MAKE_LITERAL_RATIONAL(4075, 1)
MAKE_LITERAL_RATIONAL(4076, 1)
MAKE_LITERAL_RATIONAL(4077, 1)
MAKE_LITERAL_RATIONAL(4078, 1)
MAKE_LITERAL_RATIONAL(4079, 1)
MAKE_LITERAL_RATIONAL(4080, 1)
MAKE_LITERAL_RATIONAL(4081, 1)
MAKE_LITERAL_RATIONAL(4082, 1)
MAKE_LITERAL_RATIONAL(4083, 1)
MAKE_LITERAL_RATIONAL(4084, 1)
MAKE_LITERAL_RATIONAL(4085, 1)
MAKE_LITERAL_RATIONAL(4086, 1)
MAKE_LITERAL_RATIONAL(4087, 1)
MAKE_LITERAL_RATIONAL(4088, 1)
MAKE_LITERAL_RATIONAL(4089, 1)
MAKE_LITERAL_RATIONAL(4090, 1)
MAKE_LITERAL_RATIONAL(4091, 1)
MAKE_LITERAL_RATIONAL(4092, 1)
MAKE_LITERAL_RATIONAL(4093, 1)
MAKE_LITERAL_RATIONAL(4094, 1)
MAKE_LITERAL_RATIONAL(4095, 1)
MAKE_LITERAL_RATIONAL(4096, 1)
MAKE_LITERAL_RATIONAL(4097, 1)
MAKE_LITERAL_RATIONAL(4098, 1)
MAKE_LITERAL_RATIONAL(4099, 1)
MAKE_LITERAL_RATIONAL(4100, 1)
MAKE_LITERAL_RATIONAL(4101, 1)
MAKE_LITERAL_RATIONAL(4102, 1)
MAKE_LITERAL_RATIONAL(4103, 1)
MAKE_LITERAL_RATIONAL(4104, 1)
MAKE_LITERAL_RATIONAL(4105, 1)
MAKE_LITERAL_RATIONAL(4106, 1)
MAKE_LITERAL_RATIONAL(4107, 1)
MAKE_LITERAL_RATIONAL(4108, 1)
MAKE_LITERAL_RATIONAL(4109, 1)
MAKE_LITERAL_RATIONAL(4110, 1)
MAKE_LITERAL_RATIONAL(4111, 1)
MAKE_LITERAL_RATIONAL(4112, 1)
MAKE_LITERAL_RATIONAL(4113, 1)
MAKE_LITERAL_RATIONAL(4114, 1)
MAKE_LITERAL_RATIONAL(4115, 1)
MAKE_LITERAL_RATIONAL(4116, 1)
MAKE_LITERAL_RATIONAL(4117, 1)
MAKE_LITERAL_RATIONAL(4118, 1)
MAKE_LITERAL_RATIONAL(4119, 1)
MAKE_LITERAL_RATIONAL(4120, 1)
MAKE_LITERAL_RATIONAL(4121, 1)
MAKE_LITERAL_RATIONAL(4122, 1)
MAKE_LITERAL_RATIONAL(4123, 1)
MAKE_LITERAL_RATIONAL(4124, 1)
MAKE_LITERAL_RATIONAL(4125, 1)
MAKE_LITERAL_RATIONAL(4126, 1)
MAKE_LITERAL_RATIONAL(4127, 1)
MAKE_LITERAL_RATIONAL(4128, 1)
MAKE_LITERAL_RATIONAL(4129, 1)
MAKE_LITERAL_RATIONAL(4130, 1)
MAKE_LITERAL_RATIONAL(4131, 1)
MAKE_LITERAL_RATIONAL(4132, 1)
MAKE_LITERAL_RATIONAL(4133, 1)
MAKE_LITERAL_RATIONAL(4134, 1)
MAKE_LITERAL_RATIONAL(4135, 1)
MAKE_LITERAL_RATIONAL(4136, 1)
MAKE_LITERAL_RATIONAL(4137, 1)
MAKE_LITERAL_RATIONAL(4138, 1)
MAKE_LITERAL_RATIONAL(4139, 1)
MAKE_LITERAL_RATIONAL(4140, 1)
MAKE_LITERAL_RATIONAL(4141, 1)
MAKE_LITERAL_RATIONAL(4142, 1)
MAKE_LITERAL_RATIONAL(4143, 1)
MAKE_LITERAL_RATIONAL(4144, 1)
MAKE_LITERAL_RATIONAL(4145, 1)
MAKE_LITERAL_RATIONAL(4146, 1)
MAKE_LITERAL_RATIONAL(4147, 1)
MAKE_LITERAL_RATIONAL(4148, 1)
MAKE_LITERAL_RATIONAL(4149, 1)
MAKE_LITERAL_RATIONAL(4150, 1)
MAKE_LITERAL_RATIONAL(4151, 1)
MAKE_LITERAL_RATIONAL(4152, 1)
MAKE_LITERAL_RATIONAL(4153, 1)
MAKE_LITERAL_RATIONAL(4154, 1)
MAKE_LITERAL_RATIONAL(4155, 1)
MAKE_LITERAL_RATIONAL(4156, 1)
MAKE_LITERAL_RATIONAL(4157, 1)
MAKE_LITERAL_RATIONAL(4158, 1)
MAKE_LITERAL_RATIONAL(4159, 1)
MAKE_LITERAL_RATIONAL(4160, 1)
MAKE_LITERAL_RATIONAL(4161, 1)
MAKE_LITERAL_RATIONAL(4162, 1)
MAKE_LITERAL_RATIONAL(4163, 1)
MAKE_LITERAL_RATIONAL(4164, 1)
MAKE_LITERAL_RATIONAL(4165, 1)
MAKE_LITERAL_RATIONAL(4166, 1)
MAKE_LITERAL_RATIONAL(4167, 1)
MAKE_LITERAL_RATIONAL(4168, 1)
MAKE_LITERAL_RATIONAL(4169, 1)
MAKE_LITERAL_RATIONAL(4170, 1)
MAKE_LITERAL_RATIONAL(4171, 1)
MAKE_LITERAL_RATIONAL(4172, 1)
MAKE_LITERAL_RATIONAL(4173, 1)
MAKE_LITERAL_RATIONAL(4174, 1)
MAKE_LITERAL_RATIONAL(4175, 1)
MAKE_LITERAL_RATIONAL(4176, 1)
MAKE_LITERAL_RATIONAL(4177, 1)
MAKE_LITERAL_RATIONAL(4178, 1)
MAKE_LITERAL_RATIONAL(4179, 1)
MAKE_LITERAL_RATIONAL(4180, 1)
MAKE_LITERAL_RATIONAL(4181, 1)
MAKE_LITERAL_RATIONAL(4182, 1)
MAKE_LITERAL_RATIONAL(4183, 1)
MAKE_LITERAL_RATIONAL(4184, 1)
MAKE_LITERAL_RATIONAL(4185, 1)
MAKE_LITERAL_RATIONAL(4186, 1)
MAKE_LITERAL_RATIONAL(4187, 1)
MAKE_LITERAL_RATIONAL(4188, 1)
MAKE_LITERAL_RATIONAL(4189, 1)
MAKE_LITERAL_RATIONAL(4190, 1)
MAKE_LITERAL_RATIONAL(4191, 1)
MAKE_LITERAL_RATIONAL(4192, 1)
MAKE_LITERAL_RATIONAL(4193, 1)
MAKE_LITERAL_RATIONAL(4194, 1)
MAKE_LITERAL_RATIONAL(4195, 1)
MAKE_LITERAL_RATIONAL(4196, 1)
MAKE_LITERAL_RATIONAL(4197, 1)
MAKE_LITERAL_RATIONAL(4198, 1)
MAKE_LITERAL_RATIONAL(4199, 1)
MAKE_LITERAL_RATIONAL(4200, 1)
MAKE_LITERAL_RATIONAL(4201, 1)
MAKE_LITERAL_RATIONAL(4202, 1)
MAKE_LITERAL_RATIONAL(4203, 1)
MAKE_LITERAL_RATIONAL(4204, 1)
MAKE_LITERAL_RATIONAL(4205, 1)
MAKE_LITERAL_RATIONAL(4206, 1)
MAKE_LITERAL_RATIONAL(4207, 1)
MAKE_LITERAL_RATIONAL(4208, 1)
MAKE_LITERAL_RATIONAL(4209, 1)
MAKE_LITERAL_RATIONAL(4210, 1)
MAKE_LITERAL_RATIONAL(4211, 1)
MAKE_LITERAL_RATIONAL(4212, 1)
MAKE_LITERAL_RATIONAL(4213, 1)
MAKE_LITERAL_RATIONAL(4214, 1)
MAKE_LITERAL_RATIONAL(4215, 1)
MAKE_LITERAL_RATIONAL(4216, 1)
MAKE_LITERAL_RATIONAL(4217, 1)
MAKE_LITERAL_RATIONAL(4218, 1)
MAKE_LITERAL_RATIONAL(4219, 1)
MAKE_LITERAL_RATIONAL(4220, 1)
MAKE_LITERAL_RATIONAL(4221, 1)
MAKE_LITERAL_RATIONAL(4222, 1)
MAKE_LITERAL_RATIONAL(4223, 1)
MAKE_LITERAL_RATIONAL(4224, 1)
MAKE_LITERAL_RATIONAL(4225, 1)
MAKE_LITERAL_RATIONAL(4226, 1)
MAKE_LITERAL_RATIONAL(4227, 1)
MAKE_LITERAL_RATIONAL(4228, 1)
MAKE_LITERAL_RATIONAL(4229, 1)
MAKE_LITERAL_RATIONAL(4230, 1)
MAKE_LITERAL_RATIONAL(4231, 1)
MAKE_LITERAL_RATIONAL(4232, 1)
MAKE_LITERAL_RATIONAL(4233, 1)
MAKE_LITERAL_RATIONAL(4234, 1)
MAKE_LITERAL_RATIONAL(4235, 1)
MAKE_LITERAL_RATIONAL(4236, 1)
MAKE_LITERAL_RATIONAL(4237, 1)
MAKE_LITERAL_RATIONAL(4238, 1)
MAKE_LITERAL_RATIONAL(4239, 1)
MAKE_LITERAL_RATIONAL(4240, 1)
MAKE_LITERAL_RATIONAL(4241, 1)
MAKE_LITERAL_RATIONAL(4242, 1)
MAKE_LITERAL_RATIONAL(4243, 1)
MAKE_LITERAL_RATIONAL(4244, 1)
MAKE_LITERAL_RATIONAL(4245, 1)
MAKE_LITERAL_RATIONAL(4246, 1)
MAKE_LITERAL_RATIONAL(4247, 1)
MAKE_LITERAL_RATIONAL(4248, 1)
MAKE_LITERAL_RATIONAL(4249, 1)
MAKE_LITERAL_RATIONAL(4250, 1)
MAKE_LITERAL_RATIONAL(4251, 1)
MAKE_LITERAL_RATIONAL(4252, 1)
MAKE_LITERAL_RATIONAL(4253, 1)
MAKE_LITERAL_RATIONAL(4254, 1)
MAKE_LITERAL_RATIONAL(4255, 1)
MAKE_LITERAL_RATIONAL(4256, 1)
MAKE_LITERAL_RATIONAL(4257, 1)
MAKE_LITERAL_RATIONAL(4258, 1)
MAKE_LITERAL_RATIONAL(4259, 1)
MAKE_LITERAL_RATIONAL(4260, 1)
MAKE_LITERAL_RATIONAL(4261, 1)
MAKE_LITERAL_RATIONAL(4262, 1)
MAKE_LITERAL_RATIONAL(4263, 1)
MAKE_LITERAL_RATIONAL(4264, 1)
MAKE_LITERAL_RATIONAL(4265, 1)
MAKE_LITERAL_RATIONAL(4266, 1)
MAKE_LITERAL_RATIONAL(4267, 1)
MAKE_LITERAL_RATIONAL(4268, 1)
MAKE_LITERAL_RATIONAL(4269, 1)
MAKE_LITERAL_RATIONAL(4270, 1)
MAKE_LITERAL_RATIONAL(4271, 1)
MAKE_LITERAL_RATIONAL(4272, 1)
MAKE_LITERAL_RATIONAL(4273, 1)
MAKE_LITERAL_RATIONAL(4274, 1)
MAKE_LITERAL_RATIONAL(4275, 1)
MAKE_LITERAL_RATIONAL(4276, 1)
MAKE_LITERAL_RATIONAL(4277, 1)
MAKE_LITERAL_RATIONAL(4278, 1)
MAKE_LITERAL_RATIONAL(4279, 1)
MAKE_LITERAL_RATIONAL(4280, 1)
MAKE_LITERAL_RATIONAL(4281, 1)
MAKE_LITERAL_RATIONAL(4282, 1)
MAKE_LITERAL_RATIONAL(4283, 1)
MAKE_LITERAL_RATIONAL(4284, 1)
MAKE_LITERAL_RATIONAL(4285, 1)
MAKE_LITERAL_RATIONAL(4286, 1)
MAKE_LITERAL_RATIONAL(4287, 1)
MAKE_LITERAL_RATIONAL(4288, 1)
MAKE_LITERAL_RATIONAL(4289, 1)
MAKE_LITERAL_RATIONAL(4290, 1)
MAKE_LITERAL_RATIONAL(4291, 1)
MAKE_LITERAL_RATIONAL(4292, 1)
MAKE_LITERAL_RATIONAL(4293, 1)
MAKE_LITERAL_RATIONAL(4294, 1)
MAKE_LITERAL_RATIONAL(4295, 1)
MAKE_LITERAL_RATIONAL(4296, 1)
MAKE_LITERAL_RATIONAL(4297, 1)
MAKE_LITERAL_RATIONAL(4298, 1)
MAKE_LITERAL_RATIONAL(4299, 1)
MAKE_LITERAL_RATIONAL(4300, 1)
MAKE_LITERAL_RATIONAL(4301, 1)
MAKE_LITERAL_RATIONAL(4302, 1)
MAKE_LITERAL_RATIONAL(4303, 1)
MAKE_LITERAL_RATIONAL(4304, 1)
MAKE_LITERAL_RATIONAL(4305, 1)
MAKE_LITERAL_RATIONAL(4306, 1)
MAKE_LITERAL_RATIONAL(4307, 1)
MAKE_LITERAL_RATIONAL(4308, 1)
MAKE_LITERAL_RATIONAL(4309, 1)
MAKE_LITERAL_RATIONAL(4310, 1)
MAKE_LITERAL_RATIONAL(4311, 1)
MAKE_LITERAL_RATIONAL(4312, 1)
MAKE_LITERAL_RATIONAL(4313, 1)
MAKE_LITERAL_RATIONAL(4314, 1)
MAKE_LITERAL_RATIONAL(4315, 1)
MAKE_LITERAL_RATIONAL(4316, 1)
MAKE_LITERAL_RATIONAL(4317, 1)
MAKE_LITERAL_RATIONAL(4318, 1)
MAKE_LITERAL_RATIONAL(4319, 1)
MAKE_LITERAL_RATIONAL(4320, 1)
MAKE_LITERAL_RATIONAL(4321, 1)
MAKE_LITERAL_RATIONAL(4322, 1)
MAKE_LITERAL_RATIONAL(4323, 1)
MAKE_LITERAL_RATIONAL(4324, 1)
MAKE_LITERAL_RATIONAL(4325, 1)
MAKE_LITERAL_RATIONAL(4326, 1)
MAKE_LITERAL_RATIONAL(4327, 1)
MAKE_LITERAL_RATIONAL(4328, 1)
MAKE_LITERAL_RATIONAL(4329, 1)
MAKE_LITERAL_RATIONAL(4330, 1)
MAKE_LITERAL_RATIONAL(4331, 1)
MAKE_LITERAL_RATIONAL(4332, 1)
MAKE_LITERAL_RATIONAL(4333, 1)
MAKE_LITERAL_RATIONAL(4334, 1)
MAKE_LITERAL_RATIONAL(4335, 1)
MAKE_LITERAL_RATIONAL(4336, 1)
MAKE_LITERAL_RATIONAL(4337, 1)
MAKE_LITERAL_RATIONAL(4338, 1)
MAKE_LITERAL_RATIONAL(4339, 1)
MAKE_LITERAL_RATIONAL(4340, 1)
MAKE_LITERAL_RATIONAL(4341, 1)
MAKE_LITERAL_RATIONAL(4342, 1)
MAKE_LITERAL_RATIONAL(4343, 1)
MAKE_LITERAL_RATIONAL(4344, 1)
MAKE_LITERAL_RATIONAL(4345, 1)
MAKE_LITERAL_RATIONAL(4346, 1)
MAKE_LITERAL_RATIONAL(4347, 1)
MAKE_LITERAL_RATIONAL(4348, 1)
MAKE_LITERAL_RATIONAL(4349, 1)
MAKE_LITERAL_RATIONAL(4350, 1)
MAKE_LITERAL_RATIONAL(4351, 1)
MAKE_LITERAL_RATIONAL(4352, 1)
MAKE_LITERAL_RATIONAL(4353, 1)
MAKE_LITERAL_RATIONAL(4354, 1)
MAKE_LITERAL_RATIONAL(4355, 1)
MAKE_LITERAL_RATIONAL(4356, 1)
MAKE_LITERAL_RATIONAL(4357, 1)
MAKE_LITERAL_RATIONAL(4358, 1)
MAKE_LITERAL_RATIONAL(4359, 1)
MAKE_LITERAL_RATIONAL(4360, 1)
MAKE_LITERAL_RATIONAL(4361, 1)
MAKE_LITERAL_RATIONAL(4362, 1)
MAKE_LITERAL_RATIONAL(4363, 1)
MAKE_LITERAL_RATIONAL(4364, 1)
MAKE_LITERAL_RATIONAL(4365, 1)
MAKE_LITERAL_RATIONAL(4366, 1)
MAKE_LITERAL_RATIONAL(4367, 1)
MAKE_LITERAL_RATIONAL(4368, 1)
MAKE_LITERAL_RATIONAL(4369, 1)
MAKE_LITERAL_RATIONAL(4370, 1)
MAKE_LITERAL_RATIONAL(4371, 1)
MAKE_LITERAL_RATIONAL(4372, 1)
MAKE_LITERAL_RATIONAL(4373, 1)
MAKE_LITERAL_RATIONAL(4374, 1)
MAKE_LITERAL_RATIONAL(4375, 1)
MAKE_LITERAL_RATIONAL(4376, 1)
MAKE_LITERAL_RATIONAL(4377, 1)
MAKE_LITERAL_RATIONAL(4378, 1)
MAKE_LITERAL_RATIONAL(4379, 1)
MAKE_LITERAL_RATIONAL(4380, 1)
MAKE_LITERAL_RATIONAL(4381, 1)
MAKE_LITERAL_RATIONAL(4382, 1)
MAKE_LITERAL_RATIONAL(4383, 1)
MAKE_LITERAL_RATIONAL(4384, 1)
MAKE_LITERAL_RATIONAL(4385, 1)
MAKE_LITERAL_RATIONAL(4386, 1)
MAKE_LITERAL_RATIONAL(4387, 1)
MAKE_LITERAL_RATIONAL(4388, 1)
MAKE_LITERAL_RATIONAL(4389, 1)
MAKE_LITERAL_RATIONAL(4390, 1)
MAKE_LITERAL_RATIONAL(4391, 1)
MAKE_LITERAL_RATIONAL(4392, 1)
MAKE_LITERAL_RATIONAL(4393, 1)
MAKE_LITERAL_RATIONAL(4394, 1)
MAKE_LITERAL_RATIONAL(4395, 1)
MAKE_LITERAL_RATIONAL(4396, 1)
MAKE_LITERAL_RATIONAL(4397, 1)
MAKE_LITERAL_RATIONAL(4398, 1)
MAKE_LITERAL_RATIONAL(4399, 1)
MAKE_LITERAL_RATIONAL(4400, 1)
MAKE_LITERAL_RATIONAL(4401, 1)
MAKE_LITERAL_RATIONAL(4402, 1)
MAKE_LITERAL_RATIONAL(4403, 1)
MAKE_LITERAL_RATIONAL(4404, 1)
MAKE_LITERAL_RATIONAL(4405, 1)
MAKE_LITERAL_RATIONAL(4406, 1)
MAKE_LITERAL_RATIONAL(4407, 1)
MAKE_LITERAL_RATIONAL(4408, 1)
MAKE_LITERAL_RATIONAL(4409, 1)
MAKE_LITERAL_RATIONAL(4410, 1)
MAKE_LITERAL_RATIONAL(4411, 1)
MAKE_LITERAL_RATIONAL(4412, 1)
MAKE_LITERAL_RATIONAL(4413, 1)
MAKE_LITERAL_RATIONAL(4414, 1)
MAKE_LITERAL_RATIONAL(4415, 1)
MAKE_LITERAL_RATIONAL(4416, 1)
MAKE_LITERAL_RATIONAL(4417, 1)
MAKE_LITERAL_RATIONAL(4418, 1)
MAKE_LITERAL_RATIONAL(4419, 1)
MAKE_LITERAL_RATIONAL(4420, 1)
MAKE_LITERAL_RATIONAL(4421, 1)
MAKE_LITERAL_RATIONAL(4422, 1)
MAKE_LITERAL_RATIONAL(4423, 1)
MAKE_LITERAL_RATIONAL(4424, 1)
MAKE_LITERAL_RATIONAL(4425, 1)
MAKE_LITERAL_RATIONAL(4426, 1)
MAKE_LITERAL_RATIONAL(4427, 1)
MAKE_LITERAL_RATIONAL(4428, 1)
MAKE_LITERAL_RATIONAL(4429, 1)
MAKE_LITERAL_RATIONAL(4430, 1)
MAKE_LITERAL_RATIONAL(4431, 1)
MAKE_LITERAL_RATIONAL(4432, 1)
MAKE_LITERAL_RATIONAL(4433, 1)
MAKE_LITERAL_RATIONAL(4434, 1)
MAKE_LITERAL_RATIONAL(4435, 1)
MAKE_LITERAL_RATIONAL(4436, 1)
MAKE_LITERAL_RATIONAL(4437, 1)
MAKE_LITERAL_RATIONAL(4438, 1)
MAKE_LITERAL_RATIONAL(4439, 1)
MAKE_LITERAL_RATIONAL(4440, 1)
MAKE_LITERAL_RATIONAL(4441, 1)
MAKE_LITERAL_RATIONAL(4442, 1)
MAKE_LITERAL_RATIONAL(4443, 1)
MAKE_LITERAL_RATIONAL(4444, 1)
MAKE_LITERAL_RATIONAL(4445, 1)
MAKE_LITERAL_RATIONAL(4446, 1)
MAKE_LITERAL_RATIONAL(4447, 1)
MAKE_LITERAL_RATIONAL(4448, 1)
MAKE_LITERAL_RATIONAL(4449, 1)
MAKE_LITERAL_RATIONAL(4450, 1)
MAKE_LITERAL_RATIONAL(4451, 1)
MAKE_LITERAL_RATIONAL(4452, 1)
MAKE_LITERAL_RATIONAL(4453, 1)
MAKE_LITERAL_RATIONAL(4454, 1)
MAKE_LITERAL_RATIONAL(4455, 1)
MAKE_LITERAL_RATIONAL(4456, 1)
MAKE_LITERAL_RATIONAL(4457, 1)
MAKE_LITERAL_RATIONAL(4458, 1)
MAKE_LITERAL_RATIONAL(4459, 1)
MAKE_LITERAL_RATIONAL(4460, 1)
MAKE_LITERAL_RATIONAL(4461, 1)
MAKE_LITERAL_RATIONAL(4462, 1)
MAKE_LITERAL_RATIONAL(4463, 1)
MAKE_LITERAL_RATIONAL(4464, 1)
MAKE_LITERAL_RATIONAL(4465, 1)
MAKE_LITERAL_RATIONAL(4466, 1)
MAKE_LITERAL_RATIONAL(4467, 1)
MAKE_LITERAL_RATIONAL(4468, 1)
MAKE_LITERAL_RATIONAL(4469, 1)
MAKE_LITERAL_RATIONAL(4470, 1)
MAKE_LITERAL_RATIONAL(4471, 1)
MAKE_LITERAL_RATIONAL(4472, 1)
MAKE_LITERAL_RATIONAL(4473, 1)
MAKE_LITERAL_RATIONAL(4474, 1)
MAKE_LITERAL_RATIONAL(4475, 1)
MAKE_LITERAL_RATIONAL(4476, 1)
MAKE_LITERAL_RATIONAL(4477, 1)
MAKE_LITERAL_RATIONAL(4478, 1)
MAKE_LITERAL_RATIONAL(4479, 1)
MAKE_LITERAL_RATIONAL(4480, 1)
MAKE_LITERAL_RATIONAL(4481, 1)
MAKE_LITERAL_RATIONAL(4482, 1)
MAKE_LITERAL_RATIONAL(4483, 1)
MAKE_LITERAL_RATIONAL(4484, 1)
MAKE_LITERAL_RATIONAL(4485, 1)
MAKE_LITERAL_RATIONAL(4486, 1)
MAKE_LITERAL_RATIONAL(4487, 1)
MAKE_LITERAL_RATIONAL(4488, 1)
MAKE_LITERAL_RATIONAL(4489, 1)
MAKE_LITERAL_RATIONAL(4490, 1)
MAKE_LITERAL_RATIONAL(4491, 1)
MAKE_LITERAL_RATIONAL(4492, 1)
MAKE_LITERAL_RATIONAL(4493, 1)
MAKE_LITERAL_RATIONAL(4494, 1)
MAKE_LITERAL_RATIONAL(4495, 1)
MAKE_LITERAL_RATIONAL(4496, 1)
MAKE_LITERAL_RATIONAL(4497, 1)
MAKE_LITERAL_RATIONAL(4498, 1)
MAKE_LITERAL_RATIONAL(4499, 1)
MAKE_LITERAL_RATIONAL(4500, 1)
MAKE_LITERAL_RATIONAL(4501, 1)
MAKE_LITERAL_RATIONAL(4502, 1)
MAKE_LITERAL_RATIONAL(4503, 1)
MAKE_LITERAL_RATIONAL(4504, 1)
MAKE_LITERAL_RATIONAL(4505, 1)
MAKE_LITERAL_RATIONAL(4506, 1)
MAKE_LITERAL_RATIONAL(4507, 1)
MAKE_LITERAL_RATIONAL(4508, 1)
MAKE_LITERAL_RATIONAL(4509, 1)
MAKE_LITERAL_RATIONAL(4510, 1)
MAKE_LITERAL_RATIONAL(4511, 1)
MAKE_LITERAL_RATIONAL(4512, 1)
MAKE_LITERAL_RATIONAL(4513, 1)
MAKE_LITERAL_RATIONAL(4514, 1)
MAKE_LITERAL_RATIONAL(4515, 1)
MAKE_LITERAL_RATIONAL(4516, 1)
MAKE_LITERAL_RATIONAL(4517, 1)
MAKE_LITERAL_RATIONAL(4518, 1)
MAKE_LITERAL_RATIONAL(4519, 1)
MAKE_LITERAL_RATIONAL(4520, 1)
MAKE_LITERAL_RATIONAL(4521, 1)
MAKE_LITERAL_RATIONAL(4522, 1)
MAKE_LITERAL_RATIONAL(4523, 1)
MAKE_LITERAL_RATIONAL(4524, 1)
MAKE_LITERAL_RATIONAL(4525, 1)
MAKE_LITERAL_RATIONAL(4526, 1)
MAKE_LITERAL_RATIONAL(4527, 1)
MAKE_LITERAL_RATIONAL(4528, 1)
MAKE_LITERAL_RATIONAL(4529, 1)
MAKE_LITERAL_RATIONAL(4530, 1)
MAKE_LITERAL_RATIONAL(4531, 1)
MAKE_LITERAL_RATIONAL(4532, 1)
MAKE_LITERAL_RATIONAL(4533, 1)
MAKE_LITERAL_RATIONAL(4534, 1)
MAKE_LITERAL_RATIONAL(4535, 1)
MAKE_LITERAL_RATIONAL(4536, 1)
MAKE_LITERAL_RATIONAL(4537, 1)
MAKE_LITERAL_RATIONAL(4538, 1)
MAKE_LITERAL_RATIONAL(4539, 1)
MAKE_LITERAL_RATIONAL(4540, 1)
MAKE_LITERAL_RATIONAL(4541, 1)
MAKE_LITERAL_RATIONAL(4542, 1)
MAKE_LITERAL_RATIONAL(4543, 1)
MAKE_LITERAL_RATIONAL(4544, 1)
MAKE_LITERAL_RATIONAL(4545, 1)
MAKE_LITERAL_RATIONAL(4546, 1)
MAKE_LITERAL_RATIONAL(4547, 1)
MAKE_LITERAL_RATIONAL(4548, 1)
MAKE_LITERAL_RATIONAL(4549, 1)
MAKE_LITERAL_RATIONAL(4550, 1)
MAKE_LITERAL_RATIONAL(4551, 1)
MAKE_LITERAL_RATIONAL(4552, 1)
MAKE_LITERAL_RATIONAL(4553, 1)
MAKE_LITERAL_RATIONAL(4554, 1)
MAKE_LITERAL_RATIONAL(4555, 1)
MAKE_LITERAL_RATIONAL(4556, 1)
MAKE_LITERAL_RATIONAL(4557, 1)
MAKE_LITERAL_RATIONAL(4558, 1)
MAKE_LITERAL_RATIONAL(4559, 1)
MAKE_LITERAL_RATIONAL(4560, 1)
MAKE_LITERAL_RATIONAL(4561, 1)
MAKE_LITERAL_RATIONAL(4562, 1)
MAKE_LITERAL_RATIONAL(4563, 1)
MAKE_LITERAL_RATIONAL(4564, 1)
MAKE_LITERAL_RATIONAL(4565, 1)
MAKE_LITERAL_RATIONAL(4566, 1)
MAKE_LITERAL_RATIONAL(4567, 1)
MAKE_LITERAL_RATIONAL(4568, 1)
MAKE_LITERAL_RATIONAL(4569, 1)
MAKE_LITERAL_RATIONAL(4570, 1)
MAKE_LITERAL_RATIONAL(4571, 1)
MAKE_LITERAL_RATIONAL(4572, 1)
MAKE_LITERAL_RATIONAL(4573, 1)
MAKE_LITERAL_RATIONAL(4574, 1)
MAKE_LITERAL_RATIONAL(4575, 1)
MAKE_LITERAL_RATIONAL(4576, 1)
MAKE_LITERAL_RATIONAL(4577, 1)
MAKE_LITERAL_RATIONAL(4578, 1)
MAKE_LITERAL_RATIONAL(4579, 1)
MAKE_LITERAL_RATIONAL(4580, 1)
MAKE_LITERAL_RATIONAL(4581, 1)
MAKE_LITERAL_RATIONAL(4582, 1)
MAKE_LITERAL_RATIONAL(4583, 1)
MAKE_LITERAL_RATIONAL(4584, 1)
MAKE_LITERAL_RATIONAL(4585, 1)
MAKE_LITERAL_RATIONAL(4586, 1)
MAKE_LITERAL_RATIONAL(4587, 1)
MAKE_LITERAL_RATIONAL(4588, 1)
MAKE_LITERAL_RATIONAL(4589, 1)
MAKE_LITERAL_RATIONAL(4590, 1)
MAKE_LITERAL_RATIONAL(4591, 1)
MAKE_LITERAL_RATIONAL(4592, 1)
MAKE_LITERAL_RATIONAL(4593, 1)
MAKE_LITERAL_RATIONAL(4594, 1)
MAKE_LITERAL_RATIONAL(4595, 1)
MAKE_LITERAL_RATIONAL(4596, 1)
MAKE_LITERAL_RATIONAL(4597, 1)
MAKE_LITERAL_RATIONAL(4598, 1)
MAKE_LITERAL_RATIONAL(4599, 1)
MAKE_LITERAL_RATIONAL(4600, 1)
MAKE_LITERAL_RATIONAL(4601, 1)
MAKE_LITERAL_RATIONAL(4602, 1)
MAKE_LITERAL_RATIONAL(4603, 1)
MAKE_LITERAL_RATIONAL(4604, 1)
MAKE_LITERAL_RATIONAL(4605, 1)
MAKE_LITERAL_RATIONAL(4606, 1)
MAKE_LITERAL_RATIONAL(4607, 1)
MAKE_LITERAL_RATIONAL(4608, 1)
MAKE_LITERAL_RATIONAL(4609, 1)
MAKE_LITERAL_RATIONAL(4610, 1)
MAKE_LITERAL_RATIONAL(4611, 1)
MAKE_LITERAL_RATIONAL(4612, 1)
MAKE_LITERAL_RATIONAL(4613, 1)
MAKE_LITERAL_RATIONAL(4614, 1)
MAKE_LITERAL_RATIONAL(4615, 1)
MAKE_LITERAL_RATIONAL(4616, 1)
MAKE_LITERAL_RATIONAL(4617, 1)
MAKE_LITERAL_RATIONAL(4618, 1)
MAKE_LITERAL_RATIONAL(4619, 1)
MAKE_LITERAL_RATIONAL(4620, 1)
MAKE_LITERAL_RATIONAL(4621, 1)
MAKE_LITERAL_RATIONAL(4622, 1)
MAKE_LITERAL_RATIONAL(4623, 1)
MAKE_LITERAL_RATIONAL(4624, 1)
MAKE_LITERAL_RATIONAL(4625, 1)
MAKE_LITERAL_RATIONAL(4626, 1)
MAKE_LITERAL_RATIONAL(4627, 1)
MAKE_LITERAL_RATIONAL(4628, 1)
MAKE_LITERAL_RATIONAL(4629, 1)
MAKE_LITERAL_RATIONAL(4630, 1)
MAKE_LITERAL_RATIONAL(4631, 1)
MAKE_LITERAL_RATIONAL(4632, 1)
MAKE_LITERAL_RATIONAL(4633, 1)
MAKE_LITERAL_RATIONAL(4634, 1)
MAKE_LITERAL_RATIONAL(4635, 1)
MAKE_LITERAL_RATIONAL(4636, 1)
MAKE_LITERAL_RATIONAL(4637, 1)
MAKE_LITERAL_RATIONAL(4638, 1)
MAKE_LITERAL_RATIONAL(4639, 1)
MAKE_LITERAL_RATIONAL(4640, 1)
MAKE_LITERAL_RATIONAL(4641, 1)
MAKE_LITERAL_RATIONAL(4642, 1)
MAKE_LITERAL_RATIONAL(4643, 1)
MAKE_LITERAL_RATIONAL(4644, 1)
MAKE_LITERAL_RATIONAL(4645, 1)
MAKE_LITERAL_RATIONAL(4646, 1)
MAKE_LITERAL_RATIONAL(4647, 1)
MAKE_LITERAL_RATIONAL(4648, 1)
MAKE_LITERAL_RATIONAL(4649, 1)
MAKE_LITERAL_RATIONAL(4650, 1)
MAKE_LITERAL_RATIONAL(4651, 1)
MAKE_LITERAL_RATIONAL(4652, 1)
MAKE_LITERAL_RATIONAL(4653, 1)
MAKE_LITERAL_RATIONAL(4654, 1)
MAKE_LITERAL_RATIONAL(4655, 1)
MAKE_LITERAL_RATIONAL(4656, 1)
MAKE_LITERAL_RATIONAL(4657, 1)
MAKE_LITERAL_RATIONAL(4658, 1)
MAKE_LITERAL_RATIONAL(4659, 1)
MAKE_LITERAL_RATIONAL(4660, 1)
MAKE_LITERAL_RATIONAL(4661, 1)
MAKE_LITERAL_RATIONAL(4662, 1)
MAKE_LITERAL_RATIONAL(4663, 1)
MAKE_LITERAL_RATIONAL(4664, 1)
MAKE_LITERAL_RATIONAL(4665, 1)
MAKE_LITERAL_RATIONAL(4666, 1)
MAKE_LITERAL_RATIONAL(4667, 1)
MAKE_LITERAL_RATIONAL(4668, 1)
MAKE_LITERAL_RATIONAL(4669, 1)
MAKE_LITERAL_RATIONAL(4670, 1)
MAKE_LITERAL_RATIONAL(4671, 1)
MAKE_LITERAL_RATIONAL(4672, 1)
MAKE_LITERAL_RATIONAL(4673, 1)
MAKE_LITERAL_RATIONAL(4674, 1)
MAKE_LITERAL_RATIONAL(4675, 1)
MAKE_LITERAL_RATIONAL(4676, 1)
MAKE_LITERAL_RATIONAL(4677, 1)
MAKE_LITERAL_RATIONAL(4678, 1)
MAKE_LITERAL_RATIONAL(4679, 1)
MAKE_LITERAL_RATIONAL(4680, 1)
MAKE_LITERAL_RATIONAL(4681, 1)
MAKE_LITERAL_RATIONAL(4682, 1)
MAKE_LITERAL_RATIONAL(4683, 1)
MAKE_LITERAL_RATIONAL(4684, 1)
MAKE_LITERAL_RATIONAL(4685, 1)
MAKE_LITERAL_RATIONAL(4686, 1)
MAKE_LITERAL_RATIONAL(4687, 1)
MAKE_LITERAL_RATIONAL(4688, 1)
MAKE_LITERAL_RATIONAL(4689, 1)
MAKE_LITERAL_RATIONAL(4690, 1)
MAKE_LITERAL_RATIONAL(4691, 1)
MAKE_LITERAL_RATIONAL(4692, 1)
MAKE_LITERAL_RATIONAL(4693, 1)
MAKE_LITERAL_RATIONAL(4694, 1)
MAKE_LITERAL_RATIONAL(4695, 1)
MAKE_LITERAL_RATIONAL(4696, 1)
MAKE_LITERAL_RATIONAL(4697, 1)
MAKE_LITERAL_RATIONAL(4698, 1)
MAKE_LITERAL_RATIONAL(4699, 1)
MAKE_LITERAL_RATIONAL(4700, 1)
MAKE_LITERAL_RATIONAL(4701, 1)
MAKE_LITERAL_RATIONAL(4702, 1)
MAKE_LITERAL_RATIONAL(4703, 1)
MAKE_LITERAL_RATIONAL(4704, 1)
MAKE_LITERAL_RATIONAL(4705, 1)
MAKE_LITERAL_RATIONAL(4706, 1)
MAKE_LITERAL_RATIONAL(4707, 1)
MAKE_LITERAL_RATIONAL(4708, 1)
MAKE_LITERAL_RATIONAL(4709, 1)
MAKE_LITERAL_RATIONAL(4710, 1)
MAKE_LITERAL_RATIONAL(4711, 1)
MAKE_LITERAL_RATIONAL(4712, 1)
MAKE_LITERAL_RATIONAL(4713, 1)
MAKE_LITERAL_RATIONAL(4714, 1)
MAKE_LITERAL_RATIONAL(4715, 1)
MAKE_LITERAL_RATIONAL(4716, 1)
MAKE_LITERAL_RATIONAL(4717, 1)
MAKE_LITERAL_RATIONAL(4718, 1)
MAKE_LITERAL_RATIONAL(4719, 1)
MAKE_LITERAL_RATIONAL(4720, 1)
MAKE_LITERAL_RATIONAL(4721, 1)
MAKE_LITERAL_RATIONAL(4722, 1)
MAKE_LITERAL_RATIONAL(4723, 1)
MAKE_LITERAL_RATIONAL(4724, 1)
MAKE_LITERAL_RATIONAL(4725, 1)
MAKE_LITERAL_RATIONAL(4726, 1)
MAKE_LITERAL_RATIONAL(4727, 1)
MAKE_LITERAL_RATIONAL(4728, 1)
MAKE_LITERAL_RATIONAL(4729, 1)
MAKE_LITERAL_RATIONAL(4730, 1)
MAKE_LITERAL_RATIONAL(4731, 1)
MAKE_LITERAL_RATIONAL(4732, 1)
MAKE_LITERAL_RATIONAL(4733, 1)
MAKE_LITERAL_RATIONAL(4734, 1)
MAKE_LITERAL_RATIONAL(4735, 1)
MAKE_LITERAL_RATIONAL(4736, 1)
MAKE_LITERAL_RATIONAL(4737, 1)
MAKE_LITERAL_RATIONAL(4738, 1)
MAKE_LITERAL_RATIONAL(4739, 1)
MAKE_LITERAL_RATIONAL(4740, 1)
MAKE_LITERAL_RATIONAL(4741, 1)
MAKE_LITERAL_RATIONAL(4742, 1)
MAKE_LITERAL_RATIONAL(4743, 1)
MAKE_LITERAL_RATIONAL(4744, 1)
MAKE_LITERAL_RATIONAL(4745, 1)
MAKE_LITERAL_RATIONAL(4746, 1)
MAKE_LITERAL_RATIONAL(4747, 1)
MAKE_LITERAL_RATIONAL(4748, 1)
MAKE_LITERAL_RATIONAL(4749, 1)
MAKE_LITERAL_RATIONAL(4750, 1)
MAKE_LITERAL_RATIONAL(4751, 1)
MAKE_LITERAL_RATIONAL(4752, 1)
MAKE_LITERAL_RATIONAL(4753, 1)
MAKE_LITERAL_RATIONAL(4754, 1)
MAKE_LITERAL_RATIONAL(4755, 1)
MAKE_LITERAL_RATIONAL(4756, 1)
MAKE_LITERAL_RATIONAL(4757, 1)
MAKE_LITERAL_RATIONAL(4758, 1)
MAKE_LITERAL_RATIONAL(4759, 1)
MAKE_LITERAL_RATIONAL(4760, 1)
MAKE_LITERAL_RATIONAL(4761, 1)
MAKE_LITERAL_RATIONAL(4762, 1)
MAKE_LITERAL_RATIONAL(4763, 1)
MAKE_LITERAL_RATIONAL(4764, 1)
MAKE_LITERAL_RATIONAL(4765, 1)
MAKE_LITERAL_RATIONAL(4766, 1)
MAKE_LITERAL_RATIONAL(4767, 1)
MAKE_LITERAL_RATIONAL(4768, 1)
MAKE_LITERAL_RATIONAL(4769, 1)
MAKE_LITERAL_RATIONAL(4770, 1)
MAKE_LITERAL_RATIONAL(4771, 1)
MAKE_LITERAL_RATIONAL(4772, 1)
MAKE_LITERAL_RATIONAL(4773, 1)
MAKE_LITERAL_RATIONAL(4774, 1)
MAKE_LITERAL_RATIONAL(4775, 1)
MAKE_LITERAL_RATIONAL(4776, 1)
MAKE_LITERAL_RATIONAL(4777, 1)
MAKE_LITERAL_RATIONAL(4778, 1)
MAKE_LITERAL_RATIONAL(4779, 1)
MAKE_LITERAL_RATIONAL(4780, 1)
MAKE_LITERAL_RATIONAL(4781, 1)
MAKE_LITERAL_RATIONAL(4782, 1)
MAKE_LITERAL_RATIONAL(4783, 1)
MAKE_LITERAL_RATIONAL(4784, 1)
MAKE_LITERAL_RATIONAL(4785, 1)
MAKE_LITERAL_RATIONAL(4786, 1)
MAKE_LITERAL_RATIONAL(4787, 1)
MAKE_LITERAL_RATIONAL(4788, 1)
MAKE_LITERAL_RATIONAL(4789, 1)
MAKE_LITERAL_RATIONAL(4790, 1)
MAKE_LITERAL_RATIONAL(4791, 1)
MAKE_LITERAL_RATIONAL(4792, 1)
MAKE_LITERAL_RATIONAL(4793, 1)
MAKE_LITERAL_RATIONAL(4794, 1)
MAKE_LITERAL_RATIONAL(4795, 1)
MAKE_LITERAL_RATIONAL(4796, 1)
MAKE_LITERAL_RATIONAL(4797, 1)
MAKE_LITERAL_RATIONAL(4798, 1)
MAKE_LITERAL_RATIONAL(4799, 1)
MAKE_LITERAL_RATIONAL(4800, 1)
MAKE_LITERAL_RATIONAL(4801, 1)
MAKE_LITERAL_RATIONAL(4802, 1)
MAKE_LITERAL_RATIONAL(4803, 1)
MAKE_LITERAL_RATIONAL(4804, 1)
MAKE_LITERAL_RATIONAL(4805, 1)
MAKE_LITERAL_RATIONAL(4806, 1)
MAKE_LITERAL_RATIONAL(4807, 1)
MAKE_LITERAL_RATIONAL(4808, 1)
MAKE_LITERAL_RATIONAL(4809, 1)
MAKE_LITERAL_RATIONAL(4810, 1)
MAKE_LITERAL_RATIONAL(4811, 1)
MAKE_LITERAL_RATIONAL(4812, 1)
MAKE_LITERAL_RATIONAL(4813, 1)
MAKE_LITERAL_RATIONAL(4814, 1)
MAKE_LITERAL_RATIONAL(4815, 1)
MAKE_LITERAL_RATIONAL(4816, 1)
MAKE_LITERAL_RATIONAL(4817, 1)
MAKE_LITERAL_RATIONAL(4818, 1)
MAKE_LITERAL_RATIONAL(4819, 1)
MAKE_LITERAL_RATIONAL(4820, 1)
MAKE_LITERAL_RATIONAL(4821, 1)
MAKE_LITERAL_RATIONAL(4822, 1)
MAKE_LITERAL_RATIONAL(4823, 1)
MAKE_LITERAL_RATIONAL(4824, 1)
MAKE_LITERAL_RATIONAL(4825, 1)
MAKE_LITERAL_RATIONAL(4826, 1)
MAKE_LITERAL_RATIONAL(4827, 1)
MAKE_LITERAL_RATIONAL(4828, 1)
MAKE_LITERAL_RATIONAL(4829, 1)
MAKE_LITERAL_RATIONAL(4830, 1)
MAKE_LITERAL_RATIONAL(4831, 1)
MAKE_LITERAL_RATIONAL(4832, 1)
MAKE_LITERAL_RATIONAL(4833, 1)
MAKE_LITERAL_RATIONAL(4834, 1)
MAKE_LITERAL_RATIONAL(4835, 1)
MAKE_LITERAL_RATIONAL(4836, 1)
MAKE_LITERAL_RATIONAL(4837, 1)
MAKE_LITERAL_RATIONAL(4838, 1)
MAKE_LITERAL_RATIONAL(4839, 1)
MAKE_LITERAL_RATIONAL(4840, 1)
MAKE_LITERAL_RATIONAL(4841, 1)
MAKE_LITERAL_RATIONAL(4842, 1)
MAKE_LITERAL_RATIONAL(4843, 1)
MAKE_LITERAL_RATIONAL(4844, 1)
MAKE_LITERAL_RATIONAL(4845, 1)
MAKE_LITERAL_RATIONAL(4846, 1)
MAKE_LITERAL_RATIONAL(4847, 1)
MAKE_LITERAL_RATIONAL(4848, 1)
MAKE_LITERAL_RATIONAL(4849, 1)
MAKE_LITERAL_RATIONAL(4850, 1)
MAKE_LITERAL_RATIONAL(4851, 1)
MAKE_LITERAL_RATIONAL(4852, 1)
MAKE_LITERAL_RATIONAL(4853, 1)
MAKE_LITERAL_RATIONAL(4854, 1)
MAKE_LITERAL_RATIONAL(4855, 1)
MAKE_LITERAL_RATIONAL(4856, 1)
MAKE_LITERAL_RATIONAL(4857, 1)
MAKE_LITERAL_RATIONAL(4858, 1)
MAKE_LITERAL_RATIONAL(4859, 1)
MAKE_LITERAL_RATIONAL(4860, 1)
MAKE_LITERAL_RATIONAL(4861, 1)
MAKE_LITERAL_RATIONAL(4862, 1)
MAKE_LITERAL_RATIONAL(4863, 1)
MAKE_LITERAL_RATIONAL(4864, 1)
MAKE_LITERAL_RATIONAL(4865, 1)
MAKE_LITERAL_RATIONAL(4866, 1)
MAKE_LITERAL_RATIONAL(4867, 1)
MAKE_LITERAL_RATIONAL(4868, 1)
MAKE_LITERAL_RATIONAL(4869, 1)
MAKE_LITERAL_RATIONAL(4870, 1)
MAKE_LITERAL_RATIONAL(4871, 1)
MAKE_LITERAL_RATIONAL(4872, 1)
MAKE_LITERAL_RATIONAL(4873, 1)
MAKE_LITERAL_RATIONAL(4874, 1)
MAKE_LITERAL_RATIONAL(4875, 1)
MAKE_LITERAL_RATIONAL(4876, 1)
MAKE_LITERAL_RATIONAL(4877, 1)
MAKE_LITERAL_RATIONAL(4878, 1)
MAKE_LITERAL_RATIONAL(4879, 1)
MAKE_LITERAL_RATIONAL(4880, 1)
MAKE_LITERAL_RATIONAL(4881, 1)
MAKE_LITERAL_RATIONAL(4882, 1)
MAKE_LITERAL_RATIONAL(4883, 1)
MAKE_LITERAL_RATIONAL(4884, 1)
MAKE_LITERAL_RATIONAL(4885, 1)
MAKE_LITERAL_RATIONAL(4886, 1)
MAKE_LITERAL_RATIONAL(4887, 1)
MAKE_LITERAL_RATIONAL(4888, 1)
MAKE_LITERAL_RATIONAL(4889, 1)
MAKE_LITERAL_RATIONAL(4890, 1)
MAKE_LITERAL_RATIONAL(4891, 1)
MAKE_LITERAL_RATIONAL(4892, 1)
MAKE_LITERAL_RATIONAL(4893, 1)
MAKE_LITERAL_RATIONAL(4894, 1)
MAKE_LITERAL_RATIONAL(4895, 1)
MAKE_LITERAL_RATIONAL(4896, 1)
MAKE_LITERAL_RATIONAL(4897, 1)
MAKE_LITERAL_RATIONAL(4898, 1)
MAKE_LITERAL_RATIONAL(4899, 1)
MAKE_LITERAL_RATIONAL(4900, 1)
MAKE_LITERAL_RATIONAL(4901, 1)
MAKE_LITERAL_RATIONAL(4902, 1)
MAKE_LITERAL_RATIONAL(4903, 1)
MAKE_LITERAL_RATIONAL(4904, 1)
MAKE_LITERAL_RATIONAL(4905, 1)
MAKE_LITERAL_RATIONAL(4906, 1)
MAKE_LITERAL_RATIONAL(4907, 1)
MAKE_LITERAL_RATIONAL(4908, 1)
MAKE_LITERAL_RATIONAL(4909, 1)
MAKE_LITERAL_RATIONAL(4910, 1)
MAKE_LITERAL_RATIONAL(4911, 1)
MAKE_LITERAL_RATIONAL(4912, 1)
MAKE_LITERAL_RATIONAL(4913, 1)
MAKE_LITERAL_RATIONAL(4914, 1)
MAKE_LITERAL_RATIONAL(4915, 1)
MAKE_LITERAL_RATIONAL(4916, 1)
MAKE_LITERAL_RATIONAL(4917, 1)
MAKE_LITERAL_RATIONAL(4918, 1)
MAKE_LITERAL_RATIONAL(4919, 1)
MAKE_LITERAL_RATIONAL(4920, 1)
MAKE_LITERAL_RATIONAL(4921, 1)
MAKE_LITERAL_RATIONAL(4922, 1)
MAKE_LITERAL_RATIONAL(4923, 1)
MAKE_LITERAL_RATIONAL(4924, 1)
MAKE_LITERAL_RATIONAL(4925, 1)
MAKE_LITERAL_RATIONAL(4926, 1)
MAKE_LITERAL_RATIONAL(4927, 1)
MAKE_LITERAL_RATIONAL(4928, 1)
MAKE_LITERAL_RATIONAL(4929, 1)
MAKE_LITERAL_RATIONAL(4930, 1)
MAKE_LITERAL_RATIONAL(4931, 1)
MAKE_LITERAL_RATIONAL(4932, 1)
MAKE_LITERAL_RATIONAL(4933, 1)
MAKE_LITERAL_RATIONAL(4934, 1)
MAKE_LITERAL_RATIONAL(4935, 1)
MAKE_LITERAL_RATIONAL(4936, 1)
MAKE_LITERAL_RATIONAL(4937, 1)
MAKE_LITERAL_RATIONAL(4938, 1)
MAKE_LITERAL_RATIONAL(4939, 1)
MAKE_LITERAL_RATIONAL(4940, 1)
MAKE_LITERAL_RATIONAL(4941, 1)
MAKE_LITERAL_RATIONAL(4942, 1)
MAKE_LITERAL_RATIONAL(4943, 1)
MAKE_LITERAL_RATIONAL(4944, 1)
MAKE_LITERAL_RATIONAL(4945, 1)
MAKE_LITERAL_RATIONAL(4946, 1)
MAKE_LITERAL_RATIONAL(4947, 1)
MAKE_LITERAL_RATIONAL(4948, 1)
MAKE_LITERAL_RATIONAL(4949, 1)
MAKE_LITERAL_RATIONAL(4950, 1)
MAKE_LITERAL_RATIONAL(4951, 1)
MAKE_LITERAL_RATIONAL(4952, 1)
MAKE_LITERAL_RATIONAL(4953, 1)
MAKE_LITERAL_RATIONAL(4954, 1)
MAKE_LITERAL_RATIONAL(4955, 1)
MAKE_LITERAL_RATIONAL(4956, 1)
MAKE_LITERAL_RATIONAL(4957, 1)
MAKE_LITERAL_RATIONAL(4958, 1)
MAKE_LITERAL_RATIONAL(4959, 1)
MAKE_LITERAL_RATIONAL(4960, 1)
MAKE_LITERAL_RATIONAL(4961, 1)
MAKE_LITERAL_RATIONAL(4962, 1)
MAKE_LITERAL_RATIONAL(4963, 1)
MAKE_LITERAL_RATIONAL(4964, 1)
MAKE_LITERAL_RATIONAL(4965, 1)
MAKE_LITERAL_RATIONAL(4966, 1)
MAKE_LITERAL_RATIONAL(4967, 1)
MAKE_LITERAL_RATIONAL(4968, 1)
MAKE_LITERAL_RATIONAL(4969, 1)
MAKE_LITERAL_RATIONAL(4970, 1)
MAKE_LITERAL_RATIONAL(4971, 1)
MAKE_LITERAL_RATIONAL(4972, 1)
MAKE_LITERAL_RATIONAL(4973, 1)
MAKE_LITERAL_RATIONAL(4974, 1)
MAKE_LITERAL_RATIONAL(4975, 1)
MAKE_LITERAL_RATIONAL(4976, 1)
MAKE_LITERAL_RATIONAL(4977, 1)
MAKE_LITERAL_RATIONAL(4978, 1)
MAKE_LITERAL_RATIONAL(4979, 1)
MAKE_LITERAL_RATIONAL(4980, 1)
MAKE_LITERAL_RATIONAL(4981, 1)
MAKE_LITERAL_RATIONAL(4982, 1)
MAKE_LITERAL_RATIONAL(4983, 1)
MAKE_LITERAL_RATIONAL(4984, 1)
MAKE_LITERAL_RATIONAL(4985, 1)
MAKE_LITERAL_RATIONAL(4986, 1)
MAKE_LITERAL_RATIONAL(4987, 1)
MAKE_LITERAL_RATIONAL(4988, 1)
MAKE_LITERAL_RATIONAL(4989, 1)
MAKE_LITERAL_RATIONAL(4990, 1)
MAKE_LITERAL_RATIONAL(4991, 1)
MAKE_LITERAL_RATIONAL(4992, 1)
MAKE_LITERAL_RATIONAL(4993, 1)
MAKE_LITERAL_RATIONAL(4994, 1)
MAKE_LITERAL_RATIONAL(4995, 1)
MAKE_LITERAL_RATIONAL(4996, 1)
MAKE_LITERAL_RATIONAL(4997, 1)
MAKE_LITERAL_RATIONAL(4998, 1)
MAKE_LITERAL_RATIONAL(4999, 1)
MAKE_LITERAL_RATIONAL(5000, 1)
MAKE_LITERAL_RATIONAL(5001, 1)
MAKE_LITERAL_RATIONAL(5002, 1)
MAKE_LITERAL_RATIONAL(5003, 1)
MAKE_LITERAL_RATIONAL(5004, 1)
MAKE_LITERAL_RATIONAL(5005, 1)
MAKE_LITERAL_RATIONAL(5006, 1)
MAKE_LITERAL_RATIONAL(5007, 1)
MAKE_LITERAL_RATIONAL(5008, 1)
MAKE_LITERAL_RATIONAL(5009, 1)
MAKE_LITERAL_RATIONAL(5010, 1)
MAKE_LITERAL_RATIONAL(5011, 1)
MAKE_LITERAL_RATIONAL(5012, 1)
MAKE_LITERAL_RATIONAL(5013, 1)
MAKE_LITERAL_RATIONAL(5014, 1)
MAKE_LITERAL_RATIONAL(5015, 1)
MAKE_LITERAL_RATIONAL(5016, 1)
MAKE_LITERAL_RATIONAL(5017, 1)
MAKE_LITERAL_RATIONAL(5018, 1)
MAKE_LITERAL_RATIONAL(5019, 1)
MAKE_LITERAL_RATIONAL(5020, 1)
MAKE_LITERAL_RATIONAL(5021, 1)
MAKE_LITERAL_RATIONAL(5022, 1)
MAKE_LITERAL_RATIONAL(5023, 1)
MAKE_LITERAL_RATIONAL(5024, 1)
MAKE_LITERAL_RATIONAL(5025, 1)
MAKE_LITERAL_RATIONAL(5026, 1)
MAKE_LITERAL_RATIONAL(5027, 1)
MAKE_LITERAL_RATIONAL(5028, 1)
MAKE_LITERAL_RATIONAL(5029, 1)
MAKE_LITERAL_RATIONAL(5030, 1)
MAKE_LITERAL_RATIONAL(5031, 1)
MAKE_LITERAL_RATIONAL(5032, 1)
MAKE_LITERAL_RATIONAL(5033, 1)
MAKE_LITERAL_RATIONAL(5034, 1)
MAKE_LITERAL_RATIONAL(5035, 1)
MAKE_LITERAL_RATIONAL(5036, 1)
MAKE_LITERAL_RATIONAL(5037, 1)
MAKE_LITERAL_RATIONAL(5038, 1)
MAKE_LITERAL_RATIONAL(5039, 1)
MAKE_LITERAL_RATIONAL(5040, 1)
MAKE_LITERAL_RATIONAL(5041, 1)
MAKE_LITERAL_RATIONAL(5042, 1)
MAKE_LITERAL_RATIONAL(5043, 1)
MAKE_LITERAL_RATIONAL(5044, 1)
MAKE_LITERAL_RATIONAL(5045, 1)
MAKE_LITERAL_RATIONAL(5046, 1)
MAKE_LITERAL_RATIONAL(5047, 1)
MAKE_LITERAL_RATIONAL(5048, 1)
MAKE_LITERAL_RATIONAL(5049, 1)
MAKE_LITERAL_RATIONAL(5050, 1)
MAKE_LITERAL_RATIONAL(5051, 1)
MAKE_LITERAL_RATIONAL(5052, 1)
MAKE_LITERAL_RATIONAL(5053, 1)
MAKE_LITERAL_RATIONAL(5054, 1)
MAKE_LITERAL_RATIONAL(5055, 1)
MAKE_LITERAL_RATIONAL(5056, 1)
MAKE_LITERAL_RATIONAL(5057, 1)
MAKE_LITERAL_RATIONAL(5058, 1)
MAKE_LITERAL_RATIONAL(5059, 1)
MAKE_LITERAL_RATIONAL(5060, 1)
MAKE_LITERAL_RATIONAL(5061, 1)
MAKE_LITERAL_RATIONAL(5062, 1)
MAKE_LITERAL_RATIONAL(5063, 1)
MAKE_LITERAL_RATIONAL(5064, 1)
MAKE_LITERAL_RATIONAL(5065, 1)
MAKE_LITERAL_RATIONAL(5066, 1)
MAKE_LITERAL_RATIONAL(5067, 1)
MAKE_LITERAL_RATIONAL(5068, 1)
MAKE_LITERAL_RATIONAL(5069, 1)
MAKE_LITERAL_RATIONAL(5070, 1)
MAKE_LITERAL_RATIONAL(5071, 1)
MAKE_LITERAL_RATIONAL(5072, 1)
MAKE_LITERAL_RATIONAL(5073, 1)
MAKE_LITERAL_RATIONAL(5074, 1)
MAKE_LITERAL_RATIONAL(5075, 1)
MAKE_LITERAL_RATIONAL(5076, 1)
MAKE_LITERAL_RATIONAL(5077, 1)
MAKE_LITERAL_RATIONAL(5078, 1)
MAKE_LITERAL_RATIONAL(5079, 1)
MAKE_LITERAL_RATIONAL(5080, 1)
MAKE_LITERAL_RATIONAL(5081, 1)
MAKE_LITERAL_RATIONAL(5082, 1)
MAKE_LITERAL_RATIONAL(5083, 1)
MAKE_LITERAL_RATIONAL(5084, 1)
MAKE_LITERAL_RATIONAL(5085, 1)
MAKE_LITERAL_RATIONAL(5086, 1)
MAKE_LITERAL_RATIONAL(5087, 1)
MAKE_LITERAL_RATIONAL(5088, 1)
MAKE_LITERAL_RATIONAL(5089, 1)
MAKE_LITERAL_RATIONAL(5090, 1)
MAKE_LITERAL_RATIONAL(5091, 1)
MAKE_LITERAL_RATIONAL(5092, 1)
MAKE_LITERAL_RATIONAL(5093, 1)
MAKE_LITERAL_RATIONAL(5094, 1)
MAKE_LITERAL_RATIONAL(5095, 1)
MAKE_LITERAL_RATIONAL(5096, 1)
MAKE_LITERAL_RATIONAL(5097, 1)
MAKE_LITERAL_RATIONAL(5098, 1)
MAKE_LITERAL_RATIONAL(5099, 1)
MAKE_LITERAL_RATIONAL(5100, 1)
MAKE_LITERAL_RATIONAL(5101, 1)
MAKE_LITERAL_RATIONAL(5102, 1)
MAKE_LITERAL_RATIONAL(5103, 1)
MAKE_LITERAL_RATIONAL(5104, 1)
MAKE_LITERAL_RATIONAL(5105, 1)
MAKE_LITERAL_RATIONAL(5106, 1)
MAKE_LITERAL_RATIONAL(5107, 1)
MAKE_LITERAL_RATIONAL(5108, 1)
MAKE_LITERAL_RATIONAL(5109, 1)
MAKE_LITERAL_RATIONAL(5110, 1)
MAKE_LITERAL_RATIONAL(5111, 1)
MAKE_LITERAL_RATIONAL(5112, 1)
MAKE_LITERAL_RATIONAL(5113, 1)
MAKE_LITERAL_RATIONAL(5114, 1)
MAKE_LITERAL_RATIONAL(5115, 1)
MAKE_LITERAL_RATIONAL(5116, 1)
MAKE_LITERAL_RATIONAL(5117, 1)
MAKE_LITERAL_RATIONAL(5118, 1)
MAKE_LITERAL_RATIONAL(5119, 1)
MAKE_LITERAL_RATIONAL(5120, 1)
MAKE_LITERAL_RATIONAL(5121, 1)
MAKE_LITERAL_RATIONAL(5122, 1)
MAKE_LITERAL_RATIONAL(5123, 1)
MAKE_LITERAL_RATIONAL(5124, 1)
MAKE_LITERAL_RATIONAL(5125, 1)
MAKE_LITERAL_RATIONAL(5126, 1)
MAKE_LITERAL_RATIONAL(5127, 1)
MAKE_LITERAL_RATIONAL(5128, 1)
MAKE_LITERAL_RATIONAL(5129, 1)
MAKE_LITERAL_RATIONAL(5130, 1)
MAKE_LITERAL_RATIONAL(5131, 1)
MAKE_LITERAL_RATIONAL(5132, 1)
MAKE_LITERAL_RATIONAL(5133, 1)
MAKE_LITERAL_RATIONAL(5134, 1)
MAKE_LITERAL_RATIONAL(5135, 1)
MAKE_LITERAL_RATIONAL(5136, 1)
MAKE_LITERAL_RATIONAL(5137, 1)
MAKE_LITERAL_RATIONAL(5138, 1)
MAKE_LITERAL_RATIONAL(5139, 1)
MAKE_LITERAL_RATIONAL(5140, 1)
MAKE_LITERAL_RATIONAL(5141, 1)
MAKE_LITERAL_RATIONAL(5142, 1)
MAKE_LITERAL_RATIONAL(5143, 1)
MAKE_LITERAL_RATIONAL(5144, 1)
MAKE_LITERAL_RATIONAL(5145, 1)
MAKE_LITERAL_RATIONAL(5146, 1)
MAKE_LITERAL_RATIONAL(5147, 1)
MAKE_LITERAL_RATIONAL(5148, 1)
MAKE_LITERAL_RATIONAL(5149, 1)
MAKE_LITERAL_RATIONAL(5150, 1)
MAKE_LITERAL_RATIONAL(5151, 1)
MAKE_LITERAL_RATIONAL(5152, 1)
MAKE_LITERAL_RATIONAL(5153, 1)
MAKE_LITERAL_RATIONAL(5154, 1)
MAKE_LITERAL_RATIONAL(5155, 1)
MAKE_LITERAL_RATIONAL(5156, 1)
MAKE_LITERAL_RATIONAL(5157, 1)
MAKE_LITERAL_RATIONAL(5158, 1)
MAKE_LITERAL_RATIONAL(5159, 1)
MAKE_LITERAL_RATIONAL(5160, 1)
MAKE_LITERAL_RATIONAL(5161, 1)
MAKE_LITERAL_RATIONAL(5162, 1)
MAKE_LITERAL_RATIONAL(5163, 1)
MAKE_LITERAL_RATIONAL(5164, 1)
MAKE_LITERAL_RATIONAL(5165, 1)
MAKE_LITERAL_RATIONAL(5166, 1)
MAKE_LITERAL_RATIONAL(5167, 1)
MAKE_LITERAL_RATIONAL(5168, 1)
MAKE_LITERAL_RATIONAL(5169, 1)
MAKE_LITERAL_RATIONAL(5170, 1)
MAKE_LITERAL_RATIONAL(5171, 1)
MAKE_LITERAL_RATIONAL(5172, 1)
MAKE_LITERAL_RATIONAL(5173, 1)
MAKE_LITERAL_RATIONAL(5174, 1)
MAKE_LITERAL_RATIONAL(5175, 1)
MAKE_LITERAL_RATIONAL(5176, 1)
MAKE_LITERAL_RATIONAL(5177, 1)
MAKE_LITERAL_RATIONAL(5178, 1)
MAKE_LITERAL_RATIONAL(5179, 1)
MAKE_LITERAL_RATIONAL(5180, 1)
MAKE_LITERAL_RATIONAL(5181, 1)
MAKE_LITERAL_RATIONAL(5182, 1)
MAKE_LITERAL_RATIONAL(5183, 1)
MAKE_LITERAL_RATIONAL(5184, 1)
MAKE_LITERAL_RATIONAL(5185, 1)
MAKE_LITERAL_RATIONAL(5186, 1)
MAKE_LITERAL_RATIONAL(5187, 1)
MAKE_LITERAL_RATIONAL(5188, 1)
MAKE_LITERAL_RATIONAL(5189, 1)
MAKE_LITERAL_RATIONAL(5190, 1)
MAKE_LITERAL_RATIONAL(5191, 1)
MAKE_LITERAL_RATIONAL(5192, 1)
MAKE_LITERAL_RATIONAL(5193, 1)
MAKE_LITERAL_RATIONAL(5194, 1)
MAKE_LITERAL_RATIONAL(5195, 1)
MAKE_LITERAL_RATIONAL(5196, 1)
MAKE_LITERAL_RATIONAL(5197, 1)
MAKE_LITERAL_RATIONAL(5198, 1)
MAKE_LITERAL_RATIONAL(5199, 1)
MAKE_LITERAL_RATIONAL(5200, 1)
MAKE_LITERAL_RATIONAL(5201, 1)
MAKE_LITERAL_RATIONAL(5202, 1)
MAKE_LITERAL_RATIONAL(5203, 1)
MAKE_LITERAL_RATIONAL(5204, 1)
MAKE_LITERAL_RATIONAL(5205, 1)
MAKE_LITERAL_RATIONAL(5206, 1)
MAKE_LITERAL_RATIONAL(5207, 1)
MAKE_LITERAL_RATIONAL(5208, 1)
MAKE_LITERAL_RATIONAL(5209, 1)
MAKE_LITERAL_RATIONAL(5210, 1)
MAKE_LITERAL_RATIONAL(5211, 1)
MAKE_LITERAL_RATIONAL(5212, 1)
MAKE_LITERAL_RATIONAL(5213, 1)
MAKE_LITERAL_RATIONAL(5214, 1)
MAKE_LITERAL_RATIONAL(5215, 1)
MAKE_LITERAL_RATIONAL(5216, 1)
MAKE_LITERAL_RATIONAL(5217, 1)
MAKE_LITERAL_RATIONAL(5218, 1)
MAKE_LITERAL_RATIONAL(5219, 1)
MAKE_LITERAL_RATIONAL(5220, 1)
MAKE_LITERAL_RATIONAL(5221, 1)
MAKE_LITERAL_RATIONAL(5222, 1)
MAKE_LITERAL_RATIONAL(5223, 1)
MAKE_LITERAL_RATIONAL(5224, 1)
MAKE_LITERAL_RATIONAL(5225, 1)
MAKE_LITERAL_RATIONAL(5226, 1)
MAKE_LITERAL_RATIONAL(5227, 1)
MAKE_LITERAL_RATIONAL(5228, 1)
MAKE_LITERAL_RATIONAL(5229, 1)
MAKE_LITERAL_RATIONAL(5230, 1)
MAKE_LITERAL_RATIONAL(5231, 1)
MAKE_LITERAL_RATIONAL(5232, 1)
MAKE_LITERAL_RATIONAL(5233, 1)
MAKE_LITERAL_RATIONAL(5234, 1)
MAKE_LITERAL_RATIONAL(5235, 1)
MAKE_LITERAL_RATIONAL(5236, 1)
MAKE_LITERAL_RATIONAL(5237, 1)
MAKE_LITERAL_RATIONAL(5238, 1)
MAKE_LITERAL_RATIONAL(5239, 1)
MAKE_LITERAL_RATIONAL(5240, 1)
MAKE_LITERAL_RATIONAL(5241, 1)
MAKE_LITERAL_RATIONAL(5242, 1)
MAKE_LITERAL_RATIONAL(5243, 1)
MAKE_LITERAL_RATIONAL(5244, 1)
MAKE_LITERAL_RATIONAL(5245, 1)
MAKE_LITERAL_RATIONAL(5246, 1)
MAKE_LITERAL_RATIONAL(5247, 1)
MAKE_LITERAL_RATIONAL(5248, 1)
MAKE_LITERAL_RATIONAL(5249, 1)
MAKE_LITERAL_RATIONAL(5250, 1)
MAKE_LITERAL_RATIONAL(5251, 1)
MAKE_LITERAL_RATIONAL(5252, 1)
MAKE_LITERAL_RATIONAL(5253, 1)
MAKE_LITERAL_RATIONAL(5254, 1)
MAKE_LITERAL_RATIONAL(5255, 1)
MAKE_LITERAL_RATIONAL(5256, 1)
MAKE_LITERAL_RATIONAL(5257, 1)
MAKE_LITERAL_RATIONAL(5258, 1)
MAKE_LITERAL_RATIONAL(5259, 1)
MAKE_LITERAL_RATIONAL(5260, 1)
MAKE_LITERAL_RATIONAL(5261, 1)
MAKE_LITERAL_RATIONAL(5262, 1)
MAKE_LITERAL_RATIONAL(5263, 1)
MAKE_LITERAL_RATIONAL(5264, 1)
MAKE_LITERAL_RATIONAL(5265, 1)
MAKE_LITERAL_RATIONAL(5266, 1)
MAKE_LITERAL_RATIONAL(5267, 1)
MAKE_LITERAL_RATIONAL(5268, 1)
MAKE_LITERAL_RATIONAL(5269, 1)
MAKE_LITERAL_RATIONAL(5270, 1)
MAKE_LITERAL_RATIONAL(5271, 1)
MAKE_LITERAL_RATIONAL(5272, 1)
MAKE_LITERAL_RATIONAL(5273, 1)
MAKE_LITERAL_RATIONAL(5274, 1)
MAKE_LITERAL_RATIONAL(5275, 1)
MAKE_LITERAL_RATIONAL(5276, 1)
MAKE_LITERAL_RATIONAL(5277, 1)
MAKE_LITERAL_RATIONAL(5278, 1)
MAKE_LITERAL_RATIONAL(5279, 1)
MAKE_LITERAL_RATIONAL(5280, 1)
MAKE_LITERAL_RATIONAL(5281, 1)
MAKE_LITERAL_RATIONAL(5282, 1)
MAKE_LITERAL_RATIONAL(5283, 1)
MAKE_LITERAL_RATIONAL(5284, 1)
MAKE_LITERAL_RATIONAL(5285, 1)
MAKE_LITERAL_RATIONAL(5286, 1)
MAKE_LITERAL_RATIONAL(5287, 1)
MAKE_LITERAL_RATIONAL(5288, 1)
MAKE_LITERAL_RATIONAL(5289, 1)
MAKE_LITERAL_RATIONAL(5290, 1)
MAKE_LITERAL_RATIONAL(5291, 1)
MAKE_LITERAL_RATIONAL(5292, 1)
MAKE_LITERAL_RATIONAL(5293, 1)
MAKE_LITERAL_RATIONAL(5294, 1)
MAKE_LITERAL_RATIONAL(5295, 1)
MAKE_LITERAL_RATIONAL(5296, 1)
MAKE_LITERAL_RATIONAL(5297, 1)
MAKE_LITERAL_RATIONAL(5298, 1)
MAKE_LITERAL_RATIONAL(5299, 1)
MAKE_LITERAL_RATIONAL(5300, 1)
MAKE_LITERAL_RATIONAL(5301, 1)
MAKE_LITERAL_RATIONAL(5302, 1)
MAKE_LITERAL_RATIONAL(5303, 1)
MAKE_LITERAL_RATIONAL(5304, 1)
MAKE_LITERAL_RATIONAL(5305, 1)
MAKE_LITERAL_RATIONAL(5306, 1)
MAKE_LITERAL_RATIONAL(5307, 1)
MAKE_LITERAL_RATIONAL(5308, 1)
MAKE_LITERAL_RATIONAL(5309, 1)
MAKE_LITERAL_RATIONAL(5310, 1)
MAKE_LITERAL_RATIONAL(5311, 1)
MAKE_LITERAL_RATIONAL(5312, 1)
MAKE_LITERAL_RATIONAL(5313, 1)
MAKE_LITERAL_RATIONAL(5314, 1)
MAKE_LITERAL_RATIONAL(5315, 1)
MAKE_LITERAL_RATIONAL(5316, 1)
MAKE_LITERAL_RATIONAL(5317, 1)
MAKE_LITERAL_RATIONAL(5318, 1)
MAKE_LITERAL_RATIONAL(5319, 1)
MAKE_LITERAL_RATIONAL(5320, 1)
MAKE_LITERAL_RATIONAL(5321, 1)
MAKE_LITERAL_RATIONAL(5322, 1)
MAKE_LITERAL_RATIONAL(5323, 1)
MAKE_LITERAL_RATIONAL(5324, 1)
MAKE_LITERAL_RATIONAL(5325, 1)
MAKE_LITERAL_RATIONAL(5326, 1)
MAKE_LITERAL_RATIONAL(5327, 1)
MAKE_LITERAL_RATIONAL(5328, 1)
MAKE_LITERAL_RATIONAL(5329, 1)
MAKE_LITERAL_RATIONAL(5330, 1)
MAKE_LITERAL_RATIONAL(5331, 1)
MAKE_LITERAL_RATIONAL(5332, 1)
MAKE_LITERAL_RATIONAL(5333, 1)
MAKE_LITERAL_RATIONAL(5334, 1)
MAKE_LITERAL_RATIONAL(5335, 1)
MAKE_LITERAL_RATIONAL(5336, 1)
MAKE_LITERAL_RATIONAL(5337, 1)
MAKE_LITERAL_RATIONAL(5338, 1)
MAKE_LITERAL_RATIONAL(5339, 1)
MAKE_LITERAL_RATIONAL(5340, 1)
MAKE_LITERAL_RATIONAL(5341, 1)
MAKE_LITERAL_RATIONAL(5342, 1)
MAKE_LITERAL_RATIONAL(5343, 1)
MAKE_LITERAL_RATIONAL(5344, 1)
MAKE_LITERAL_RATIONAL(5345, 1)
MAKE_LITERAL_RATIONAL(5346, 1)
MAKE_LITERAL_RATIONAL(5347, 1)
MAKE_LITERAL_RATIONAL(5348, 1)
MAKE_LITERAL_RATIONAL(5349, 1)
MAKE_LITERAL_RATIONAL(5350, 1)
MAKE_LITERAL_RATIONAL(5351, 1)
MAKE_LITERAL_RATIONAL(5352, 1)
MAKE_LITERAL_RATIONAL(5353, 1)
MAKE_LITERAL_RATIONAL(5354, 1)
MAKE_LITERAL_RATIONAL(5355, 1)
MAKE_LITERAL_RATIONAL(5356, 1)
MAKE_LITERAL_RATIONAL(5357, 1)
MAKE_LITERAL_RATIONAL(5358, 1)
MAKE_LITERAL_RATIONAL(5359, 1)
MAKE_LITERAL_RATIONAL(5360, 1)
MAKE_LITERAL_RATIONAL(5361, 1)
MAKE_LITERAL_RATIONAL(5362, 1)
MAKE_LITERAL_RATIONAL(5363, 1)
MAKE_LITERAL_RATIONAL(5364, 1)
MAKE_LITERAL_RATIONAL(5365, 1)
MAKE_LITERAL_RATIONAL(5366, 1)
MAKE_LITERAL_RATIONAL(5367, 1)
MAKE_LITERAL_RATIONAL(5368, 1)
MAKE_LITERAL_RATIONAL(5369, 1)
MAKE_LITERAL_RATIONAL(5370, 1)
MAKE_LITERAL_RATIONAL(5371, 1)
MAKE_LITERAL_RATIONAL(5372, 1)
MAKE_LITERAL_RATIONAL(5373, 1)
MAKE_LITERAL_RATIONAL(5374, 1)
MAKE_LITERAL_RATIONAL(5375, 1)
MAKE_LITERAL_RATIONAL(5376, 1)
MAKE_LITERAL_RATIONAL(5377, 1)
MAKE_LITERAL_RATIONAL(5378, 1)
MAKE_LITERAL_RATIONAL(5379, 1)
MAKE_LITERAL_RATIONAL(5380, 1)
MAKE_LITERAL_RATIONAL(5381, 1)
MAKE_LITERAL_RATIONAL(5382, 1)
MAKE_LITERAL_RATIONAL(5383, 1)
MAKE_LITERAL_RATIONAL(5384, 1)
MAKE_LITERAL_RATIONAL(5385, 1)
MAKE_LITERAL_RATIONAL(5386, 1)
MAKE_LITERAL_RATIONAL(5387, 1)
MAKE_LITERAL_RATIONAL(5388, 1)
MAKE_LITERAL_RATIONAL(5389, 1)
MAKE_LITERAL_RATIONAL(5390, 1)
MAKE_LITERAL_RATIONAL(5391, 1)
MAKE_LITERAL_RATIONAL(5392, 1)
MAKE_LITERAL_RATIONAL(5393, 1)
MAKE_LITERAL_RATIONAL(5394, 1)
MAKE_LITERAL_RATIONAL(5395, 1)
MAKE_LITERAL_RATIONAL(5396, 1)
MAKE_LITERAL_RATIONAL(5397, 1)
MAKE_LITERAL_RATIONAL(5398, 1)
MAKE_LITERAL_RATIONAL(5399, 1)
MAKE_LITERAL_RATIONAL(5400, 1)
MAKE_LITERAL_RATIONAL(5401, 1)
MAKE_LITERAL_RATIONAL(5402, 1)
MAKE_LITERAL_RATIONAL(5403, 1)
MAKE_LITERAL_RATIONAL(5404, 1)
MAKE_LITERAL_RATIONAL(5405, 1)
MAKE_LITERAL_RATIONAL(5406, 1)
MAKE_LITERAL_RATIONAL(5407, 1)
MAKE_LITERAL_RATIONAL(5408, 1)
MAKE_LITERAL_RATIONAL(5409, 1)
MAKE_LITERAL_RATIONAL(5410, 1)
MAKE_LITERAL_RATIONAL(5411, 1)
MAKE_LITERAL_RATIONAL(5412, 1)
MAKE_LITERAL_RATIONAL(5413, 1)
MAKE_LITERAL_RATIONAL(5414, 1)
MAKE_LITERAL_RATIONAL(5415, 1)
MAKE_LITERAL_RATIONAL(5416, 1)
MAKE_LITERAL_RATIONAL(5417, 1)
MAKE_LITERAL_RATIONAL(5418, 1)
MAKE_LITERAL_RATIONAL(5419, 1)
MAKE_LITERAL_RATIONAL(5420, 1)
MAKE_LITERAL_RATIONAL(5421, 1)
MAKE_LITERAL_RATIONAL(5422, 1)
MAKE_LITERAL_RATIONAL(5423, 1)
MAKE_LITERAL_RATIONAL(5424, 1)
MAKE_LITERAL_RATIONAL(5425, 1)
MAKE_LITERAL_RATIONAL(5426, 1)
MAKE_LITERAL_RATIONAL(5427, 1)
MAKE_LITERAL_RATIONAL(5428, 1)
MAKE_LITERAL_RATIONAL(5429, 1)
MAKE_LITERAL_RATIONAL(5430, 1)
MAKE_LITERAL_RATIONAL(5431, 1)
MAKE_LITERAL_RATIONAL(5432, 1)
MAKE_LITERAL_RATIONAL(5433, 1)
MAKE_LITERAL_RATIONAL(5434, 1)
MAKE_LITERAL_RATIONAL(5435, 1)
MAKE_LITERAL_RATIONAL(5436, 1)
MAKE_LITERAL_RATIONAL(5437, 1)
MAKE_LITERAL_RATIONAL(5438, 1)
MAKE_LITERAL_RATIONAL(5439, 1)
MAKE_LITERAL_RATIONAL(5440, 1)
MAKE_LITERAL_RATIONAL(5441, 1)
MAKE_LITERAL_RATIONAL(5442, 1)
MAKE_LITERAL_RATIONAL(5443, 1)
MAKE_LITERAL_RATIONAL(5444, 1)
MAKE_LITERAL_RATIONAL(5445, 1)
MAKE_LITERAL_RATIONAL(5446, 1)
MAKE_LITERAL_RATIONAL(5447, 1)
MAKE_LITERAL_RATIONAL(5448, 1)
MAKE_LITERAL_RATIONAL(5449, 1)
MAKE_LITERAL_RATIONAL(5450, 1)
MAKE_LITERAL_RATIONAL(5451, 1)
MAKE_LITERAL_RATIONAL(5452, 1)
MAKE_LITERAL_RATIONAL(5453, 1)
MAKE_LITERAL_RATIONAL(5454, 1)
MAKE_LITERAL_RATIONAL(5455, 1)
MAKE_LITERAL_RATIONAL(5456, 1)
MAKE_LITERAL_RATIONAL(5457, 1)
MAKE_LITERAL_RATIONAL(5458, 1)
MAKE_LITERAL_RATIONAL(5459, 1)
MAKE_LITERAL_RATIONAL(5460, 1)
MAKE_LITERAL_RATIONAL(5461, 1)
MAKE_LITERAL_RATIONAL(5462, 1)
MAKE_LITERAL_RATIONAL(5463, 1)
MAKE_LITERAL_RATIONAL(5464, 1)
MAKE_LITERAL_RATIONAL(5465, 1)
MAKE_LITERAL_RATIONAL(5466, 1)
MAKE_LITERAL_RATIONAL(5467, 1)
MAKE_LITERAL_RATIONAL(5468, 1)
MAKE_LITERAL_RATIONAL(5469, 1)
MAKE_LITERAL_RATIONAL(5470, 1)
MAKE_LITERAL_RATIONAL(5471, 1)
MAKE_LITERAL_RATIONAL(5472, 1)
MAKE_LITERAL_RATIONAL(5473, 1)
MAKE_LITERAL_RATIONAL(5474, 1)
MAKE_LITERAL_RATIONAL(5475, 1)
MAKE_LITERAL_RATIONAL(5476, 1)
MAKE_LITERAL_RATIONAL(5477, 1)
MAKE_LITERAL_RATIONAL(5478, 1)
MAKE_LITERAL_RATIONAL(5479, 1)
MAKE_LITERAL_RATIONAL(5480, 1)
MAKE_LITERAL_RATIONAL(5481, 1)
MAKE_LITERAL_RATIONAL(5482, 1)
MAKE_LITERAL_RATIONAL(5483, 1)
MAKE_LITERAL_RATIONAL(5484, 1)
MAKE_LITERAL_RATIONAL(5485, 1)
MAKE_LITERAL_RATIONAL(5486, 1)
MAKE_LITERAL_RATIONAL(5487, 1)
MAKE_LITERAL_RATIONAL(5488, 1)
MAKE_LITERAL_RATIONAL(5489, 1)
MAKE_LITERAL_RATIONAL(5490, 1)
MAKE_LITERAL_RATIONAL(5491, 1)
MAKE_LITERAL_RATIONAL(5492, 1)
MAKE_LITERAL_RATIONAL(5493, 1)
MAKE_LITERAL_RATIONAL(5494, 1)
MAKE_LITERAL_RATIONAL(5495, 1)
MAKE_LITERAL_RATIONAL(5496, 1)
MAKE_LITERAL_RATIONAL(5497, 1)
MAKE_LITERAL_RATIONAL(5498, 1)
MAKE_LITERAL_RATIONAL(5499, 1)
MAKE_LITERAL_RATIONAL(5500, 1)
MAKE_LITERAL_RATIONAL(5501, 1)
MAKE_LITERAL_RATIONAL(5502, 1)
MAKE_LITERAL_RATIONAL(5503, 1)
MAKE_LITERAL_RATIONAL(5504, 1)
MAKE_LITERAL_RATIONAL(5505, 1)
MAKE_LITERAL_RATIONAL(5506, 1)
MAKE_LITERAL_RATIONAL(5507, 1)
MAKE_LITERAL_RATIONAL(5508, 1)
MAKE_LITERAL_RATIONAL(5509, 1)
MAKE_LITERAL_RATIONAL(5510, 1)
MAKE_LITERAL_RATIONAL(5511, 1)
MAKE_LITERAL_RATIONAL(5512, 1)
MAKE_LITERAL_RATIONAL(5513, 1)
MAKE_LITERAL_RATIONAL(5514, 1)
MAKE_LITERAL_RATIONAL(5515, 1)
MAKE_LITERAL_RATIONAL(5516, 1)
MAKE_LITERAL_RATIONAL(5517, 1)
MAKE_LITERAL_RATIONAL(5518, 1)
MAKE_LITERAL_RATIONAL(5519, 1)
MAKE_LITERAL_RATIONAL(5520, 1)
MAKE_LITERAL_RATIONAL(5521, 1)
MAKE_LITERAL_RATIONAL(5522, 1)
MAKE_LITERAL_RATIONAL(5523, 1)
MAKE_LITERAL_RATIONAL(5524, 1)
MAKE_LITERAL_RATIONAL(5525, 1)
MAKE_LITERAL_RATIONAL(5526, 1)
MAKE_LITERAL_RATIONAL(5527, 1)
MAKE_LITERAL_RATIONAL(5528, 1)
MAKE_LITERAL_RATIONAL(5529, 1)
MAKE_LITERAL_RATIONAL(5530, 1)
MAKE_LITERAL_RATIONAL(5531, 1)
MAKE_LITERAL_RATIONAL(5532, 1)
MAKE_LITERAL_RATIONAL(5533, 1)
MAKE_LITERAL_RATIONAL(5534, 1)
MAKE_LITERAL_RATIONAL(5535, 1)
MAKE_LITERAL_RATIONAL(5536, 1)
MAKE_LITERAL_RATIONAL(5537, 1)
MAKE_LITERAL_RATIONAL(5538, 1)
MAKE_LITERAL_RATIONAL(5539, 1)
MAKE_LITERAL_RATIONAL(5540, 1)
MAKE_LITERAL_RATIONAL(5541, 1)
MAKE_LITERAL_RATIONAL(5542, 1)
MAKE_LITERAL_RATIONAL(5543, 1)
MAKE_LITERAL_RATIONAL(5544, 1)
MAKE_LITERAL_RATIONAL(5545, 1)
MAKE_LITERAL_RATIONAL(5546, 1)
MAKE_LITERAL_RATIONAL(5547, 1)
MAKE_LITERAL_RATIONAL(5548, 1)
MAKE_LITERAL_RATIONAL(5549, 1)
MAKE_LITERAL_RATIONAL(5550, 1)
MAKE_LITERAL_RATIONAL(5551, 1)
MAKE_LITERAL_RATIONAL(5552, 1)
MAKE_LITERAL_RATIONAL(5553, 1)
MAKE_LITERAL_RATIONAL(5554, 1)
MAKE_LITERAL_RATIONAL(5555, 1)
MAKE_LITERAL_RATIONAL(5556, 1)
MAKE_LITERAL_RATIONAL(5557, 1)
MAKE_LITERAL_RATIONAL(5558, 1)
MAKE_LITERAL_RATIONAL(5559, 1)
MAKE_LITERAL_RATIONAL(5560, 1)
MAKE_LITERAL_RATIONAL(5561, 1)
MAKE_LITERAL_RATIONAL(5562, 1)
MAKE_LITERAL_RATIONAL(5563, 1)
MAKE_LITERAL_RATIONAL(5564, 1)
MAKE_LITERAL_RATIONAL(5565, 1)
MAKE_LITERAL_RATIONAL(5566, 1)
MAKE_LITERAL_RATIONAL(5567, 1)
MAKE_LITERAL_RATIONAL(5568, 1)
MAKE_LITERAL_RATIONAL(5569, 1)
MAKE_LITERAL_RATIONAL(5570, 1)
MAKE_LITERAL_RATIONAL(5571, 1)
MAKE_LITERAL_RATIONAL(5572, 1)
MAKE_LITERAL_RATIONAL(5573, 1)
MAKE_LITERAL_RATIONAL(5574, 1)
MAKE_LITERAL_RATIONAL(5575, 1)
MAKE_LITERAL_RATIONAL(5576, 1)
MAKE_LITERAL_RATIONAL(5577, 1)
MAKE_LITERAL_RATIONAL(5578, 1)
MAKE_LITERAL_RATIONAL(5579, 1)
MAKE_LITERAL_RATIONAL(5580, 1)
MAKE_LITERAL_RATIONAL(5581, 1)
MAKE_LITERAL_RATIONAL(5582, 1)
MAKE_LITERAL_RATIONAL(5583, 1)
MAKE_LITERAL_RATIONAL(5584, 1)
MAKE_LITERAL_RATIONAL(5585, 1)
MAKE_LITERAL_RATIONAL(5586, 1)
MAKE_LITERAL_RATIONAL(5587, 1)
MAKE_LITERAL_RATIONAL(5588, 1)
MAKE_LITERAL_RATIONAL(5589, 1)
MAKE_LITERAL_RATIONAL(5590, 1)
MAKE_LITERAL_RATIONAL(5591, 1)
MAKE_LITERAL_RATIONAL(5592, 1)
MAKE_LITERAL_RATIONAL(5593, 1)
MAKE_LITERAL_RATIONAL(5594, 1)
MAKE_LITERAL_RATIONAL(5595, 1)
MAKE_LITERAL_RATIONAL(5596, 1)
MAKE_LITERAL_RATIONAL(5597, 1)
MAKE_LITERAL_RATIONAL(5598, 1)
MAKE_LITERAL_RATIONAL(5599, 1)
MAKE_LITERAL_RATIONAL(5600, 1)
MAKE_LITERAL_RATIONAL(5601, 1)
MAKE_LITERAL_RATIONAL(5602, 1)
MAKE_LITERAL_RATIONAL(5603, 1)
MAKE_LITERAL_RATIONAL(5604, 1)
MAKE_LITERAL_RATIONAL(5605, 1)
MAKE_LITERAL_RATIONAL(5606, 1)
MAKE_LITERAL_RATIONAL(5607, 1)
MAKE_LITERAL_RATIONAL(5608, 1)
MAKE_LITERAL_RATIONAL(5609, 1)
MAKE_LITERAL_RATIONAL(5610, 1)
MAKE_LITERAL_RATIONAL(5611, 1)
MAKE_LITERAL_RATIONAL(5612, 1)
MAKE_LITERAL_RATIONAL(5613, 1)
MAKE_LITERAL_RATIONAL(5614, 1)
MAKE_LITERAL_RATIONAL(5615, 1)
MAKE_LITERAL_RATIONAL(5616, 1)
MAKE_LITERAL_RATIONAL(5617, 1)
MAKE_LITERAL_RATIONAL(5618, 1)
MAKE_LITERAL_RATIONAL(5619, 1)
MAKE_LITERAL_RATIONAL(5620, 1)
MAKE_LITERAL_RATIONAL(5621, 1)
MAKE_LITERAL_RATIONAL(5622, 1)
MAKE_LITERAL_RATIONAL(5623, 1)
MAKE_LITERAL_RATIONAL(5624, 1)
MAKE_LITERAL_RATIONAL(5625, 1)
MAKE_LITERAL_RATIONAL(5626, 1)
MAKE_LITERAL_RATIONAL(5627, 1)
MAKE_LITERAL_RATIONAL(5628, 1)
MAKE_LITERAL_RATIONAL(5629, 1)
MAKE_LITERAL_RATIONAL(5630, 1)
MAKE_LITERAL_RATIONAL(5631, 1)
MAKE_LITERAL_RATIONAL(5632, 1)
MAKE_LITERAL_RATIONAL(5633, 1)
MAKE_LITERAL_RATIONAL(5634, 1)
MAKE_LITERAL_RATIONAL(5635, 1)
MAKE_LITERAL_RATIONAL(5636, 1)
MAKE_LITERAL_RATIONAL(5637, 1)
MAKE_LITERAL_RATIONAL(5638, 1)
MAKE_LITERAL_RATIONAL(5639, 1)
MAKE_LITERAL_RATIONAL(5640, 1)
MAKE_LITERAL_RATIONAL(5641, 1)
MAKE_LITERAL_RATIONAL(5642, 1)
MAKE_LITERAL_RATIONAL(5643, 1)
MAKE_LITERAL_RATIONAL(5644, 1)
MAKE_LITERAL_RATIONAL(5645, 1)
MAKE_LITERAL_RATIONAL(5646, 1)
MAKE_LITERAL_RATIONAL(5647, 1)
MAKE_LITERAL_RATIONAL(5648, 1)
MAKE_LITERAL_RATIONAL(5649, 1)
MAKE_LITERAL_RATIONAL(5650, 1)
MAKE_LITERAL_RATIONAL(5651, 1)
MAKE_LITERAL_RATIONAL(5652, 1)
MAKE_LITERAL_RATIONAL(5653, 1)
MAKE_LITERAL_RATIONAL(5654, 1)
MAKE_LITERAL_RATIONAL(5655, 1)
MAKE_LITERAL_RATIONAL(5656, 1)
MAKE_LITERAL_RATIONAL(5657, 1)
MAKE_LITERAL_RATIONAL(5658, 1)
MAKE_LITERAL_RATIONAL(5659, 1)
MAKE_LITERAL_RATIONAL(5660, 1)
MAKE_LITERAL_RATIONAL(5661, 1)
MAKE_LITERAL_RATIONAL(5662, 1)
MAKE_LITERAL_RATIONAL(5663, 1)
MAKE_LITERAL_RATIONAL(5664, 1)
MAKE_LITERAL_RATIONAL(5665, 1)
MAKE_LITERAL_RATIONAL(5666, 1)
MAKE_LITERAL_RATIONAL(5667, 1)
MAKE_LITERAL_RATIONAL(5668, 1)
MAKE_LITERAL_RATIONAL(5669, 1)
MAKE_LITERAL_RATIONAL(5670, 1)
MAKE_LITERAL_RATIONAL(5671, 1)
MAKE_LITERAL_RATIONAL(5672, 1)
MAKE_LITERAL_RATIONAL(5673, 1)
MAKE_LITERAL_RATIONAL(5674, 1)
MAKE_LITERAL_RATIONAL(5675, 1)
MAKE_LITERAL_RATIONAL(5676, 1)
MAKE_LITERAL_RATIONAL(5677, 1)
MAKE_LITERAL_RATIONAL(5678, 1)
MAKE_LITERAL_RATIONAL(5679, 1)
MAKE_LITERAL_RATIONAL(5680, 1)
MAKE_LITERAL_RATIONAL(5681, 1)
MAKE_LITERAL_RATIONAL(5682, 1)
MAKE_LITERAL_RATIONAL(5683, 1)
MAKE_LITERAL_RATIONAL(5684, 1)
MAKE_LITERAL_RATIONAL(5685, 1)
MAKE_LITERAL_RATIONAL(5686, 1)
MAKE_LITERAL_RATIONAL(5687, 1)
MAKE_LITERAL_RATIONAL(5688, 1)
MAKE_LITERAL_RATIONAL(5689, 1)
MAKE_LITERAL_RATIONAL(5690, 1)
MAKE_LITERAL_RATIONAL(5691, 1)
MAKE_LITERAL_RATIONAL(5692, 1)
MAKE_LITERAL_RATIONAL(5693, 1)
MAKE_LITERAL_RATIONAL(5694, 1)
MAKE_LITERAL_RATIONAL(5695, 1)
MAKE_LITERAL_RATIONAL(5696, 1)
MAKE_LITERAL_RATIONAL(5697, 1)
MAKE_LITERAL_RATIONAL(5698, 1)
MAKE_LITERAL_RATIONAL(5699, 1)
MAKE_LITERAL_RATIONAL(5700, 1)
MAKE_LITERAL_RATIONAL(5701, 1)
MAKE_LITERAL_RATIONAL(5702, 1)
MAKE_LITERAL_RATIONAL(5703, 1)
MAKE_LITERAL_RATIONAL(5704, 1)
MAKE_LITERAL_RATIONAL(5705, 1)
MAKE_LITERAL_RATIONAL(5706, 1)
MAKE_LITERAL_RATIONAL(5707, 1)
MAKE_LITERAL_RATIONAL(5708, 1)
MAKE_LITERAL_RATIONAL(5709, 1)
MAKE_LITERAL_RATIONAL(5710, 1)
MAKE_LITERAL_RATIONAL(5711, 1)
MAKE_LITERAL_RATIONAL(5712, 1)
MAKE_LITERAL_RATIONAL(5713, 1)
MAKE_LITERAL_RATIONAL(5714, 1)
MAKE_LITERAL_RATIONAL(5715, 1)
MAKE_LITERAL_RATIONAL(5716, 1)
MAKE_LITERAL_RATIONAL(5717, 1)
MAKE_LITERAL_RATIONAL(5718, 1)
MAKE_LITERAL_RATIONAL(5719, 1)
MAKE_LITERAL_RATIONAL(5720, 1)
MAKE_LITERAL_RATIONAL(5721, 1)
MAKE_LITERAL_RATIONAL(5722, 1)
MAKE_LITERAL_RATIONAL(5723, 1)
MAKE_LITERAL_RATIONAL(5724, 1)
MAKE_LITERAL_RATIONAL(5725, 1)
MAKE_LITERAL_RATIONAL(5726, 1)
MAKE_LITERAL_RATIONAL(5727, 1)
MAKE_LITERAL_RATIONAL(5728, 1)
MAKE_LITERAL_RATIONAL(5729, 1)
MAKE_LITERAL_RATIONAL(5730, 1)
MAKE_LITERAL_RATIONAL(5731, 1)
MAKE_LITERAL_RATIONAL(5732, 1)
MAKE_LITERAL_RATIONAL(5733, 1)
MAKE_LITERAL_RATIONAL(5734, 1)
MAKE_LITERAL_RATIONAL(5735, 1)
MAKE_LITERAL_RATIONAL(5736, 1)
MAKE_LITERAL_RATIONAL(5737, 1)
MAKE_LITERAL_RATIONAL(5738, 1)
MAKE_LITERAL_RATIONAL(5739, 1)
MAKE_LITERAL_RATIONAL(5740, 1)
MAKE_LITERAL_RATIONAL(5741, 1)
MAKE_LITERAL_RATIONAL(5742, 1)
MAKE_LITERAL_RATIONAL(5743, 1)
MAKE_LITERAL_RATIONAL(5744, 1)
MAKE_LITERAL_RATIONAL(5745, 1)
MAKE_LITERAL_RATIONAL(5746, 1)
MAKE_LITERAL_RATIONAL(5747, 1)
MAKE_LITERAL_RATIONAL(5748, 1)
MAKE_LITERAL_RATIONAL(5749, 1)
MAKE_LITERAL_RATIONAL(5750, 1)
MAKE_LITERAL_RATIONAL(5751, 1)
MAKE_LITERAL_RATIONAL(5752, 1)
MAKE_LITERAL_RATIONAL(5753, 1)
MAKE_LITERAL_RATIONAL(5754, 1)
MAKE_LITERAL_RATIONAL(5755, 1)
MAKE_LITERAL_RATIONAL(5756, 1)
MAKE_LITERAL_RATIONAL(5757, 1)
MAKE_LITERAL_RATIONAL(5758, 1)
MAKE_LITERAL_RATIONAL(5759, 1)
MAKE_LITERAL_RATIONAL(5760, 1)
MAKE_LITERAL_RATIONAL(5761, 1)
MAKE_LITERAL_RATIONAL(5762, 1)
MAKE_LITERAL_RATIONAL(5763, 1)
MAKE_LITERAL_RATIONAL(5764, 1)
MAKE_LITERAL_RATIONAL(5765, 1)
MAKE_LITERAL_RATIONAL(5766, 1)
MAKE_LITERAL_RATIONAL(5767, 1)
MAKE_LITERAL_RATIONAL(5768, 1)
MAKE_LITERAL_RATIONAL(5769, 1)
MAKE_LITERAL_RATIONAL(5770, 1)
MAKE_LITERAL_RATIONAL(5771, 1)
MAKE_LITERAL_RATIONAL(5772, 1)
MAKE_LITERAL_RATIONAL(5773, 1)
MAKE_LITERAL_RATIONAL(5774, 1)
MAKE_LITERAL_RATIONAL(5775, 1)
MAKE_LITERAL_RATIONAL(5776, 1)
MAKE_LITERAL_RATIONAL(5777, 1)
MAKE_LITERAL_RATIONAL(5778, 1)
MAKE_LITERAL_RATIONAL(5779, 1)
MAKE_LITERAL_RATIONAL(5780, 1)
MAKE_LITERAL_RATIONAL(5781, 1)
MAKE_LITERAL_RATIONAL(5782, 1)
MAKE_LITERAL_RATIONAL(5783, 1)
MAKE_LITERAL_RATIONAL(5784, 1)
MAKE_LITERAL_RATIONAL(5785, 1)
MAKE_LITERAL_RATIONAL(5786, 1)
MAKE_LITERAL_RATIONAL(5787, 1)
MAKE_LITERAL_RATIONAL(5788, 1)
MAKE_LITERAL_RATIONAL(5789, 1)
MAKE_LITERAL_RATIONAL(5790, 1)
MAKE_LITERAL_RATIONAL(5791, 1)
MAKE_LITERAL_RATIONAL(5792, 1)
MAKE_LITERAL_RATIONAL(5793, 1)
MAKE_LITERAL_RATIONAL(5794, 1)
MAKE_LITERAL_RATIONAL(5795, 1)
MAKE_LITERAL_RATIONAL(5796, 1)
MAKE_LITERAL_RATIONAL(5797, 1)
MAKE_LITERAL_RATIONAL(5798, 1)
MAKE_LITERAL_RATIONAL(5799, 1)
MAKE_LITERAL_RATIONAL(5800, 1)
MAKE_LITERAL_RATIONAL(5801, 1)
MAKE_LITERAL_RATIONAL(5802, 1)
MAKE_LITERAL_RATIONAL(5803, 1)
MAKE_LITERAL_RATIONAL(5804, 1)
MAKE_LITERAL_RATIONAL(5805, 1)
MAKE_LITERAL_RATIONAL(5806, 1)
MAKE_LITERAL_RATIONAL(5807, 1)
MAKE_LITERAL_RATIONAL(5808, 1)
MAKE_LITERAL_RATIONAL(5809, 1)
MAKE_LITERAL_RATIONAL(5810, 1)
MAKE_LITERAL_RATIONAL(5811, 1)
MAKE_LITERAL_RATIONAL(5812, 1)
MAKE_LITERAL_RATIONAL(5813, 1)
MAKE_LITERAL_RATIONAL(5814, 1)
MAKE_LITERAL_RATIONAL(5815, 1)
MAKE_LITERAL_RATIONAL(5816, 1)
MAKE_LITERAL_RATIONAL(5817, 1)
MAKE_LITERAL_RATIONAL(5818, 1)
MAKE_LITERAL_RATIONAL(5819, 1)
MAKE_LITERAL_RATIONAL(5820, 1)
MAKE_LITERAL_RATIONAL(5821, 1)
MAKE_LITERAL_RATIONAL(5822, 1)
MAKE_LITERAL_RATIONAL(5823, 1)
MAKE_LITERAL_RATIONAL(5824, 1)
MAKE_LITERAL_RATIONAL(5825, 1)
MAKE_LITERAL_RATIONAL(5826, 1)
MAKE_LITERAL_RATIONAL(5827, 1)
MAKE_LITERAL_RATIONAL(5828, 1)
MAKE_LITERAL_RATIONAL(5829, 1)
MAKE_LITERAL_RATIONAL(5830, 1)
MAKE_LITERAL_RATIONAL(5831, 1)
MAKE_LITERAL_RATIONAL(5832, 1)
MAKE_LITERAL_RATIONAL(5833, 1)
MAKE_LITERAL_RATIONAL(5834, 1)
MAKE_LITERAL_RATIONAL(5835, 1)
MAKE_LITERAL_RATIONAL(5836, 1)
MAKE_LITERAL_RATIONAL(5837, 1)
MAKE_LITERAL_RATIONAL(5838, 1)
MAKE_LITERAL_RATIONAL(5839, 1)
MAKE_LITERAL_RATIONAL(5840, 1)
MAKE_LITERAL_RATIONAL(5841, 1)
MAKE_LITERAL_RATIONAL(5842, 1)
MAKE_LITERAL_RATIONAL(5843, 1)
MAKE_LITERAL_RATIONAL(5844, 1)
MAKE_LITERAL_RATIONAL(5845, 1)
MAKE_LITERAL_RATIONAL(5846, 1)
MAKE_LITERAL_RATIONAL(5847, 1)
MAKE_LITERAL_RATIONAL(5848, 1)
MAKE_LITERAL_RATIONAL(5849, 1)
MAKE_LITERAL_RATIONAL(5850, 1)
MAKE_LITERAL_RATIONAL(5851, 1)
MAKE_LITERAL_RATIONAL(5852, 1)
MAKE_LITERAL_RATIONAL(5853, 1)
MAKE_LITERAL_RATIONAL(5854, 1)
MAKE_LITERAL_RATIONAL(5855, 1)
MAKE_LITERAL_RATIONAL(5856, 1)
MAKE_LITERAL_RATIONAL(5857, 1)
MAKE_LITERAL_RATIONAL(5858, 1)
MAKE_LITERAL_RATIONAL(5859, 1)
MAKE_LITERAL_RATIONAL(5860, 1)
MAKE_LITERAL_RATIONAL(5861, 1)
MAKE_LITERAL_RATIONAL(5862, 1)
MAKE_LITERAL_RATIONAL(5863, 1)
MAKE_LITERAL_RATIONAL(5864, 1)
MAKE_LITERAL_RATIONAL(5865, 1)
MAKE_LITERAL_RATIONAL(5866, 1)
MAKE_LITERAL_RATIONAL(5867, 1)
MAKE_LITERAL_RATIONAL(5868, 1)
MAKE_LITERAL_RATIONAL(5869, 1)
MAKE_LITERAL_RATIONAL(5870, 1)
MAKE_LITERAL_RATIONAL(5871, 1)
MAKE_LITERAL_RATIONAL(5872, 1)
MAKE_LITERAL_RATIONAL(5873, 1)
MAKE_LITERAL_RATIONAL(5874, 1)
MAKE_LITERAL_RATIONAL(5875, 1)
MAKE_LITERAL_RATIONAL(5876, 1)
MAKE_LITERAL_RATIONAL(5877, 1)
MAKE_LITERAL_RATIONAL(5878, 1)
MAKE_LITERAL_RATIONAL(5879, 1)
MAKE_LITERAL_RATIONAL(5880, 1)
MAKE_LITERAL_RATIONAL(5881, 1)
MAKE_LITERAL_RATIONAL(5882, 1)
MAKE_LITERAL_RATIONAL(5883, 1)
MAKE_LITERAL_RATIONAL(5884, 1)
MAKE_LITERAL_RATIONAL(5885, 1)
MAKE_LITERAL_RATIONAL(5886, 1)
MAKE_LITERAL_RATIONAL(5887, 1)
MAKE_LITERAL_RATIONAL(5888, 1)
MAKE_LITERAL_RATIONAL(5889, 1)
MAKE_LITERAL_RATIONAL(5890, 1)
MAKE_LITERAL_RATIONAL(5891, 1)
MAKE_LITERAL_RATIONAL(5892, 1)
MAKE_LITERAL_RATIONAL(5893, 1)
MAKE_LITERAL_RATIONAL(5894, 1)
MAKE_LITERAL_RATIONAL(5895, 1)
MAKE_LITERAL_RATIONAL(5896, 1)
MAKE_LITERAL_RATIONAL(5897, 1)
MAKE_LITERAL_RATIONAL(5898, 1)
MAKE_LITERAL_RATIONAL(5899, 1)
MAKE_LITERAL_RATIONAL(5900, 1)
MAKE_LITERAL_RATIONAL(5901, 1)
MAKE_LITERAL_RATIONAL(5902, 1)
MAKE_LITERAL_RATIONAL(5903, 1)
MAKE_LITERAL_RATIONAL(5904, 1)
MAKE_LITERAL_RATIONAL(5905, 1)
MAKE_LITERAL_RATIONAL(5906, 1)
MAKE_LITERAL_RATIONAL(5907, 1)
MAKE_LITERAL_RATIONAL(5908, 1)
MAKE_LITERAL_RATIONAL(5909, 1)
MAKE_LITERAL_RATIONAL(5910, 1)
MAKE_LITERAL_RATIONAL(5911, 1)
MAKE_LITERAL_RATIONAL(5912, 1)
MAKE_LITERAL_RATIONAL(5913, 1)
MAKE_LITERAL_RATIONAL(5914, 1)
MAKE_LITERAL_RATIONAL(5915, 1)
MAKE_LITERAL_RATIONAL(5916, 1)
MAKE_LITERAL_RATIONAL(5917, 1)
MAKE_LITERAL_RATIONAL(5918, 1)
MAKE_LITERAL_RATIONAL(5919, 1)
MAKE_LITERAL_RATIONAL(5920, 1)
MAKE_LITERAL_RATIONAL(5921, 1)
MAKE_LITERAL_RATIONAL(5922, 1)
MAKE_LITERAL_RATIONAL(5923, 1)
MAKE_LITERAL_RATIONAL(5924, 1)
MAKE_LITERAL_RATIONAL(5925, 1)
MAKE_LITERAL_RATIONAL(5926, 1)
MAKE_LITERAL_RATIONAL(5927, 1)
MAKE_LITERAL_RATIONAL(5928, 1)
MAKE_LITERAL_RATIONAL(5929, 1)
MAKE_LITERAL_RATIONAL(5930, 1)
MAKE_LITERAL_RATIONAL(5931, 1)
MAKE_LITERAL_RATIONAL(5932, 1)
MAKE_LITERAL_RATIONAL(5933, 1)
MAKE_LITERAL_RATIONAL(5934, 1)
MAKE_LITERAL_RATIONAL(5935, 1)
MAKE_LITERAL_RATIONAL(5936, 1)
MAKE_LITERAL_RATIONAL(5937, 1)
MAKE_LITERAL_RATIONAL(5938, 1)
MAKE_LITERAL_RATIONAL(5939, 1)
MAKE_LITERAL_RATIONAL(5940, 1)
MAKE_LITERAL_RATIONAL(5941, 1)
MAKE_LITERAL_RATIONAL(5942, 1)
MAKE_LITERAL_RATIONAL(5943, 1)
MAKE_LITERAL_RATIONAL(5944, 1)
MAKE_LITERAL_RATIONAL(5945, 1)
MAKE_LITERAL_RATIONAL(5946, 1)
MAKE_LITERAL_RATIONAL(5947, 1)
MAKE_LITERAL_RATIONAL(5948, 1)
MAKE_LITERAL_RATIONAL(5949, 1)
MAKE_LITERAL_RATIONAL(5950, 1)
MAKE_LITERAL_RATIONAL(5951, 1)
MAKE_LITERAL_RATIONAL(5952, 1)
MAKE_LITERAL_RATIONAL(5953, 1)
MAKE_LITERAL_RATIONAL(5954, 1)
MAKE_LITERAL_RATIONAL(5955, 1)
MAKE_LITERAL_RATIONAL(5956, 1)
MAKE_LITERAL_RATIONAL(5957, 1)
MAKE_LITERAL_RATIONAL(5958, 1)
MAKE_LITERAL_RATIONAL(5959, 1)
MAKE_LITERAL_RATIONAL(5960, 1)
MAKE_LITERAL_RATIONAL(5961, 1)
MAKE_LITERAL_RATIONAL(5962, 1)
MAKE_LITERAL_RATIONAL(5963, 1)
MAKE_LITERAL_RATIONAL(5964, 1)
MAKE_LITERAL_RATIONAL(5965, 1)
MAKE_LITERAL_RATIONAL(5966, 1)
MAKE_LITERAL_RATIONAL(5967, 1)
MAKE_LITERAL_RATIONAL(5968, 1)
MAKE_LITERAL_RATIONAL(5969, 1)
MAKE_LITERAL_RATIONAL(5970, 1)
MAKE_LITERAL_RATIONAL(5971, 1)
MAKE_LITERAL_RATIONAL(5972, 1)
MAKE_LITERAL_RATIONAL(5973, 1)
MAKE_LITERAL_RATIONAL(5974, 1)
MAKE_LITERAL_RATIONAL(5975, 1)
MAKE_LITERAL_RATIONAL(5976, 1)
MAKE_LITERAL_RATIONAL(5977, 1)
MAKE_LITERAL_RATIONAL(5978, 1)
MAKE_LITERAL_RATIONAL(5979, 1)
MAKE_LITERAL_RATIONAL(5980, 1)
MAKE_LITERAL_RATIONAL(5981, 1)
MAKE_LITERAL_RATIONAL(5982, 1)
MAKE_LITERAL_RATIONAL(5983, 1)
MAKE_LITERAL_RATIONAL(5984, 1)
MAKE_LITERAL_RATIONAL(5985, 1)
MAKE_LITERAL_RATIONAL(5986, 1)
MAKE_LITERAL_RATIONAL(5987, 1)
MAKE_LITERAL_RATIONAL(5988, 1)
MAKE_LITERAL_RATIONAL(5989, 1)
MAKE_LITERAL_RATIONAL(5990, 1)
MAKE_LITERAL_RATIONAL(5991, 1)
MAKE_LITERAL_RATIONAL(5992, 1)
MAKE_LITERAL_RATIONAL(5993, 1)
MAKE_LITERAL_RATIONAL(5994, 1)
MAKE_LITERAL_RATIONAL(5995, 1)
MAKE_LITERAL_RATIONAL(5996, 1)
MAKE_LITERAL_RATIONAL(5997, 1)
MAKE_LITERAL_RATIONAL(5998, 1)
MAKE_LITERAL_RATIONAL(5999, 1)
MAKE_LITERAL_RATIONAL(6000, 1)
MAKE_LITERAL_PAIR(const_tbl+102051, const_tbl+1)
MAKE_LITERAL_PAIR(const_tbl+102034, const_tbl+102068)
MAKE_LITERAL_PAIR(const_tbl+102017, const_tbl+102085)
MAKE_LITERAL_PAIR(const_tbl+102000, const_tbl+102102)
MAKE_LITERAL_PAIR(const_tbl+101983, const_tbl+102119)
MAKE_LITERAL_PAIR(const_tbl+101966, const_tbl+102136)
MAKE_LITERAL_PAIR(const_tbl+101949, const_tbl+102153)
MAKE_LITERAL_PAIR(const_tbl+101932, const_tbl+102170)
MAKE_LITERAL_PAIR(const_tbl+101915, const_tbl+102187)
MAKE_LITERAL_PAIR(const_tbl+101898, const_tbl+102204)
MAKE_LITERAL_PAIR(const_tbl+101881, const_tbl+102221)
MAKE_LITERAL_PAIR(const_tbl+101864, const_tbl+102238)
MAKE_LITERAL_PAIR(const_tbl+101847, const_tbl+102255)
MAKE_LITERAL_PAIR(const_tbl+101830, const_tbl+102272)
MAKE_LITERAL_PAIR(const_tbl+101813, const_tbl+102289)
MAKE_LITERAL_PAIR(const_tbl+101796, const_tbl+102306)
MAKE_LITERAL_PAIR(const_tbl+101779, const_tbl+102323)
MAKE_LITERAL_PAIR(const_tbl+101762, const_tbl+102340)
MAKE_LITERAL_PAIR(const_tbl+101745, const_tbl+102357)
MAKE_LITERAL_PAIR(const_tbl+101728, const_tbl+102374)
MAKE_LITERAL_PAIR(const_tbl+101711, const_tbl+102391)
MAKE_LITERAL_PAIR(const_tbl+101694, const_tbl+102408)
MAKE_LITERAL_PAIR(const_tbl+101677, const_tbl+102425)
MAKE_LITERAL_PAIR(const_tbl+101660, const_tbl+102442)
MAKE_LITERAL_PAIR(const_tbl+101643, const_tbl+102459)
MAKE_LITERAL_PAIR(const_tbl+101626, const_tbl+102476)
MAKE_LITERAL_PAIR(const_tbl+101609, const_tbl+102493)
MAKE_LITERAL_PAIR(const_tbl+101592, const_tbl+102510)
MAKE_LITERAL_PAIR(const_tbl+101575, const_tbl+102527)
MAKE_LITERAL_PAIR(const_tbl+101558, const_tbl+102544)
MAKE_LITERAL_PAIR(const_tbl+101541, const_tbl+102561)
MAKE_LITERAL_PAIR(const_tbl+101524, const_tbl+102578)
MAKE_LITERAL_PAIR(const_tbl+101507, const_tbl+102595)
MAKE_LITERAL_PAIR(const_tbl+101490, const_tbl+102612)
MAKE_LITERAL_PAIR(const_tbl+101473, const_tbl+102629)
MAKE_LITERAL_PAIR(const_tbl+101456, const_tbl+102646)
MAKE_LITERAL_PAIR(const_tbl+101439, const_tbl+102663)
MAKE_LITERAL_PAIR(const_tbl+101422, const_tbl+102680)
MAKE_LITERAL_PAIR(const_tbl+101405, const_tbl+102697)
MAKE_LITERAL_PAIR(const_tbl+101388, const_tbl+102714)
MAKE_LITERAL_PAIR(const_tbl+101371, const_tbl+102731)
MAKE_LITERAL_PAIR(const_tbl+101354, const_tbl+102748)
MAKE_LITERAL_PAIR(const_tbl+101337, const_tbl+102765)
MAKE_LITERAL_PAIR(const_tbl+101320, const_tbl+102782)
MAKE_LITERAL_PAIR(const_tbl+101303, const_tbl+102799)
MAKE_LITERAL_PAIR(const_tbl+101286, const_tbl+102816)
MAKE_LITERAL_PAIR(const_tbl+101269, const_tbl+102833)
MAKE_LITERAL_PAIR(const_tbl+101252, const_tbl+102850)
MAKE_LITERAL_PAIR(const_tbl+101235, const_tbl+102867)
MAKE_LITERAL_PAIR(const_tbl+101218, const_tbl+102884)
MAKE_LITERAL_PAIR(const_tbl+101201, const_tbl+102901)
MAKE_LITERAL_PAIR(const_tbl+101184, const_tbl+102918)
MAKE_LITERAL_PAIR(const_tbl+101167, const_tbl+102935)
MAKE_LITERAL_PAIR(const_tbl+101150, const_tbl+102952)
MAKE_LITERAL_PAIR(const_tbl+101133, const_tbl+102969)
MAKE_LITERAL_PAIR(const_tbl+101116, const_tbl+102986)
MAKE_LITERAL_PAIR(const_tbl+101099, const_tbl+103003)
MAKE_LITERAL_PAIR(const_tbl+101082, const_tbl+103020)
MAKE_LITERAL_PAIR(const_tbl+101065, const_tbl+103037)
MAKE_LITERAL_PAIR(const_tbl+101048, const_tbl+103054)
MAKE_LITERAL_PAIR(const_tbl+101031, const_tbl+103071)
MAKE_LITERAL_PAIR(const_tbl+101014, const_tbl+103088)
MAKE_LITERAL_PAIR(const_tbl+100997, const_tbl+103105)
MAKE_LITERAL_PAIR(const_tbl+100980, const_tbl+103122)
MAKE_LITERAL_PAIR(const_tbl+100963, const_tbl+103139)
MAKE_LITERAL_PAIR(const_tbl+100946, const_tbl+103156)
MAKE_LITERAL_PAIR(const_tbl+100929, const_tbl+103173)
MAKE_LITERAL_PAIR(const_tbl+100912, const_tbl+103190)
MAKE_LITERAL_PAIR(const_tbl+100895, const_tbl+103207)
MAKE_LITERAL_PAIR(const_tbl+100878, const_tbl+103224)
MAKE_LITERAL_PAIR(const_tbl+100861, const_tbl+103241)
MAKE_LITERAL_PAIR(const_tbl+100844, const_tbl+103258)
MAKE_LITERAL_PAIR(const_tbl+100827, const_tbl+103275)
MAKE_LITERAL_PAIR(const_tbl+100810, const_tbl+103292)
MAKE_LITERAL_PAIR(const_tbl+100793, const_tbl+103309)
MAKE_LITERAL_PAIR(const_tbl+100776, const_tbl+103326)
MAKE_LITERAL_PAIR(const_tbl+100759, const_tbl+103343)
MAKE_LITERAL_PAIR(const_tbl+100742, const_tbl+103360)
MAKE_LITERAL_PAIR(const_tbl+100725, const_tbl+103377)
MAKE_LITERAL_PAIR(const_tbl+100708, const_tbl+103394)
MAKE_LITERAL_PAIR(const_tbl+100691, const_tbl+103411)
MAKE_LITERAL_PAIR(const_tbl+100674, const_tbl+103428)
MAKE_LITERAL_PAIR(const_tbl+100657, const_tbl+103445)
MAKE_LITERAL_PAIR(const_tbl+100640, const_tbl+103462)
MAKE_LITERAL_PAIR(const_tbl+100623, const_tbl+103479)
MAKE_LITERAL_PAIR(const_tbl+100606, const_tbl+103496)
MAKE_LITERAL_PAIR(const_tbl+100589, const_tbl+103513)
MAKE_LITERAL_PAIR(const_tbl+100572, const_tbl+103530)
MAKE_LITERAL_PAIR(const_tbl+100555, const_tbl+103547)
MAKE_LITERAL_PAIR(const_tbl+100538, const_tbl+103564)
MAKE_LITERAL_PAIR(const_tbl+100521, const_tbl+103581)
MAKE_LITERAL_PAIR(const_tbl+100504, const_tbl+103598)
MAKE_LITERAL_PAIR(const_tbl+100487, const_tbl+103615)
MAKE_LITERAL_PAIR(const_tbl+100470, const_tbl+103632)
MAKE_LITERAL_PAIR(const_tbl+100453, const_tbl+103649)
MAKE_LITERAL_PAIR(const_tbl+100436, const_tbl+103666)
MAKE_LITERAL_PAIR(const_tbl+100419, const_tbl+103683)
MAKE_LITERAL_PAIR(const_tbl+100402, const_tbl+103700)
MAKE_LITERAL_PAIR(const_tbl+100385, const_tbl+103717)
MAKE_LITERAL_PAIR(const_tbl+100368, const_tbl+103734)
MAKE_LITERAL_PAIR(const_tbl+100351, const_tbl+103751)
MAKE_LITERAL_PAIR(const_tbl+100334, const_tbl+103768)
MAKE_LITERAL_PAIR(const_tbl+100317, const_tbl+103785)
MAKE_LITERAL_PAIR(const_tbl+100300, const_tbl+103802)
MAKE_LITERAL_PAIR(const_tbl+100283, const_tbl+103819)
MAKE_LITERAL_PAIR(const_tbl+100266, const_tbl+103836)
MAKE_LITERAL_PAIR(const_tbl+100249, const_tbl+103853)
MAKE_LITERAL_PAIR(const_tbl+100232, const_tbl+103870)
MAKE_LITERAL_PAIR(const_tbl+100215, const_tbl+103887)
MAKE_LITERAL_PAIR(const_tbl+100198, const_tbl+103904)
MAKE_LITERAL_PAIR(const_tbl+100181, const_tbl+103921)
MAKE_LITERAL_PAIR(const_tbl+100164, const_tbl+103938)
MAKE_LITERAL_PAIR(const_tbl+100147, const_tbl+103955)
MAKE_LITERAL_PAIR(const_tbl+100130, const_tbl+103972)
MAKE_LITERAL_PAIR(const_tbl+100113, const_tbl+103989)
MAKE_LITERAL_PAIR(const_tbl+100096, const_tbl+104006)
MAKE_LITERAL_PAIR(const_tbl+100079, const_tbl+104023)
MAKE_LITERAL_PAIR(const_tbl+100062, const_tbl+104040)
MAKE_LITERAL_PAIR(const_tbl+100045, const_tbl+104057)
MAKE_LITERAL_PAIR(const_tbl+100028, const_tbl+104074)
MAKE_LITERAL_PAIR(const_tbl+100011, const_tbl+104091)
MAKE_LITERAL_PAIR(const_tbl+99994, const_tbl+104108)
MAKE_LITERAL_PAIR(const_tbl+99977, const_tbl+104125)
MAKE_LITERAL_PAIR(const_tbl+99960, const_tbl+104142)
MAKE_LITERAL_PAIR(const_tbl+99943, const_tbl+104159)
MAKE_LITERAL_PAIR(const_tbl+99926, const_tbl+104176)
MAKE_LITERAL_PAIR(const_tbl+99909, const_tbl+104193)
MAKE_LITERAL_PAIR(const_tbl+99892, const_tbl+104210)
MAKE_LITERAL_PAIR(const_tbl+99875, const_tbl+104227)
MAKE_LITERAL_PAIR(const_tbl+99858, const_tbl+104244)
MAKE_LITERAL_PAIR(const_tbl+99841, const_tbl+104261)
MAKE_LITERAL_PAIR(const_tbl+99824, const_tbl+104278)
MAKE_LITERAL_PAIR(const_tbl+99807, const_tbl+104295)
MAKE_LITERAL_PAIR(const_tbl+99790, const_tbl+104312)
MAKE_LITERAL_PAIR(const_tbl+99773, const_tbl+104329)
MAKE_LITERAL_PAIR(const_tbl+99756, const_tbl+104346)
MAKE_LITERAL_PAIR(const_tbl+99739, const_tbl+104363)
MAKE_LITERAL_PAIR(const_tbl+99722, const_tbl+104380)
MAKE_LITERAL_PAIR(const_tbl+99705, const_tbl+104397)
MAKE_LITERAL_PAIR(const_tbl+99688, const_tbl+104414)
MAKE_LITERAL_PAIR(const_tbl+99671, const_tbl+104431)
MAKE_LITERAL_PAIR(const_tbl+99654, const_tbl+104448)
MAKE_LITERAL_PAIR(const_tbl+99637, const_tbl+104465)
MAKE_LITERAL_PAIR(const_tbl+99620, const_tbl+104482)
MAKE_LITERAL_PAIR(const_tbl+99603, const_tbl+104499)
MAKE_LITERAL_PAIR(const_tbl+99586, const_tbl+104516)
MAKE_LITERAL_PAIR(const_tbl+99569, const_tbl+104533)
MAKE_LITERAL_PAIR(const_tbl+99552, const_tbl+104550)
MAKE_LITERAL_PAIR(const_tbl+99535, const_tbl+104567)
MAKE_LITERAL_PAIR(const_tbl+99518, const_tbl+104584)
MAKE_LITERAL_PAIR(const_tbl+99501, const_tbl+104601)
MAKE_LITERAL_PAIR(const_tbl+99484, const_tbl+104618)
MAKE_LITERAL_PAIR(const_tbl+99467, const_tbl+104635)
MAKE_LITERAL_PAIR(const_tbl+99450, const_tbl+104652)
MAKE_LITERAL_PAIR(const_tbl+99433, const_tbl+104669)
MAKE_LITERAL_PAIR(const_tbl+99416, const_tbl+104686)
MAKE_LITERAL_PAIR(const_tbl+99399, const_tbl+104703)
MAKE_LITERAL_PAIR(const_tbl+99382, const_tbl+104720)
MAKE_LITERAL_PAIR(const_tbl+99365, const_tbl+104737)
MAKE_LITERAL_PAIR(const_tbl+99348, const_tbl+104754)
MAKE_LITERAL_PAIR(const_tbl+99331, const_tbl+104771)
MAKE_LITERAL_PAIR(const_tbl+99314, const_tbl+104788)
MAKE_LITERAL_PAIR(const_tbl+99297, const_tbl+104805)
MAKE_LITERAL_PAIR(const_tbl+99280, const_tbl+104822)
MAKE_LITERAL_PAIR(const_tbl+99263, const_tbl+104839)
MAKE_LITERAL_PAIR(const_tbl+99246, const_tbl+104856)
MAKE_LITERAL_PAIR(const_tbl+99229, const_tbl+104873)
MAKE_LITERAL_PAIR(const_tbl+99212, const_tbl+104890)
MAKE_LITERAL_PAIR(const_tbl+99195, const_tbl+104907)
MAKE_LITERAL_PAIR(const_tbl+99178, const_tbl+104924)
MAKE_LITERAL_PAIR(const_tbl+99161, const_tbl+104941)
MAKE_LITERAL_PAIR(const_tbl+99144, const_tbl+104958)
MAKE_LITERAL_PAIR(const_tbl+99127, const_tbl+104975)
MAKE_LITERAL_PAIR(const_tbl+99110, const_tbl+104992)
MAKE_LITERAL_PAIR(const_tbl+99093, const_tbl+105009)
MAKE_LITERAL_PAIR(const_tbl+99076, const_tbl+105026)
MAKE_LITERAL_PAIR(const_tbl+99059, const_tbl+105043)
MAKE_LITERAL_PAIR(const_tbl+99042, const_tbl+105060)
MAKE_LITERAL_PAIR(const_tbl+99025, const_tbl+105077)
MAKE_LITERAL_PAIR(const_tbl+99008, const_tbl+105094)
MAKE_LITERAL_PAIR(const_tbl+98991, const_tbl+105111)
MAKE_LITERAL_PAIR(const_tbl+98974, const_tbl+105128)
MAKE_LITERAL_PAIR(const_tbl+98957, const_tbl+105145)
MAKE_LITERAL_PAIR(const_tbl+98940, const_tbl+105162)
MAKE_LITERAL_PAIR(const_tbl+98923, const_tbl+105179)
MAKE_LITERAL_PAIR(const_tbl+98906, const_tbl+105196)
MAKE_LITERAL_PAIR(const_tbl+98889, const_tbl+105213)
MAKE_LITERAL_PAIR(const_tbl+98872, const_tbl+105230)
MAKE_LITERAL_PAIR(const_tbl+98855, const_tbl+105247)
MAKE_LITERAL_PAIR(const_tbl+98838, const_tbl+105264)
MAKE_LITERAL_PAIR(const_tbl+98821, const_tbl+105281)
MAKE_LITERAL_PAIR(const_tbl+98804, const_tbl+105298)
MAKE_LITERAL_PAIR(const_tbl+98787, const_tbl+105315)
MAKE_LITERAL_PAIR(const_tbl+98770, const_tbl+105332)
MAKE_LITERAL_PAIR(const_tbl+98753, const_tbl+105349)
MAKE_LITERAL_PAIR(const_tbl+98736, const_tbl+105366)
MAKE_LITERAL_PAIR(const_tbl+98719, const_tbl+105383)
MAKE_LITERAL_PAIR(const_tbl+98702, const_tbl+105400)
MAKE_LITERAL_PAIR(const_tbl+98685, const_tbl+105417)
MAKE_LITERAL_PAIR(const_tbl+98668, const_tbl+105434)
MAKE_LITERAL_PAIR(const_tbl+98651, const_tbl+105451)
MAKE_LITERAL_PAIR(const_tbl+98634, const_tbl+105468)
MAKE_LITERAL_PAIR(const_tbl+98617, const_tbl+105485)
MAKE_LITERAL_PAIR(const_tbl+98600, const_tbl+105502)
MAKE_LITERAL_PAIR(const_tbl+98583, const_tbl+105519)
MAKE_LITERAL_PAIR(const_tbl+98566, const_tbl+105536)
MAKE_LITERAL_PAIR(const_tbl+98549, const_tbl+105553)
MAKE_LITERAL_PAIR(const_tbl+98532, const_tbl+105570)
MAKE_LITERAL_PAIR(const_tbl+98515, const_tbl+105587)
MAKE_LITERAL_PAIR(const_tbl+98498, const_tbl+105604)
MAKE_LITERAL_PAIR(const_tbl+98481, const_tbl+105621)
MAKE_LITERAL_PAIR(const_tbl+98464, const_tbl+105638)
MAKE_LITERAL_PAIR(const_tbl+98447, const_tbl+105655)
MAKE_LITERAL_PAIR(const_tbl+98430, const_tbl+105672)
MAKE_LITERAL_PAIR(const_tbl+98413, const_tbl+105689)
MAKE_LITERAL_PAIR(const_tbl+98396, const_tbl+105706)
MAKE_LITERAL_PAIR(const_tbl+98379, const_tbl+105723)
MAKE_LITERAL_PAIR(const_tbl+98362, const_tbl+105740)
MAKE_LITERAL_PAIR(const_tbl+98345, const_tbl+105757)
MAKE_LITERAL_PAIR(const_tbl+98328, const_tbl+105774)
MAKE_LITERAL_PAIR(const_tbl+98311, const_tbl+105791)
MAKE_LITERAL_PAIR(const_tbl+98294, const_tbl+105808)
MAKE_LITERAL_PAIR(const_tbl+98277, const_tbl+105825)
MAKE_LITERAL_PAIR(const_tbl+98260, const_tbl+105842)
MAKE_LITERAL_PAIR(const_tbl+98243, const_tbl+105859)
MAKE_LITERAL_PAIR(const_tbl+98226, const_tbl+105876)
MAKE_LITERAL_PAIR(const_tbl+98209, const_tbl+105893)
MAKE_LITERAL_PAIR(const_tbl+98192, const_tbl+105910)
MAKE_LITERAL_PAIR(const_tbl+98175, const_tbl+105927)
MAKE_LITERAL_PAIR(const_tbl+98158, const_tbl+105944)
MAKE_LITERAL_PAIR(const_tbl+98141, const_tbl+105961)
MAKE_LITERAL_PAIR(const_tbl+98124, const_tbl+105978)
MAKE_LITERAL_PAIR(const_tbl+98107, const_tbl+105995)
MAKE_LITERAL_PAIR(const_tbl+98090, const_tbl+106012)
MAKE_LITERAL_PAIR(const_tbl+98073, const_tbl+106029)
MAKE_LITERAL_PAIR(const_tbl+98056, const_tbl+106046)
MAKE_LITERAL_PAIR(const_tbl+98039, const_tbl+106063)
MAKE_LITERAL_PAIR(const_tbl+98022, const_tbl+106080)
MAKE_LITERAL_PAIR(const_tbl+98005, const_tbl+106097)
MAKE_LITERAL_PAIR(const_tbl+97988, const_tbl+106114)
MAKE_LITERAL_PAIR(const_tbl+97971, const_tbl+106131)
MAKE_LITERAL_PAIR(const_tbl+97954, const_tbl+106148)
MAKE_LITERAL_PAIR(const_tbl+97937, const_tbl+106165)
MAKE_LITERAL_PAIR(const_tbl+97920, const_tbl+106182)
MAKE_LITERAL_PAIR(const_tbl+97903, const_tbl+106199)
MAKE_LITERAL_PAIR(const_tbl+97886, const_tbl+106216)
MAKE_LITERAL_PAIR(const_tbl+97869, const_tbl+106233)
MAKE_LITERAL_PAIR(const_tbl+97852, const_tbl+106250)
MAKE_LITERAL_PAIR(const_tbl+97835, const_tbl+106267)
MAKE_LITERAL_PAIR(const_tbl+97818, const_tbl+106284)
MAKE_LITERAL_PAIR(const_tbl+97801, const_tbl+106301)
MAKE_LITERAL_PAIR(const_tbl+97784, const_tbl+106318)
MAKE_LITERAL_PAIR(const_tbl+97767, const_tbl+106335)
MAKE_LITERAL_PAIR(const_tbl+97750, const_tbl+106352)
MAKE_LITERAL_PAIR(const_tbl+97733, const_tbl+106369)
MAKE_LITERAL_PAIR(const_tbl+97716, const_tbl+106386)
MAKE_LITERAL_PAIR(const_tbl+97699, const_tbl+106403)
MAKE_LITERAL_PAIR(const_tbl+97682, const_tbl+106420)
MAKE_LITERAL_PAIR(const_tbl+97665, const_tbl+106437)
MAKE_LITERAL_PAIR(const_tbl+97648, const_tbl+106454)
MAKE_LITERAL_PAIR(const_tbl+97631, const_tbl+106471)
MAKE_LITERAL_PAIR(const_tbl+97614, const_tbl+106488)
MAKE_LITERAL_PAIR(const_tbl+97597, const_tbl+106505)
MAKE_LITERAL_PAIR(const_tbl+97580, const_tbl+106522)
MAKE_LITERAL_PAIR(const_tbl+97563, const_tbl+106539)
MAKE_LITERAL_PAIR(const_tbl+97546, const_tbl+106556)
MAKE_LITERAL_PAIR(const_tbl+97529, const_tbl+106573)
MAKE_LITERAL_PAIR(const_tbl+97512, const_tbl+106590)
MAKE_LITERAL_PAIR(const_tbl+97495, const_tbl+106607)
MAKE_LITERAL_PAIR(const_tbl+97478, const_tbl+106624)
MAKE_LITERAL_PAIR(const_tbl+97461, const_tbl+106641)
MAKE_LITERAL_PAIR(const_tbl+97444, const_tbl+106658)
MAKE_LITERAL_PAIR(const_tbl+97427, const_tbl+106675)
MAKE_LITERAL_PAIR(const_tbl+97410, const_tbl+106692)
MAKE_LITERAL_PAIR(const_tbl+97393, const_tbl+106709)
MAKE_LITERAL_PAIR(const_tbl+97376, const_tbl+106726)
MAKE_LITERAL_PAIR(const_tbl+97359, const_tbl+106743)
MAKE_LITERAL_PAIR(const_tbl+97342, const_tbl+106760)
MAKE_LITERAL_PAIR(const_tbl+97325, const_tbl+106777)
MAKE_LITERAL_PAIR(const_tbl+97308, const_tbl+106794)
MAKE_LITERAL_PAIR(const_tbl+97291, const_tbl+106811)
MAKE_LITERAL_PAIR(const_tbl+97274, const_tbl+106828)
MAKE_LITERAL_PAIR(const_tbl+97257, const_tbl+106845)
MAKE_LITERAL_PAIR(const_tbl+97240, const_tbl+106862)
MAKE_LITERAL_PAIR(const_tbl+97223, const_tbl+106879)
MAKE_LITERAL_PAIR(const_tbl+97206, const_tbl+106896)
MAKE_LITERAL_PAIR(const_tbl+97189, const_tbl+106913)
MAKE_LITERAL_PAIR(const_tbl+97172, const_tbl+106930)
MAKE_LITERAL_PAIR(const_tbl+97155, const_tbl+106947)
MAKE_LITERAL_PAIR(const_tbl+97138, const_tbl+106964)
MAKE_LITERAL_PAIR(const_tbl+97121, const_tbl+106981)
MAKE_LITERAL_PAIR(const_tbl+97104, const_tbl+106998)
MAKE_LITERAL_PAIR(const_tbl+97087, const_tbl+107015)
MAKE_LITERAL_PAIR(const_tbl+97070, const_tbl+107032)
MAKE_LITERAL_PAIR(const_tbl+97053, const_tbl+107049)
MAKE_LITERAL_PAIR(const_tbl+97036, const_tbl+107066)
MAKE_LITERAL_PAIR(const_tbl+97019, const_tbl+107083)
MAKE_LITERAL_PAIR(const_tbl+97002, const_tbl+107100)
MAKE_LITERAL_PAIR(const_tbl+96985, const_tbl+107117)
MAKE_LITERAL_PAIR(const_tbl+96968, const_tbl+107134)
MAKE_LITERAL_PAIR(const_tbl+96951, const_tbl+107151)
MAKE_LITERAL_PAIR(const_tbl+96934, const_tbl+107168)
MAKE_LITERAL_PAIR(const_tbl+96917, const_tbl+107185)
MAKE_LITERAL_PAIR(const_tbl+96900, const_tbl+107202)
MAKE_LITERAL_PAIR(const_tbl+96883, const_tbl+107219)
MAKE_LITERAL_PAIR(const_tbl+96866, const_tbl+107236)
MAKE_LITERAL_PAIR(const_tbl+96849, const_tbl+107253)
MAKE_LITERAL_PAIR(const_tbl+96832, const_tbl+107270)
MAKE_LITERAL_PAIR(const_tbl+96815, const_tbl+107287)
MAKE_LITERAL_PAIR(const_tbl+96798, const_tbl+107304)
MAKE_LITERAL_PAIR(const_tbl+96781, const_tbl+107321)
MAKE_LITERAL_PAIR(const_tbl+96764, const_tbl+107338)
MAKE_LITERAL_PAIR(const_tbl+96747, const_tbl+107355)
MAKE_LITERAL_PAIR(const_tbl+96730, const_tbl+107372)
MAKE_LITERAL_PAIR(const_tbl+96713, const_tbl+107389)
MAKE_LITERAL_PAIR(const_tbl+96696, const_tbl+107406)
MAKE_LITERAL_PAIR(const_tbl+96679, const_tbl+107423)
MAKE_LITERAL_PAIR(const_tbl+96662, const_tbl+107440)
MAKE_LITERAL_PAIR(const_tbl+96645, const_tbl+107457)
MAKE_LITERAL_PAIR(const_tbl+96628, const_tbl+107474)
MAKE_LITERAL_PAIR(const_tbl+96611, const_tbl+107491)
MAKE_LITERAL_PAIR(const_tbl+96594, const_tbl+107508)
MAKE_LITERAL_PAIR(const_tbl+96577, const_tbl+107525)
MAKE_LITERAL_PAIR(const_tbl+96560, const_tbl+107542)
MAKE_LITERAL_PAIR(const_tbl+96543, const_tbl+107559)
MAKE_LITERAL_PAIR(const_tbl+96526, const_tbl+107576)
MAKE_LITERAL_PAIR(const_tbl+96509, const_tbl+107593)
MAKE_LITERAL_PAIR(const_tbl+96492, const_tbl+107610)
MAKE_LITERAL_PAIR(const_tbl+96475, const_tbl+107627)
MAKE_LITERAL_PAIR(const_tbl+96458, const_tbl+107644)
MAKE_LITERAL_PAIR(const_tbl+96441, const_tbl+107661)
MAKE_LITERAL_PAIR(const_tbl+96424, const_tbl+107678)
MAKE_LITERAL_PAIR(const_tbl+96407, const_tbl+107695)
MAKE_LITERAL_PAIR(const_tbl+96390, const_tbl+107712)
MAKE_LITERAL_PAIR(const_tbl+96373, const_tbl+107729)
MAKE_LITERAL_PAIR(const_tbl+96356, const_tbl+107746)
MAKE_LITERAL_PAIR(const_tbl+96339, const_tbl+107763)
MAKE_LITERAL_PAIR(const_tbl+96322, const_tbl+107780)
MAKE_LITERAL_PAIR(const_tbl+96305, const_tbl+107797)
MAKE_LITERAL_PAIR(const_tbl+96288, const_tbl+107814)
MAKE_LITERAL_PAIR(const_tbl+96271, const_tbl+107831)
MAKE_LITERAL_PAIR(const_tbl+96254, const_tbl+107848)
MAKE_LITERAL_PAIR(const_tbl+96237, const_tbl+107865)
MAKE_LITERAL_PAIR(const_tbl+96220, const_tbl+107882)
MAKE_LITERAL_PAIR(const_tbl+96203, const_tbl+107899)
MAKE_LITERAL_PAIR(const_tbl+96186, const_tbl+107916)
MAKE_LITERAL_PAIR(const_tbl+96169, const_tbl+107933)
MAKE_LITERAL_PAIR(const_tbl+96152, const_tbl+107950)
MAKE_LITERAL_PAIR(const_tbl+96135, const_tbl+107967)
MAKE_LITERAL_PAIR(const_tbl+96118, const_tbl+107984)
MAKE_LITERAL_PAIR(const_tbl+96101, const_tbl+108001)
MAKE_LITERAL_PAIR(const_tbl+96084, const_tbl+108018)
MAKE_LITERAL_PAIR(const_tbl+96067, const_tbl+108035)
MAKE_LITERAL_PAIR(const_tbl+96050, const_tbl+108052)
MAKE_LITERAL_PAIR(const_tbl+96033, const_tbl+108069)
MAKE_LITERAL_PAIR(const_tbl+96016, const_tbl+108086)
MAKE_LITERAL_PAIR(const_tbl+95999, const_tbl+108103)
MAKE_LITERAL_PAIR(const_tbl+95982, const_tbl+108120)
MAKE_LITERAL_PAIR(const_tbl+95965, const_tbl+108137)
MAKE_LITERAL_PAIR(const_tbl+95948, const_tbl+108154)
MAKE_LITERAL_PAIR(const_tbl+95931, const_tbl+108171)
MAKE_LITERAL_PAIR(const_tbl+95914, const_tbl+108188)
MAKE_LITERAL_PAIR(const_tbl+95897, const_tbl+108205)
MAKE_LITERAL_PAIR(const_tbl+95880, const_tbl+108222)
MAKE_LITERAL_PAIR(const_tbl+95863, const_tbl+108239)
MAKE_LITERAL_PAIR(const_tbl+95846, const_tbl+108256)
MAKE_LITERAL_PAIR(const_tbl+95829, const_tbl+108273)
MAKE_LITERAL_PAIR(const_tbl+95812, const_tbl+108290)
MAKE_LITERAL_PAIR(const_tbl+95795, const_tbl+108307)
MAKE_LITERAL_PAIR(const_tbl+95778, const_tbl+108324)
MAKE_LITERAL_PAIR(const_tbl+95761, const_tbl+108341)
MAKE_LITERAL_PAIR(const_tbl+95744, const_tbl+108358)
MAKE_LITERAL_PAIR(const_tbl+95727, const_tbl+108375)
MAKE_LITERAL_PAIR(const_tbl+95710, const_tbl+108392)
MAKE_LITERAL_PAIR(const_tbl+95693, const_tbl+108409)
MAKE_LITERAL_PAIR(const_tbl+95676, const_tbl+108426)
MAKE_LITERAL_PAIR(const_tbl+95659, const_tbl+108443)
MAKE_LITERAL_PAIR(const_tbl+95642, const_tbl+108460)
MAKE_LITERAL_PAIR(const_tbl+95625, const_tbl+108477)
MAKE_LITERAL_PAIR(const_tbl+95608, const_tbl+108494)
MAKE_LITERAL_PAIR(const_tbl+95591, const_tbl+108511)
MAKE_LITERAL_PAIR(const_tbl+95574, const_tbl+108528)
MAKE_LITERAL_PAIR(const_tbl+95557, const_tbl+108545)
MAKE_LITERAL_PAIR(const_tbl+95540, const_tbl+108562)
MAKE_LITERAL_PAIR(const_tbl+95523, const_tbl+108579)
MAKE_LITERAL_PAIR(const_tbl+95506, const_tbl+108596)
MAKE_LITERAL_PAIR(const_tbl+95489, const_tbl+108613)
MAKE_LITERAL_PAIR(const_tbl+95472, const_tbl+108630)
MAKE_LITERAL_PAIR(const_tbl+95455, const_tbl+108647)
MAKE_LITERAL_PAIR(const_tbl+95438, const_tbl+108664)
MAKE_LITERAL_PAIR(const_tbl+95421, const_tbl+108681)
MAKE_LITERAL_PAIR(const_tbl+95404, const_tbl+108698)
MAKE_LITERAL_PAIR(const_tbl+95387, const_tbl+108715)
MAKE_LITERAL_PAIR(const_tbl+95370, const_tbl+108732)
MAKE_LITERAL_PAIR(const_tbl+95353, const_tbl+108749)
MAKE_LITERAL_PAIR(const_tbl+95336, const_tbl+108766)
MAKE_LITERAL_PAIR(const_tbl+95319, const_tbl+108783)
MAKE_LITERAL_PAIR(const_tbl+95302, const_tbl+108800)
MAKE_LITERAL_PAIR(const_tbl+95285, const_tbl+108817)
MAKE_LITERAL_PAIR(const_tbl+95268, const_tbl+108834)
MAKE_LITERAL_PAIR(const_tbl+95251, const_tbl+108851)
MAKE_LITERAL_PAIR(const_tbl+95234, const_tbl+108868)
MAKE_LITERAL_PAIR(const_tbl+95217, const_tbl+108885)
MAKE_LITERAL_PAIR(const_tbl+95200, const_tbl+108902)
MAKE_LITERAL_PAIR(const_tbl+95183, const_tbl+108919)
MAKE_LITERAL_PAIR(const_tbl+95166, const_tbl+108936)
MAKE_LITERAL_PAIR(const_tbl+95149, const_tbl+108953)
MAKE_LITERAL_PAIR(const_tbl+95132, const_tbl+108970)
MAKE_LITERAL_PAIR(const_tbl+95115, const_tbl+108987)
MAKE_LITERAL_PAIR(const_tbl+95098, const_tbl+109004)
MAKE_LITERAL_PAIR(const_tbl+95081, const_tbl+109021)
MAKE_LITERAL_PAIR(const_tbl+95064, const_tbl+109038)
MAKE_LITERAL_PAIR(const_tbl+95047, const_tbl+109055)
MAKE_LITERAL_PAIR(const_tbl+95030, const_tbl+109072)
MAKE_LITERAL_PAIR(const_tbl+95013, const_tbl+109089)
MAKE_LITERAL_PAIR(const_tbl+94996, const_tbl+109106)
MAKE_LITERAL_PAIR(const_tbl+94979, const_tbl+109123)
MAKE_LITERAL_PAIR(const_tbl+94962, const_tbl+109140)
MAKE_LITERAL_PAIR(const_tbl+94945, const_tbl+109157)
MAKE_LITERAL_PAIR(const_tbl+94928, const_tbl+109174)
MAKE_LITERAL_PAIR(const_tbl+94911, const_tbl+109191)
MAKE_LITERAL_PAIR(const_tbl+94894, const_tbl+109208)
MAKE_LITERAL_PAIR(const_tbl+94877, const_tbl+109225)
MAKE_LITERAL_PAIR(const_tbl+94860, const_tbl+109242)
MAKE_LITERAL_PAIR(const_tbl+94843, const_tbl+109259)
MAKE_LITERAL_PAIR(const_tbl+94826, const_tbl+109276)
MAKE_LITERAL_PAIR(const_tbl+94809, const_tbl+109293)
MAKE_LITERAL_PAIR(const_tbl+94792, const_tbl+109310)
MAKE_LITERAL_PAIR(const_tbl+94775, const_tbl+109327)
MAKE_LITERAL_PAIR(const_tbl+94758, const_tbl+109344)
MAKE_LITERAL_PAIR(const_tbl+94741, const_tbl+109361)
MAKE_LITERAL_PAIR(const_tbl+94724, const_tbl+109378)
MAKE_LITERAL_PAIR(const_tbl+94707, const_tbl+109395)
MAKE_LITERAL_PAIR(const_tbl+94690, const_tbl+109412)
MAKE_LITERAL_PAIR(const_tbl+94673, const_tbl+109429)
MAKE_LITERAL_PAIR(const_tbl+94656, const_tbl+109446)
MAKE_LITERAL_PAIR(const_tbl+94639, const_tbl+109463)
MAKE_LITERAL_PAIR(const_tbl+94622, const_tbl+109480)
MAKE_LITERAL_PAIR(const_tbl+94605, const_tbl+109497)
MAKE_LITERAL_PAIR(const_tbl+94588, const_tbl+109514)
MAKE_LITERAL_PAIR(const_tbl+94571, const_tbl+109531)
MAKE_LITERAL_PAIR(const_tbl+94554, const_tbl+109548)
MAKE_LITERAL_PAIR(const_tbl+94537, const_tbl+109565)
MAKE_LITERAL_PAIR(const_tbl+94520, const_tbl+109582)
MAKE_LITERAL_PAIR(const_tbl+94503, const_tbl+109599)
MAKE_LITERAL_PAIR(const_tbl+94486, const_tbl+109616)
MAKE_LITERAL_PAIR(const_tbl+94469, const_tbl+109633)
MAKE_LITERAL_PAIR(const_tbl+94452, const_tbl+109650)
MAKE_LITERAL_PAIR(const_tbl+94435, const_tbl+109667)
MAKE_LITERAL_PAIR(const_tbl+94418, const_tbl+109684)
MAKE_LITERAL_PAIR(const_tbl+94401, const_tbl+109701)
MAKE_LITERAL_PAIR(const_tbl+94384, const_tbl+109718)
MAKE_LITERAL_PAIR(const_tbl+94367, const_tbl+109735)
MAKE_LITERAL_PAIR(const_tbl+94350, const_tbl+109752)
MAKE_LITERAL_PAIR(const_tbl+94333, const_tbl+109769)
MAKE_LITERAL_PAIR(const_tbl+94316, const_tbl+109786)
MAKE_LITERAL_PAIR(const_tbl+94299, const_tbl+109803)
MAKE_LITERAL_PAIR(const_tbl+94282, const_tbl+109820)
MAKE_LITERAL_PAIR(const_tbl+94265, const_tbl+109837)
MAKE_LITERAL_PAIR(const_tbl+94248, const_tbl+109854)
MAKE_LITERAL_PAIR(const_tbl+94231, const_tbl+109871)
MAKE_LITERAL_PAIR(const_tbl+94214, const_tbl+109888)
MAKE_LITERAL_PAIR(const_tbl+94197, const_tbl+109905)
MAKE_LITERAL_PAIR(const_tbl+94180, const_tbl+109922)
MAKE_LITERAL_PAIR(const_tbl+94163, const_tbl+109939)
MAKE_LITERAL_PAIR(const_tbl+94146, const_tbl+109956)
MAKE_LITERAL_PAIR(const_tbl+94129, const_tbl+109973)
MAKE_LITERAL_PAIR(const_tbl+94112, const_tbl+109990)
MAKE_LITERAL_PAIR(const_tbl+94095, const_tbl+110007)
MAKE_LITERAL_PAIR(const_tbl+94078, const_tbl+110024)
MAKE_LITERAL_PAIR(const_tbl+94061, const_tbl+110041)
MAKE_LITERAL_PAIR(const_tbl+94044, const_tbl+110058)
MAKE_LITERAL_PAIR(const_tbl+94027, const_tbl+110075)
MAKE_LITERAL_PAIR(const_tbl+94010, const_tbl+110092)
MAKE_LITERAL_PAIR(const_tbl+93993, const_tbl+110109)
MAKE_LITERAL_PAIR(const_tbl+93976, const_tbl+110126)
MAKE_LITERAL_PAIR(const_tbl+93959, const_tbl+110143)
MAKE_LITERAL_PAIR(const_tbl+93942, const_tbl+110160)
MAKE_LITERAL_PAIR(const_tbl+93925, const_tbl+110177)
MAKE_LITERAL_PAIR(const_tbl+93908, const_tbl+110194)
MAKE_LITERAL_PAIR(const_tbl+93891, const_tbl+110211)
MAKE_LITERAL_PAIR(const_tbl+93874, const_tbl+110228)
MAKE_LITERAL_PAIR(const_tbl+93857, const_tbl+110245)
MAKE_LITERAL_PAIR(const_tbl+93840, const_tbl+110262)
MAKE_LITERAL_PAIR(const_tbl+93823, const_tbl+110279)
MAKE_LITERAL_PAIR(const_tbl+93806, const_tbl+110296)
MAKE_LITERAL_PAIR(const_tbl+93789, const_tbl+110313)
MAKE_LITERAL_PAIR(const_tbl+93772, const_tbl+110330)
MAKE_LITERAL_PAIR(const_tbl+93755, const_tbl+110347)
MAKE_LITERAL_PAIR(const_tbl+93738, const_tbl+110364)
MAKE_LITERAL_PAIR(const_tbl+93721, const_tbl+110381)
MAKE_LITERAL_PAIR(const_tbl+93704, const_tbl+110398)
MAKE_LITERAL_PAIR(const_tbl+93687, const_tbl+110415)
MAKE_LITERAL_PAIR(const_tbl+93670, const_tbl+110432)
MAKE_LITERAL_PAIR(const_tbl+93653, const_tbl+110449)
MAKE_LITERAL_PAIR(const_tbl+93636, const_tbl+110466)
MAKE_LITERAL_PAIR(const_tbl+93619, const_tbl+110483)
MAKE_LITERAL_PAIR(const_tbl+93602, const_tbl+110500)
MAKE_LITERAL_PAIR(const_tbl+93585, const_tbl+110517)
MAKE_LITERAL_PAIR(const_tbl+93568, const_tbl+110534)
MAKE_LITERAL_PAIR(const_tbl+93551, const_tbl+110551)
MAKE_LITERAL_PAIR(const_tbl+93534, const_tbl+110568)
MAKE_LITERAL_PAIR(const_tbl+93517, const_tbl+110585)
MAKE_LITERAL_PAIR(const_tbl+93500, const_tbl+110602)
MAKE_LITERAL_PAIR(const_tbl+93483, const_tbl+110619)
MAKE_LITERAL_PAIR(const_tbl+93466, const_tbl+110636)
MAKE_LITERAL_PAIR(const_tbl+93449, const_tbl+110653)
MAKE_LITERAL_PAIR(const_tbl+93432, const_tbl+110670)
MAKE_LITERAL_PAIR(const_tbl+93415, const_tbl+110687)
MAKE_LITERAL_PAIR(const_tbl+93398, const_tbl+110704)
MAKE_LITERAL_PAIR(const_tbl+93381, const_tbl+110721)
MAKE_LITERAL_PAIR(const_tbl+93364, const_tbl+110738)
MAKE_LITERAL_PAIR(const_tbl+93347, const_tbl+110755)
MAKE_LITERAL_PAIR(const_tbl+93330, const_tbl+110772)
MAKE_LITERAL_PAIR(const_tbl+93313, const_tbl+110789)
MAKE_LITERAL_PAIR(const_tbl+93296, const_tbl+110806)
MAKE_LITERAL_PAIR(const_tbl+93279, const_tbl+110823)
MAKE_LITERAL_PAIR(const_tbl+93262, const_tbl+110840)
MAKE_LITERAL_PAIR(const_tbl+93245, const_tbl+110857)
MAKE_LITERAL_PAIR(const_tbl+93228, const_tbl+110874)
MAKE_LITERAL_PAIR(const_tbl+93211, const_tbl+110891)
MAKE_LITERAL_PAIR(const_tbl+93194, const_tbl+110908)
MAKE_LITERAL_PAIR(const_tbl+93177, const_tbl+110925)
MAKE_LITERAL_PAIR(const_tbl+93160, const_tbl+110942)
MAKE_LITERAL_PAIR(const_tbl+93143, const_tbl+110959)
MAKE_LITERAL_PAIR(const_tbl+93126, const_tbl+110976)
MAKE_LITERAL_PAIR(const_tbl+93109, const_tbl+110993)
MAKE_LITERAL_PAIR(const_tbl+93092, const_tbl+111010)
MAKE_LITERAL_PAIR(const_tbl+93075, const_tbl+111027)
MAKE_LITERAL_PAIR(const_tbl+93058, const_tbl+111044)
MAKE_LITERAL_PAIR(const_tbl+93041, const_tbl+111061)
MAKE_LITERAL_PAIR(const_tbl+93024, const_tbl+111078)
MAKE_LITERAL_PAIR(const_tbl+93007, const_tbl+111095)
MAKE_LITERAL_PAIR(const_tbl+92990, const_tbl+111112)
MAKE_LITERAL_PAIR(const_tbl+92973, const_tbl+111129)
MAKE_LITERAL_PAIR(const_tbl+92956, const_tbl+111146)
MAKE_LITERAL_PAIR(const_tbl+92939, const_tbl+111163)
MAKE_LITERAL_PAIR(const_tbl+92922, const_tbl+111180)
MAKE_LITERAL_PAIR(const_tbl+92905, const_tbl+111197)
MAKE_LITERAL_PAIR(const_tbl+92888, const_tbl+111214)
MAKE_LITERAL_PAIR(const_tbl+92871, const_tbl+111231)
MAKE_LITERAL_PAIR(const_tbl+92854, const_tbl+111248)
MAKE_LITERAL_PAIR(const_tbl+92837, const_tbl+111265)
MAKE_LITERAL_PAIR(const_tbl+92820, const_tbl+111282)
MAKE_LITERAL_PAIR(const_tbl+92803, const_tbl+111299)
MAKE_LITERAL_PAIR(const_tbl+92786, const_tbl+111316)
MAKE_LITERAL_PAIR(const_tbl+92769, const_tbl+111333)
MAKE_LITERAL_PAIR(const_tbl+92752, const_tbl+111350)
MAKE_LITERAL_PAIR(const_tbl+92735, const_tbl+111367)
MAKE_LITERAL_PAIR(const_tbl+92718, const_tbl+111384)
MAKE_LITERAL_PAIR(const_tbl+92701, const_tbl+111401)
MAKE_LITERAL_PAIR(const_tbl+92684, const_tbl+111418)
MAKE_LITERAL_PAIR(const_tbl+92667, const_tbl+111435)
MAKE_LITERAL_PAIR(const_tbl+92650, const_tbl+111452)
MAKE_LITERAL_PAIR(const_tbl+92633, const_tbl+111469)
MAKE_LITERAL_PAIR(const_tbl+92616, const_tbl+111486)
MAKE_LITERAL_PAIR(const_tbl+92599, const_tbl+111503)
MAKE_LITERAL_PAIR(const_tbl+92582, const_tbl+111520)
MAKE_LITERAL_PAIR(const_tbl+92565, const_tbl+111537)
MAKE_LITERAL_PAIR(const_tbl+92548, const_tbl+111554)
MAKE_LITERAL_PAIR(const_tbl+92531, const_tbl+111571)
MAKE_LITERAL_PAIR(const_tbl+92514, const_tbl+111588)
MAKE_LITERAL_PAIR(const_tbl+92497, const_tbl+111605)
MAKE_LITERAL_PAIR(const_tbl+92480, const_tbl+111622)
MAKE_LITERAL_PAIR(const_tbl+92463, const_tbl+111639)
MAKE_LITERAL_PAIR(const_tbl+92446, const_tbl+111656)
MAKE_LITERAL_PAIR(const_tbl+92429, const_tbl+111673)
MAKE_LITERAL_PAIR(const_tbl+92412, const_tbl+111690)
MAKE_LITERAL_PAIR(const_tbl+92395, const_tbl+111707)
MAKE_LITERAL_PAIR(const_tbl+92378, const_tbl+111724)
MAKE_LITERAL_PAIR(const_tbl+92361, const_tbl+111741)
MAKE_LITERAL_PAIR(const_tbl+92344, const_tbl+111758)
MAKE_LITERAL_PAIR(const_tbl+92327, const_tbl+111775)
MAKE_LITERAL_PAIR(const_tbl+92310, const_tbl+111792)
MAKE_LITERAL_PAIR(const_tbl+92293, const_tbl+111809)
MAKE_LITERAL_PAIR(const_tbl+92276, const_tbl+111826)
MAKE_LITERAL_PAIR(const_tbl+92259, const_tbl+111843)
MAKE_LITERAL_PAIR(const_tbl+92242, const_tbl+111860)
MAKE_LITERAL_PAIR(const_tbl+92225, const_tbl+111877)
MAKE_LITERAL_PAIR(const_tbl+92208, const_tbl+111894)
MAKE_LITERAL_PAIR(const_tbl+92191, const_tbl+111911)
MAKE_LITERAL_PAIR(const_tbl+92174, const_tbl+111928)
MAKE_LITERAL_PAIR(const_tbl+92157, const_tbl+111945)
MAKE_LITERAL_PAIR(const_tbl+92140, const_tbl+111962)
MAKE_LITERAL_PAIR(const_tbl+92123, const_tbl+111979)
MAKE_LITERAL_PAIR(const_tbl+92106, const_tbl+111996)
MAKE_LITERAL_PAIR(const_tbl+92089, const_tbl+112013)
MAKE_LITERAL_PAIR(const_tbl+92072, const_tbl+112030)
MAKE_LITERAL_PAIR(const_tbl+92055, const_tbl+112047)
MAKE_LITERAL_PAIR(const_tbl+92038, const_tbl+112064)
MAKE_LITERAL_PAIR(const_tbl+92021, const_tbl+112081)
MAKE_LITERAL_PAIR(const_tbl+92004, const_tbl+112098)
MAKE_LITERAL_PAIR(const_tbl+91987, const_tbl+112115)
MAKE_LITERAL_PAIR(const_tbl+91970, const_tbl+112132)
MAKE_LITERAL_PAIR(const_tbl+91953, const_tbl+112149)
MAKE_LITERAL_PAIR(const_tbl+91936, const_tbl+112166)
MAKE_LITERAL_PAIR(const_tbl+91919, const_tbl+112183)
MAKE_LITERAL_PAIR(const_tbl+91902, const_tbl+112200)
MAKE_LITERAL_PAIR(const_tbl+91885, const_tbl+112217)
MAKE_LITERAL_PAIR(const_tbl+91868, const_tbl+112234)
MAKE_LITERAL_PAIR(const_tbl+91851, const_tbl+112251)
MAKE_LITERAL_PAIR(const_tbl+91834, const_tbl+112268)
MAKE_LITERAL_PAIR(const_tbl+91817, const_tbl+112285)
MAKE_LITERAL_PAIR(const_tbl+91800, const_tbl+112302)
MAKE_LITERAL_PAIR(const_tbl+91783, const_tbl+112319)
MAKE_LITERAL_PAIR(const_tbl+91766, const_tbl+112336)
MAKE_LITERAL_PAIR(const_tbl+91749, const_tbl+112353)
MAKE_LITERAL_PAIR(const_tbl+91732, const_tbl+112370)
MAKE_LITERAL_PAIR(const_tbl+91715, const_tbl+112387)
MAKE_LITERAL_PAIR(const_tbl+91698, const_tbl+112404)
MAKE_LITERAL_PAIR(const_tbl+91681, const_tbl+112421)
MAKE_LITERAL_PAIR(const_tbl+91664, const_tbl+112438)
MAKE_LITERAL_PAIR(const_tbl+91647, const_tbl+112455)
MAKE_LITERAL_PAIR(const_tbl+91630, const_tbl+112472)
MAKE_LITERAL_PAIR(const_tbl+91613, const_tbl+112489)
MAKE_LITERAL_PAIR(const_tbl+91596, const_tbl+112506)
MAKE_LITERAL_PAIR(const_tbl+91579, const_tbl+112523)
MAKE_LITERAL_PAIR(const_tbl+91562, const_tbl+112540)
MAKE_LITERAL_PAIR(const_tbl+91545, const_tbl+112557)
MAKE_LITERAL_PAIR(const_tbl+91528, const_tbl+112574)
MAKE_LITERAL_PAIR(const_tbl+91511, const_tbl+112591)
MAKE_LITERAL_PAIR(const_tbl+91494, const_tbl+112608)
MAKE_LITERAL_PAIR(const_tbl+91477, const_tbl+112625)
MAKE_LITERAL_PAIR(const_tbl+91460, const_tbl+112642)
MAKE_LITERAL_PAIR(const_tbl+91443, const_tbl+112659)
MAKE_LITERAL_PAIR(const_tbl+91426, const_tbl+112676)
MAKE_LITERAL_PAIR(const_tbl+91409, const_tbl+112693)
MAKE_LITERAL_PAIR(const_tbl+91392, const_tbl+112710)
MAKE_LITERAL_PAIR(const_tbl+91375, const_tbl+112727)
MAKE_LITERAL_PAIR(const_tbl+91358, const_tbl+112744)
MAKE_LITERAL_PAIR(const_tbl+91341, const_tbl+112761)
MAKE_LITERAL_PAIR(const_tbl+91324, const_tbl+112778)
MAKE_LITERAL_PAIR(const_tbl+91307, const_tbl+112795)
MAKE_LITERAL_PAIR(const_tbl+91290, const_tbl+112812)
MAKE_LITERAL_PAIR(const_tbl+91273, const_tbl+112829)
MAKE_LITERAL_PAIR(const_tbl+91256, const_tbl+112846)
MAKE_LITERAL_PAIR(const_tbl+91239, const_tbl+112863)
MAKE_LITERAL_PAIR(const_tbl+91222, const_tbl+112880)
MAKE_LITERAL_PAIR(const_tbl+91205, const_tbl+112897)
MAKE_LITERAL_PAIR(const_tbl+91188, const_tbl+112914)
MAKE_LITERAL_PAIR(const_tbl+91171, const_tbl+112931)
MAKE_LITERAL_PAIR(const_tbl+91154, const_tbl+112948)
MAKE_LITERAL_PAIR(const_tbl+91137, const_tbl+112965)
MAKE_LITERAL_PAIR(const_tbl+91120, const_tbl+112982)
MAKE_LITERAL_PAIR(const_tbl+91103, const_tbl+112999)
MAKE_LITERAL_PAIR(const_tbl+91086, const_tbl+113016)
MAKE_LITERAL_PAIR(const_tbl+91069, const_tbl+113033)
MAKE_LITERAL_PAIR(const_tbl+91052, const_tbl+113050)
MAKE_LITERAL_PAIR(const_tbl+91035, const_tbl+113067)
MAKE_LITERAL_PAIR(const_tbl+91018, const_tbl+113084)
MAKE_LITERAL_PAIR(const_tbl+91001, const_tbl+113101)
MAKE_LITERAL_PAIR(const_tbl+90984, const_tbl+113118)
MAKE_LITERAL_PAIR(const_tbl+90967, const_tbl+113135)
MAKE_LITERAL_PAIR(const_tbl+90950, const_tbl+113152)
MAKE_LITERAL_PAIR(const_tbl+90933, const_tbl+113169)
MAKE_LITERAL_PAIR(const_tbl+90916, const_tbl+113186)
MAKE_LITERAL_PAIR(const_tbl+90899, const_tbl+113203)
MAKE_LITERAL_PAIR(const_tbl+90882, const_tbl+113220)
MAKE_LITERAL_PAIR(const_tbl+90865, const_tbl+113237)
MAKE_LITERAL_PAIR(const_tbl+90848, const_tbl+113254)
MAKE_LITERAL_PAIR(const_tbl+90831, const_tbl+113271)
MAKE_LITERAL_PAIR(const_tbl+90814, const_tbl+113288)
MAKE_LITERAL_PAIR(const_tbl+90797, const_tbl+113305)
MAKE_LITERAL_PAIR(const_tbl+90780, const_tbl+113322)
MAKE_LITERAL_PAIR(const_tbl+90763, const_tbl+113339)
MAKE_LITERAL_PAIR(const_tbl+90746, const_tbl+113356)
MAKE_LITERAL_PAIR(const_tbl+90729, const_tbl+113373)
MAKE_LITERAL_PAIR(const_tbl+90712, const_tbl+113390)
MAKE_LITERAL_PAIR(const_tbl+90695, const_tbl+113407)
MAKE_LITERAL_PAIR(const_tbl+90678, const_tbl+113424)
MAKE_LITERAL_PAIR(const_tbl+90661, const_tbl+113441)
MAKE_LITERAL_PAIR(const_tbl+90644, const_tbl+113458)
MAKE_LITERAL_PAIR(const_tbl+90627, const_tbl+113475)
MAKE_LITERAL_PAIR(const_tbl+90610, const_tbl+113492)
MAKE_LITERAL_PAIR(const_tbl+90593, const_tbl+113509)
MAKE_LITERAL_PAIR(const_tbl+90576, const_tbl+113526)
MAKE_LITERAL_PAIR(const_tbl+90559, const_tbl+113543)
MAKE_LITERAL_PAIR(const_tbl+90542, const_tbl+113560)
MAKE_LITERAL_PAIR(const_tbl+90525, const_tbl+113577)
MAKE_LITERAL_PAIR(const_tbl+90508, const_tbl+113594)
MAKE_LITERAL_PAIR(const_tbl+90491, const_tbl+113611)
MAKE_LITERAL_PAIR(const_tbl+90474, const_tbl+113628)
MAKE_LITERAL_PAIR(const_tbl+90457, const_tbl+113645)
MAKE_LITERAL_PAIR(const_tbl+90440, const_tbl+113662)
MAKE_LITERAL_PAIR(const_tbl+90423, const_tbl+113679)
MAKE_LITERAL_PAIR(const_tbl+90406, const_tbl+113696)
MAKE_LITERAL_PAIR(const_tbl+90389, const_tbl+113713)
MAKE_LITERAL_PAIR(const_tbl+90372, const_tbl+113730)
MAKE_LITERAL_PAIR(const_tbl+90355, const_tbl+113747)
MAKE_LITERAL_PAIR(const_tbl+90338, const_tbl+113764)
MAKE_LITERAL_PAIR(const_tbl+90321, const_tbl+113781)
MAKE_LITERAL_PAIR(const_tbl+90304, const_tbl+113798)
MAKE_LITERAL_PAIR(const_tbl+90287, const_tbl+113815)
MAKE_LITERAL_PAIR(const_tbl+90270, const_tbl+113832)
MAKE_LITERAL_PAIR(const_tbl+90253, const_tbl+113849)
MAKE_LITERAL_PAIR(const_tbl+90236, const_tbl+113866)
MAKE_LITERAL_PAIR(const_tbl+90219, const_tbl+113883)
MAKE_LITERAL_PAIR(const_tbl+90202, const_tbl+113900)
MAKE_LITERAL_PAIR(const_tbl+90185, const_tbl+113917)
MAKE_LITERAL_PAIR(const_tbl+90168, const_tbl+113934)
MAKE_LITERAL_PAIR(const_tbl+90151, const_tbl+113951)
MAKE_LITERAL_PAIR(const_tbl+90134, const_tbl+113968)
MAKE_LITERAL_PAIR(const_tbl+90117, const_tbl+113985)
MAKE_LITERAL_PAIR(const_tbl+90100, const_tbl+114002)
MAKE_LITERAL_PAIR(const_tbl+90083, const_tbl+114019)
MAKE_LITERAL_PAIR(const_tbl+90066, const_tbl+114036)
MAKE_LITERAL_PAIR(const_tbl+90049, const_tbl+114053)
MAKE_LITERAL_PAIR(const_tbl+90032, const_tbl+114070)
MAKE_LITERAL_PAIR(const_tbl+90015, const_tbl+114087)
MAKE_LITERAL_PAIR(const_tbl+89998, const_tbl+114104)
MAKE_LITERAL_PAIR(const_tbl+89981, const_tbl+114121)
MAKE_LITERAL_PAIR(const_tbl+89964, const_tbl+114138)
MAKE_LITERAL_PAIR(const_tbl+89947, const_tbl+114155)
MAKE_LITERAL_PAIR(const_tbl+89930, const_tbl+114172)
MAKE_LITERAL_PAIR(const_tbl+89913, const_tbl+114189)
MAKE_LITERAL_PAIR(const_tbl+89896, const_tbl+114206)
MAKE_LITERAL_PAIR(const_tbl+89879, const_tbl+114223)
MAKE_LITERAL_PAIR(const_tbl+89862, const_tbl+114240)
MAKE_LITERAL_PAIR(const_tbl+89845, const_tbl+114257)
MAKE_LITERAL_PAIR(const_tbl+89828, const_tbl+114274)
MAKE_LITERAL_PAIR(const_tbl+89811, const_tbl+114291)
MAKE_LITERAL_PAIR(const_tbl+89794, const_tbl+114308)
MAKE_LITERAL_PAIR(const_tbl+89777, const_tbl+114325)
MAKE_LITERAL_PAIR(const_tbl+89760, const_tbl+114342)
MAKE_LITERAL_PAIR(const_tbl+89743, const_tbl+114359)
MAKE_LITERAL_PAIR(const_tbl+89726, const_tbl+114376)
MAKE_LITERAL_PAIR(const_tbl+89709, const_tbl+114393)
MAKE_LITERAL_PAIR(const_tbl+89692, const_tbl+114410)
MAKE_LITERAL_PAIR(const_tbl+89675, const_tbl+114427)
MAKE_LITERAL_PAIR(const_tbl+89658, const_tbl+114444)
MAKE_LITERAL_PAIR(const_tbl+89641, const_tbl+114461)
MAKE_LITERAL_PAIR(const_tbl+89624, const_tbl+114478)
MAKE_LITERAL_PAIR(const_tbl+89607, const_tbl+114495)
MAKE_LITERAL_PAIR(const_tbl+89590, const_tbl+114512)
MAKE_LITERAL_PAIR(const_tbl+89573, const_tbl+114529)
MAKE_LITERAL_PAIR(const_tbl+89556, const_tbl+114546)
MAKE_LITERAL_PAIR(const_tbl+89539, const_tbl+114563)
MAKE_LITERAL_PAIR(const_tbl+89522, const_tbl+114580)
MAKE_LITERAL_PAIR(const_tbl+89505, const_tbl+114597)
MAKE_LITERAL_PAIR(const_tbl+89488, const_tbl+114614)
MAKE_LITERAL_PAIR(const_tbl+89471, const_tbl+114631)
MAKE_LITERAL_PAIR(const_tbl+89454, const_tbl+114648)
MAKE_LITERAL_PAIR(const_tbl+89437, const_tbl+114665)
MAKE_LITERAL_PAIR(const_tbl+89420, const_tbl+114682)
MAKE_LITERAL_PAIR(const_tbl+89403, const_tbl+114699)
MAKE_LITERAL_PAIR(const_tbl+89386, const_tbl+114716)
MAKE_LITERAL_PAIR(const_tbl+89369, const_tbl+114733)
MAKE_LITERAL_PAIR(const_tbl+89352, const_tbl+114750)
MAKE_LITERAL_PAIR(const_tbl+89335, const_tbl+114767)
MAKE_LITERAL_PAIR(const_tbl+89318, const_tbl+114784)
MAKE_LITERAL_PAIR(const_tbl+89301, const_tbl+114801)
MAKE_LITERAL_PAIR(const_tbl+89284, const_tbl+114818)
MAKE_LITERAL_PAIR(const_tbl+89267, const_tbl+114835)
MAKE_LITERAL_PAIR(const_tbl+89250, const_tbl+114852)
MAKE_LITERAL_PAIR(const_tbl+89233, const_tbl+114869)
MAKE_LITERAL_PAIR(const_tbl+89216, const_tbl+114886)
MAKE_LITERAL_PAIR(const_tbl+89199, const_tbl+114903)
MAKE_LITERAL_PAIR(const_tbl+89182, const_tbl+114920)
MAKE_LITERAL_PAIR(const_tbl+89165, const_tbl+114937)
MAKE_LITERAL_PAIR(const_tbl+89148, const_tbl+114954)
MAKE_LITERAL_PAIR(const_tbl+89131, const_tbl+114971)
MAKE_LITERAL_PAIR(const_tbl+89114, const_tbl+114988)
MAKE_LITERAL_PAIR(const_tbl+89097, const_tbl+115005)
MAKE_LITERAL_PAIR(const_tbl+89080, const_tbl+115022)
MAKE_LITERAL_PAIR(const_tbl+89063, const_tbl+115039)
MAKE_LITERAL_PAIR(const_tbl+89046, const_tbl+115056)
MAKE_LITERAL_PAIR(const_tbl+89029, const_tbl+115073)
MAKE_LITERAL_PAIR(const_tbl+89012, const_tbl+115090)
MAKE_LITERAL_PAIR(const_tbl+88995, const_tbl+115107)
MAKE_LITERAL_PAIR(const_tbl+88978, const_tbl+115124)
MAKE_LITERAL_PAIR(const_tbl+88961, const_tbl+115141)
MAKE_LITERAL_PAIR(const_tbl+88944, const_tbl+115158)
MAKE_LITERAL_PAIR(const_tbl+88927, const_tbl+115175)
MAKE_LITERAL_PAIR(const_tbl+88910, const_tbl+115192)
MAKE_LITERAL_PAIR(const_tbl+88893, const_tbl+115209)
MAKE_LITERAL_PAIR(const_tbl+88876, const_tbl+115226)
MAKE_LITERAL_PAIR(const_tbl+88859, const_tbl+115243)
MAKE_LITERAL_PAIR(const_tbl+88842, const_tbl+115260)
MAKE_LITERAL_PAIR(const_tbl+88825, const_tbl+115277)
MAKE_LITERAL_PAIR(const_tbl+88808, const_tbl+115294)
MAKE_LITERAL_PAIR(const_tbl+88791, const_tbl+115311)
MAKE_LITERAL_PAIR(const_tbl+88774, const_tbl+115328)
MAKE_LITERAL_PAIR(const_tbl+88757, const_tbl+115345)
MAKE_LITERAL_PAIR(const_tbl+88740, const_tbl+115362)
MAKE_LITERAL_PAIR(const_tbl+88723, const_tbl+115379)
MAKE_LITERAL_PAIR(const_tbl+88706, const_tbl+115396)
MAKE_LITERAL_PAIR(const_tbl+88689, const_tbl+115413)
MAKE_LITERAL_PAIR(const_tbl+88672, const_tbl+115430)
MAKE_LITERAL_PAIR(const_tbl+88655, const_tbl+115447)
MAKE_LITERAL_PAIR(const_tbl+88638, const_tbl+115464)
MAKE_LITERAL_PAIR(const_tbl+88621, const_tbl+115481)
MAKE_LITERAL_PAIR(const_tbl+88604, const_tbl+115498)
MAKE_LITERAL_PAIR(const_tbl+88587, const_tbl+115515)
MAKE_LITERAL_PAIR(const_tbl+88570, const_tbl+115532)
MAKE_LITERAL_PAIR(const_tbl+88553, const_tbl+115549)
MAKE_LITERAL_PAIR(const_tbl+88536, const_tbl+115566)
MAKE_LITERAL_PAIR(const_tbl+88519, const_tbl+115583)
MAKE_LITERAL_PAIR(const_tbl+88502, const_tbl+115600)
MAKE_LITERAL_PAIR(const_tbl+88485, const_tbl+115617)
MAKE_LITERAL_PAIR(const_tbl+88468, const_tbl+115634)
MAKE_LITERAL_PAIR(const_tbl+88451, const_tbl+115651)
MAKE_LITERAL_PAIR(const_tbl+88434, const_tbl+115668)
MAKE_LITERAL_PAIR(const_tbl+88417, const_tbl+115685)
MAKE_LITERAL_PAIR(const_tbl+88400, const_tbl+115702)
MAKE_LITERAL_PAIR(const_tbl+88383, const_tbl+115719)
MAKE_LITERAL_PAIR(const_tbl+88366, const_tbl+115736)
MAKE_LITERAL_PAIR(const_tbl+88349, const_tbl+115753)
MAKE_LITERAL_PAIR(const_tbl+88332, const_tbl+115770)
MAKE_LITERAL_PAIR(const_tbl+88315, const_tbl+115787)
MAKE_LITERAL_PAIR(const_tbl+88298, const_tbl+115804)
MAKE_LITERAL_PAIR(const_tbl+88281, const_tbl+115821)
MAKE_LITERAL_PAIR(const_tbl+88264, const_tbl+115838)
MAKE_LITERAL_PAIR(const_tbl+88247, const_tbl+115855)
MAKE_LITERAL_PAIR(const_tbl+88230, const_tbl+115872)
MAKE_LITERAL_PAIR(const_tbl+88213, const_tbl+115889)
MAKE_LITERAL_PAIR(const_tbl+88196, const_tbl+115906)
MAKE_LITERAL_PAIR(const_tbl+88179, const_tbl+115923)
MAKE_LITERAL_PAIR(const_tbl+88162, const_tbl+115940)
MAKE_LITERAL_PAIR(const_tbl+88145, const_tbl+115957)
MAKE_LITERAL_PAIR(const_tbl+88128, const_tbl+115974)
MAKE_LITERAL_PAIR(const_tbl+88111, const_tbl+115991)
MAKE_LITERAL_PAIR(const_tbl+88094, const_tbl+116008)
MAKE_LITERAL_PAIR(const_tbl+88077, const_tbl+116025)
MAKE_LITERAL_PAIR(const_tbl+88060, const_tbl+116042)
MAKE_LITERAL_PAIR(const_tbl+88043, const_tbl+116059)
MAKE_LITERAL_PAIR(const_tbl+88026, const_tbl+116076)
MAKE_LITERAL_PAIR(const_tbl+88009, const_tbl+116093)
MAKE_LITERAL_PAIR(const_tbl+87992, const_tbl+116110)
MAKE_LITERAL_PAIR(const_tbl+87975, const_tbl+116127)
MAKE_LITERAL_PAIR(const_tbl+87958, const_tbl+116144)
MAKE_LITERAL_PAIR(const_tbl+87941, const_tbl+116161)
MAKE_LITERAL_PAIR(const_tbl+87924, const_tbl+116178)
MAKE_LITERAL_PAIR(const_tbl+87907, const_tbl+116195)
MAKE_LITERAL_PAIR(const_tbl+87890, const_tbl+116212)
MAKE_LITERAL_PAIR(const_tbl+87873, const_tbl+116229)
MAKE_LITERAL_PAIR(const_tbl+87856, const_tbl+116246)
MAKE_LITERAL_PAIR(const_tbl+87839, const_tbl+116263)
MAKE_LITERAL_PAIR(const_tbl+87822, const_tbl+116280)
MAKE_LITERAL_PAIR(const_tbl+87805, const_tbl+116297)
MAKE_LITERAL_PAIR(const_tbl+87788, const_tbl+116314)
MAKE_LITERAL_PAIR(const_tbl+87771, const_tbl+116331)
MAKE_LITERAL_PAIR(const_tbl+87754, const_tbl+116348)
MAKE_LITERAL_PAIR(const_tbl+87737, const_tbl+116365)
MAKE_LITERAL_PAIR(const_tbl+87720, const_tbl+116382)
MAKE_LITERAL_PAIR(const_tbl+87703, const_tbl+116399)
MAKE_LITERAL_PAIR(const_tbl+87686, const_tbl+116416)
MAKE_LITERAL_PAIR(const_tbl+87669, const_tbl+116433)
MAKE_LITERAL_PAIR(const_tbl+87652, const_tbl+116450)
MAKE_LITERAL_PAIR(const_tbl+87635, const_tbl+116467)
MAKE_LITERAL_PAIR(const_tbl+87618, const_tbl+116484)
MAKE_LITERAL_PAIR(const_tbl+87601, const_tbl+116501)
MAKE_LITERAL_PAIR(const_tbl+87584, const_tbl+116518)
MAKE_LITERAL_PAIR(const_tbl+87567, const_tbl+116535)
MAKE_LITERAL_PAIR(const_tbl+87550, const_tbl+116552)
MAKE_LITERAL_PAIR(const_tbl+87533, const_tbl+116569)
MAKE_LITERAL_PAIR(const_tbl+87516, const_tbl+116586)
MAKE_LITERAL_PAIR(const_tbl+87499, const_tbl+116603)
MAKE_LITERAL_PAIR(const_tbl+87482, const_tbl+116620)
MAKE_LITERAL_PAIR(const_tbl+87465, const_tbl+116637)
MAKE_LITERAL_PAIR(const_tbl+87448, const_tbl+116654)
MAKE_LITERAL_PAIR(const_tbl+87431, const_tbl+116671)
MAKE_LITERAL_PAIR(const_tbl+87414, const_tbl+116688)
MAKE_LITERAL_PAIR(const_tbl+87397, const_tbl+116705)
MAKE_LITERAL_PAIR(const_tbl+87380, const_tbl+116722)
MAKE_LITERAL_PAIR(const_tbl+87363, const_tbl+116739)
MAKE_LITERAL_PAIR(const_tbl+87346, const_tbl+116756)
MAKE_LITERAL_PAIR(const_tbl+87329, const_tbl+116773)
MAKE_LITERAL_PAIR(const_tbl+87312, const_tbl+116790)
MAKE_LITERAL_PAIR(const_tbl+87295, const_tbl+116807)
MAKE_LITERAL_PAIR(const_tbl+87278, const_tbl+116824)
MAKE_LITERAL_PAIR(const_tbl+87261, const_tbl+116841)
MAKE_LITERAL_PAIR(const_tbl+87244, const_tbl+116858)
MAKE_LITERAL_PAIR(const_tbl+87227, const_tbl+116875)
MAKE_LITERAL_PAIR(const_tbl+87210, const_tbl+116892)
MAKE_LITERAL_PAIR(const_tbl+87193, const_tbl+116909)
MAKE_LITERAL_PAIR(const_tbl+87176, const_tbl+116926)
MAKE_LITERAL_PAIR(const_tbl+87159, const_tbl+116943)
MAKE_LITERAL_PAIR(const_tbl+87142, const_tbl+116960)
MAKE_LITERAL_PAIR(const_tbl+87125, const_tbl+116977)
MAKE_LITERAL_PAIR(const_tbl+87108, const_tbl+116994)
MAKE_LITERAL_PAIR(const_tbl+87091, const_tbl+117011)
MAKE_LITERAL_PAIR(const_tbl+87074, const_tbl+117028)
MAKE_LITERAL_PAIR(const_tbl+87057, const_tbl+117045)
MAKE_LITERAL_PAIR(const_tbl+87040, const_tbl+117062)
MAKE_LITERAL_PAIR(const_tbl+87023, const_tbl+117079)
MAKE_LITERAL_PAIR(const_tbl+87006, const_tbl+117096)
MAKE_LITERAL_PAIR(const_tbl+86989, const_tbl+117113)
MAKE_LITERAL_PAIR(const_tbl+86972, const_tbl+117130)
MAKE_LITERAL_PAIR(const_tbl+86955, const_tbl+117147)
MAKE_LITERAL_PAIR(const_tbl+86938, const_tbl+117164)
MAKE_LITERAL_PAIR(const_tbl+86921, const_tbl+117181)
MAKE_LITERAL_PAIR(const_tbl+86904, const_tbl+117198)
MAKE_LITERAL_PAIR(const_tbl+86887, const_tbl+117215)
MAKE_LITERAL_PAIR(const_tbl+86870, const_tbl+117232)
MAKE_LITERAL_PAIR(const_tbl+86853, const_tbl+117249)
MAKE_LITERAL_PAIR(const_tbl+86836, const_tbl+117266)
MAKE_LITERAL_PAIR(const_tbl+86819, const_tbl+117283)
MAKE_LITERAL_PAIR(const_tbl+86802, const_tbl+117300)
MAKE_LITERAL_PAIR(const_tbl+86785, const_tbl+117317)
MAKE_LITERAL_PAIR(const_tbl+86768, const_tbl+117334)
MAKE_LITERAL_PAIR(const_tbl+86751, const_tbl+117351)
MAKE_LITERAL_PAIR(const_tbl+86734, const_tbl+117368)
MAKE_LITERAL_PAIR(const_tbl+86717, const_tbl+117385)
MAKE_LITERAL_PAIR(const_tbl+86700, const_tbl+117402)
MAKE_LITERAL_PAIR(const_tbl+86683, const_tbl+117419)
MAKE_LITERAL_PAIR(const_tbl+86666, const_tbl+117436)
MAKE_LITERAL_PAIR(const_tbl+86649, const_tbl+117453)
MAKE_LITERAL_PAIR(const_tbl+86632, const_tbl+117470)
MAKE_LITERAL_PAIR(const_tbl+86615, const_tbl+117487)
MAKE_LITERAL_PAIR(const_tbl+86598, const_tbl+117504)
MAKE_LITERAL_PAIR(const_tbl+86581, const_tbl+117521)
MAKE_LITERAL_PAIR(const_tbl+86564, const_tbl+117538)
MAKE_LITERAL_PAIR(const_tbl+86547, const_tbl+117555)
MAKE_LITERAL_PAIR(const_tbl+86530, const_tbl+117572)
MAKE_LITERAL_PAIR(const_tbl+86513, const_tbl+117589)
MAKE_LITERAL_PAIR(const_tbl+86496, const_tbl+117606)
MAKE_LITERAL_PAIR(const_tbl+86479, const_tbl+117623)
MAKE_LITERAL_PAIR(const_tbl+86462, const_tbl+117640)
MAKE_LITERAL_PAIR(const_tbl+86445, const_tbl+117657)
MAKE_LITERAL_PAIR(const_tbl+86428, const_tbl+117674)
MAKE_LITERAL_PAIR(const_tbl+86411, const_tbl+117691)
MAKE_LITERAL_PAIR(const_tbl+86394, const_tbl+117708)
MAKE_LITERAL_PAIR(const_tbl+86377, const_tbl+117725)
MAKE_LITERAL_PAIR(const_tbl+86360, const_tbl+117742)
MAKE_LITERAL_PAIR(const_tbl+86343, const_tbl+117759)
MAKE_LITERAL_PAIR(const_tbl+86326, const_tbl+117776)
MAKE_LITERAL_PAIR(const_tbl+86309, const_tbl+117793)
MAKE_LITERAL_PAIR(const_tbl+86292, const_tbl+117810)
MAKE_LITERAL_PAIR(const_tbl+86275, const_tbl+117827)
MAKE_LITERAL_PAIR(const_tbl+86258, const_tbl+117844)
MAKE_LITERAL_PAIR(const_tbl+86241, const_tbl+117861)
MAKE_LITERAL_PAIR(const_tbl+86224, const_tbl+117878)
MAKE_LITERAL_PAIR(const_tbl+86207, const_tbl+117895)
MAKE_LITERAL_PAIR(const_tbl+86190, const_tbl+117912)
MAKE_LITERAL_PAIR(const_tbl+86173, const_tbl+117929)
MAKE_LITERAL_PAIR(const_tbl+86156, const_tbl+117946)
MAKE_LITERAL_PAIR(const_tbl+86139, const_tbl+117963)
MAKE_LITERAL_PAIR(const_tbl+86122, const_tbl+117980)
MAKE_LITERAL_PAIR(const_tbl+86105, const_tbl+117997)
MAKE_LITERAL_PAIR(const_tbl+86088, const_tbl+118014)
MAKE_LITERAL_PAIR(const_tbl+86071, const_tbl+118031)
MAKE_LITERAL_PAIR(const_tbl+86054, const_tbl+118048)
MAKE_LITERAL_PAIR(const_tbl+86037, const_tbl+118065)
MAKE_LITERAL_PAIR(const_tbl+86020, const_tbl+118082)
MAKE_LITERAL_PAIR(const_tbl+86003, const_tbl+118099)
MAKE_LITERAL_PAIR(const_tbl+85986, const_tbl+118116)
MAKE_LITERAL_PAIR(const_tbl+85969, const_tbl+118133)
MAKE_LITERAL_PAIR(const_tbl+85952, const_tbl+118150)
MAKE_LITERAL_PAIR(const_tbl+85935, const_tbl+118167)
MAKE_LITERAL_PAIR(const_tbl+85918, const_tbl+118184)
MAKE_LITERAL_PAIR(const_tbl+85901, const_tbl+118201)
MAKE_LITERAL_PAIR(const_tbl+85884, const_tbl+118218)
MAKE_LITERAL_PAIR(const_tbl+85867, const_tbl+118235)
MAKE_LITERAL_PAIR(const_tbl+85850, const_tbl+118252)
MAKE_LITERAL_PAIR(const_tbl+85833, const_tbl+118269)
MAKE_LITERAL_PAIR(const_tbl+85816, const_tbl+118286)
MAKE_LITERAL_PAIR(const_tbl+85799, const_tbl+118303)
MAKE_LITERAL_PAIR(const_tbl+85782, const_tbl+118320)
MAKE_LITERAL_PAIR(const_tbl+85765, const_tbl+118337)
MAKE_LITERAL_PAIR(const_tbl+85748, const_tbl+118354)
MAKE_LITERAL_PAIR(const_tbl+85731, const_tbl+118371)
MAKE_LITERAL_PAIR(const_tbl+85714, const_tbl+118388)
MAKE_LITERAL_PAIR(const_tbl+85697, const_tbl+118405)
MAKE_LITERAL_PAIR(const_tbl+85680, const_tbl+118422)
MAKE_LITERAL_PAIR(const_tbl+85663, const_tbl+118439)
MAKE_LITERAL_PAIR(const_tbl+85646, const_tbl+118456)
MAKE_LITERAL_PAIR(const_tbl+85629, const_tbl+118473)
MAKE_LITERAL_PAIR(const_tbl+85612, const_tbl+118490)
MAKE_LITERAL_PAIR(const_tbl+85595, const_tbl+118507)
MAKE_LITERAL_PAIR(const_tbl+85578, const_tbl+118524)
MAKE_LITERAL_PAIR(const_tbl+85561, const_tbl+118541)
MAKE_LITERAL_PAIR(const_tbl+85544, const_tbl+118558)
MAKE_LITERAL_PAIR(const_tbl+85527, const_tbl+118575)
MAKE_LITERAL_PAIR(const_tbl+85510, const_tbl+118592)
MAKE_LITERAL_PAIR(const_tbl+85493, const_tbl+118609)
MAKE_LITERAL_PAIR(const_tbl+85476, const_tbl+118626)
MAKE_LITERAL_PAIR(const_tbl+85459, const_tbl+118643)
MAKE_LITERAL_PAIR(const_tbl+85442, const_tbl+118660)
MAKE_LITERAL_PAIR(const_tbl+85425, const_tbl+118677)
MAKE_LITERAL_PAIR(const_tbl+85408, const_tbl+118694)
MAKE_LITERAL_PAIR(const_tbl+85391, const_tbl+118711)
MAKE_LITERAL_PAIR(const_tbl+85374, const_tbl+118728)
MAKE_LITERAL_PAIR(const_tbl+85357, const_tbl+118745)
MAKE_LITERAL_PAIR(const_tbl+85340, const_tbl+118762)
MAKE_LITERAL_PAIR(const_tbl+85323, const_tbl+118779)
MAKE_LITERAL_PAIR(const_tbl+85306, const_tbl+118796)
MAKE_LITERAL_PAIR(const_tbl+85289, const_tbl+118813)
MAKE_LITERAL_PAIR(const_tbl+85272, const_tbl+118830)
MAKE_LITERAL_PAIR(const_tbl+85255, const_tbl+118847)
MAKE_LITERAL_PAIR(const_tbl+85238, const_tbl+118864)
MAKE_LITERAL_PAIR(const_tbl+85221, const_tbl+118881)
MAKE_LITERAL_PAIR(const_tbl+85204, const_tbl+118898)
MAKE_LITERAL_PAIR(const_tbl+85187, const_tbl+118915)
MAKE_LITERAL_PAIR(const_tbl+85170, const_tbl+118932)
MAKE_LITERAL_PAIR(const_tbl+85153, const_tbl+118949)
MAKE_LITERAL_PAIR(const_tbl+85136, const_tbl+118966)
MAKE_LITERAL_PAIR(const_tbl+85119, const_tbl+118983)
MAKE_LITERAL_PAIR(const_tbl+85102, const_tbl+119000)
MAKE_LITERAL_PAIR(const_tbl+85085, const_tbl+119017)
MAKE_LITERAL_PAIR(const_tbl+85068, const_tbl+119034)
MAKE_LITERAL_PAIR(const_tbl+85051, const_tbl+119051)
MAKE_LITERAL_PAIR(const_tbl+85034, const_tbl+119068)
MAKE_LITERAL_PAIR(const_tbl+85017, const_tbl+119085)
MAKE_LITERAL_PAIR(const_tbl+85000, const_tbl+119102)
MAKE_LITERAL_PAIR(const_tbl+84983, const_tbl+119119)
MAKE_LITERAL_PAIR(const_tbl+84966, const_tbl+119136)
MAKE_LITERAL_PAIR(const_tbl+84949, const_tbl+119153)
MAKE_LITERAL_PAIR(const_tbl+84932, const_tbl+119170)
MAKE_LITERAL_PAIR(const_tbl+84915, const_tbl+119187)
MAKE_LITERAL_PAIR(const_tbl+84898, const_tbl+119204)
MAKE_LITERAL_PAIR(const_tbl+84881, const_tbl+119221)
MAKE_LITERAL_PAIR(const_tbl+84864, const_tbl+119238)
MAKE_LITERAL_PAIR(const_tbl+84847, const_tbl+119255)
MAKE_LITERAL_PAIR(const_tbl+84830, const_tbl+119272)
MAKE_LITERAL_PAIR(const_tbl+84813, const_tbl+119289)
MAKE_LITERAL_PAIR(const_tbl+84796, const_tbl+119306)
MAKE_LITERAL_PAIR(const_tbl+84779, const_tbl+119323)
MAKE_LITERAL_PAIR(const_tbl+84762, const_tbl+119340)
MAKE_LITERAL_PAIR(const_tbl+84745, const_tbl+119357)
MAKE_LITERAL_PAIR(const_tbl+84728, const_tbl+119374)
MAKE_LITERAL_PAIR(const_tbl+84711, const_tbl+119391)
MAKE_LITERAL_PAIR(const_tbl+84694, const_tbl+119408)
MAKE_LITERAL_PAIR(const_tbl+84677, const_tbl+119425)
MAKE_LITERAL_PAIR(const_tbl+84660, const_tbl+119442)
MAKE_LITERAL_PAIR(const_tbl+84643, const_tbl+119459)
MAKE_LITERAL_PAIR(const_tbl+84626, const_tbl+119476)
MAKE_LITERAL_PAIR(const_tbl+84609, const_tbl+119493)
MAKE_LITERAL_PAIR(const_tbl+84592, const_tbl+119510)
MAKE_LITERAL_PAIR(const_tbl+84575, const_tbl+119527)
MAKE_LITERAL_PAIR(const_tbl+84558, const_tbl+119544)
MAKE_LITERAL_PAIR(const_tbl+84541, const_tbl+119561)
MAKE_LITERAL_PAIR(const_tbl+84524, const_tbl+119578)
MAKE_LITERAL_PAIR(const_tbl+84507, const_tbl+119595)
MAKE_LITERAL_PAIR(const_tbl+84490, const_tbl+119612)
MAKE_LITERAL_PAIR(const_tbl+84473, const_tbl+119629)
MAKE_LITERAL_PAIR(const_tbl+84456, const_tbl+119646)
MAKE_LITERAL_PAIR(const_tbl+84439, const_tbl+119663)
MAKE_LITERAL_PAIR(const_tbl+84422, const_tbl+119680)
MAKE_LITERAL_PAIR(const_tbl+84405, const_tbl+119697)
MAKE_LITERAL_PAIR(const_tbl+84388, const_tbl+119714)
MAKE_LITERAL_PAIR(const_tbl+84371, const_tbl+119731)
MAKE_LITERAL_PAIR(const_tbl+84354, const_tbl+119748)
MAKE_LITERAL_PAIR(const_tbl+84337, const_tbl+119765)
MAKE_LITERAL_PAIR(const_tbl+84320, const_tbl+119782)
MAKE_LITERAL_PAIR(const_tbl+84303, const_tbl+119799)
MAKE_LITERAL_PAIR(const_tbl+84286, const_tbl+119816)
MAKE_LITERAL_PAIR(const_tbl+84269, const_tbl+119833)
MAKE_LITERAL_PAIR(const_tbl+84252, const_tbl+119850)
MAKE_LITERAL_PAIR(const_tbl+84235, const_tbl+119867)
MAKE_LITERAL_PAIR(const_tbl+84218, const_tbl+119884)
MAKE_LITERAL_PAIR(const_tbl+84201, const_tbl+119901)
MAKE_LITERAL_PAIR(const_tbl+84184, const_tbl+119918)
MAKE_LITERAL_PAIR(const_tbl+84167, const_tbl+119935)
MAKE_LITERAL_PAIR(const_tbl+84150, const_tbl+119952)
MAKE_LITERAL_PAIR(const_tbl+84133, const_tbl+119969)
MAKE_LITERAL_PAIR(const_tbl+84116, const_tbl+119986)
MAKE_LITERAL_PAIR(const_tbl+84099, const_tbl+120003)
MAKE_LITERAL_PAIR(const_tbl+84082, const_tbl+120020)
MAKE_LITERAL_PAIR(const_tbl+84065, const_tbl+120037)
MAKE_LITERAL_PAIR(const_tbl+84048, const_tbl+120054)
MAKE_LITERAL_PAIR(const_tbl+84031, const_tbl+120071)
MAKE_LITERAL_PAIR(const_tbl+84014, const_tbl+120088)
MAKE_LITERAL_PAIR(const_tbl+83997, const_tbl+120105)
MAKE_LITERAL_PAIR(const_tbl+83980, const_tbl+120122)
MAKE_LITERAL_PAIR(const_tbl+83963, const_tbl+120139)
MAKE_LITERAL_PAIR(const_tbl+83946, const_tbl+120156)
MAKE_LITERAL_PAIR(const_tbl+83929, const_tbl+120173)
MAKE_LITERAL_PAIR(const_tbl+83912, const_tbl+120190)
MAKE_LITERAL_PAIR(const_tbl+83895, const_tbl+120207)
MAKE_LITERAL_PAIR(const_tbl+83878, const_tbl+120224)
MAKE_LITERAL_PAIR(const_tbl+83861, const_tbl+120241)
MAKE_LITERAL_PAIR(const_tbl+83844, const_tbl+120258)
MAKE_LITERAL_PAIR(const_tbl+83827, const_tbl+120275)
MAKE_LITERAL_PAIR(const_tbl+83810, const_tbl+120292)
MAKE_LITERAL_PAIR(const_tbl+83793, const_tbl+120309)
MAKE_LITERAL_PAIR(const_tbl+83776, const_tbl+120326)
MAKE_LITERAL_PAIR(const_tbl+83759, const_tbl+120343)
MAKE_LITERAL_PAIR(const_tbl+83742, const_tbl+120360)
MAKE_LITERAL_PAIR(const_tbl+83725, const_tbl+120377)
MAKE_LITERAL_PAIR(const_tbl+83708, const_tbl+120394)
MAKE_LITERAL_PAIR(const_tbl+83691, const_tbl+120411)
MAKE_LITERAL_PAIR(const_tbl+83674, const_tbl+120428)
MAKE_LITERAL_PAIR(const_tbl+83657, const_tbl+120445)
MAKE_LITERAL_PAIR(const_tbl+83640, const_tbl+120462)
MAKE_LITERAL_PAIR(const_tbl+83623, const_tbl+120479)
MAKE_LITERAL_PAIR(const_tbl+83606, const_tbl+120496)
MAKE_LITERAL_PAIR(const_tbl+83589, const_tbl+120513)
MAKE_LITERAL_PAIR(const_tbl+83572, const_tbl+120530)
MAKE_LITERAL_PAIR(const_tbl+83555, const_tbl+120547)
MAKE_LITERAL_PAIR(const_tbl+83538, const_tbl+120564)
MAKE_LITERAL_PAIR(const_tbl+83521, const_tbl+120581)
MAKE_LITERAL_PAIR(const_tbl+83504, const_tbl+120598)
MAKE_LITERAL_PAIR(const_tbl+83487, const_tbl+120615)
MAKE_LITERAL_PAIR(const_tbl+83470, const_tbl+120632)
MAKE_LITERAL_PAIR(const_tbl+83453, const_tbl+120649)
MAKE_LITERAL_PAIR(const_tbl+83436, const_tbl+120666)
MAKE_LITERAL_PAIR(const_tbl+83419, const_tbl+120683)
MAKE_LITERAL_PAIR(const_tbl+83402, const_tbl+120700)
MAKE_LITERAL_PAIR(const_tbl+83385, const_tbl+120717)
MAKE_LITERAL_PAIR(const_tbl+83368, const_tbl+120734)
MAKE_LITERAL_PAIR(const_tbl+83351, const_tbl+120751)
MAKE_LITERAL_PAIR(const_tbl+83334, const_tbl+120768)
MAKE_LITERAL_PAIR(const_tbl+83317, const_tbl+120785)
MAKE_LITERAL_PAIR(const_tbl+83300, const_tbl+120802)
MAKE_LITERAL_PAIR(const_tbl+83283, const_tbl+120819)
MAKE_LITERAL_PAIR(const_tbl+83266, const_tbl+120836)
MAKE_LITERAL_PAIR(const_tbl+83249, const_tbl+120853)
MAKE_LITERAL_PAIR(const_tbl+83232, const_tbl+120870)
MAKE_LITERAL_PAIR(const_tbl+83215, const_tbl+120887)
MAKE_LITERAL_PAIR(const_tbl+83198, const_tbl+120904)
MAKE_LITERAL_PAIR(const_tbl+83181, const_tbl+120921)
MAKE_LITERAL_PAIR(const_tbl+83164, const_tbl+120938)
MAKE_LITERAL_PAIR(const_tbl+83147, const_tbl+120955)
MAKE_LITERAL_PAIR(const_tbl+83130, const_tbl+120972)
MAKE_LITERAL_PAIR(const_tbl+83113, const_tbl+120989)
MAKE_LITERAL_PAIR(const_tbl+83096, const_tbl+121006)
MAKE_LITERAL_PAIR(const_tbl+83079, const_tbl+121023)
MAKE_LITERAL_PAIR(const_tbl+83062, const_tbl+121040)
MAKE_LITERAL_PAIR(const_tbl+83045, const_tbl+121057)
MAKE_LITERAL_PAIR(const_tbl+83028, const_tbl+121074)
MAKE_LITERAL_PAIR(const_tbl+83011, const_tbl+121091)
MAKE_LITERAL_PAIR(const_tbl+82994, const_tbl+121108)
MAKE_LITERAL_PAIR(const_tbl+82977, const_tbl+121125)
MAKE_LITERAL_PAIR(const_tbl+82960, const_tbl+121142)
MAKE_LITERAL_PAIR(const_tbl+82943, const_tbl+121159)
MAKE_LITERAL_PAIR(const_tbl+82926, const_tbl+121176)
MAKE_LITERAL_PAIR(const_tbl+82909, const_tbl+121193)
MAKE_LITERAL_PAIR(const_tbl+82892, const_tbl+121210)
MAKE_LITERAL_PAIR(const_tbl+82875, const_tbl+121227)
MAKE_LITERAL_PAIR(const_tbl+82858, const_tbl+121244)
MAKE_LITERAL_PAIR(const_tbl+82841, const_tbl+121261)
MAKE_LITERAL_PAIR(const_tbl+82824, const_tbl+121278)
MAKE_LITERAL_PAIR(const_tbl+82807, const_tbl+121295)
MAKE_LITERAL_PAIR(const_tbl+82790, const_tbl+121312)
MAKE_LITERAL_PAIR(const_tbl+82773, const_tbl+121329)
MAKE_LITERAL_PAIR(const_tbl+82756, const_tbl+121346)
MAKE_LITERAL_PAIR(const_tbl+82739, const_tbl+121363)
MAKE_LITERAL_PAIR(const_tbl+82722, const_tbl+121380)
MAKE_LITERAL_PAIR(const_tbl+82705, const_tbl+121397)
MAKE_LITERAL_PAIR(const_tbl+82688, const_tbl+121414)
MAKE_LITERAL_PAIR(const_tbl+82671, const_tbl+121431)
MAKE_LITERAL_PAIR(const_tbl+82654, const_tbl+121448)
MAKE_LITERAL_PAIR(const_tbl+82637, const_tbl+121465)
MAKE_LITERAL_PAIR(const_tbl+82620, const_tbl+121482)
MAKE_LITERAL_PAIR(const_tbl+82603, const_tbl+121499)
MAKE_LITERAL_PAIR(const_tbl+82586, const_tbl+121516)
MAKE_LITERAL_PAIR(const_tbl+82569, const_tbl+121533)
MAKE_LITERAL_PAIR(const_tbl+82552, const_tbl+121550)
MAKE_LITERAL_PAIR(const_tbl+82535, const_tbl+121567)
MAKE_LITERAL_PAIR(const_tbl+82518, const_tbl+121584)
MAKE_LITERAL_PAIR(const_tbl+82501, const_tbl+121601)
MAKE_LITERAL_PAIR(const_tbl+82484, const_tbl+121618)
MAKE_LITERAL_PAIR(const_tbl+82467, const_tbl+121635)
MAKE_LITERAL_PAIR(const_tbl+82450, const_tbl+121652)
MAKE_LITERAL_PAIR(const_tbl+82433, const_tbl+121669)
MAKE_LITERAL_PAIR(const_tbl+82416, const_tbl+121686)
MAKE_LITERAL_PAIR(const_tbl+82399, const_tbl+121703)
MAKE_LITERAL_PAIR(const_tbl+82382, const_tbl+121720)
MAKE_LITERAL_PAIR(const_tbl+82365, const_tbl+121737)
MAKE_LITERAL_PAIR(const_tbl+82348, const_tbl+121754)
MAKE_LITERAL_PAIR(const_tbl+82331, const_tbl+121771)
MAKE_LITERAL_PAIR(const_tbl+82314, const_tbl+121788)
MAKE_LITERAL_PAIR(const_tbl+82297, const_tbl+121805)
MAKE_LITERAL_PAIR(const_tbl+82280, const_tbl+121822)
MAKE_LITERAL_PAIR(const_tbl+82263, const_tbl+121839)
MAKE_LITERAL_PAIR(const_tbl+82246, const_tbl+121856)
MAKE_LITERAL_PAIR(const_tbl+82229, const_tbl+121873)
MAKE_LITERAL_PAIR(const_tbl+82212, const_tbl+121890)
MAKE_LITERAL_PAIR(const_tbl+82195, const_tbl+121907)
MAKE_LITERAL_PAIR(const_tbl+82178, const_tbl+121924)
MAKE_LITERAL_PAIR(const_tbl+82161, const_tbl+121941)
MAKE_LITERAL_PAIR(const_tbl+82144, const_tbl+121958)
MAKE_LITERAL_PAIR(const_tbl+82127, const_tbl+121975)
MAKE_LITERAL_PAIR(const_tbl+82110, const_tbl+121992)
MAKE_LITERAL_PAIR(const_tbl+82093, const_tbl+122009)
MAKE_LITERAL_PAIR(const_tbl+82076, const_tbl+122026)
MAKE_LITERAL_PAIR(const_tbl+82059, const_tbl+122043)
MAKE_LITERAL_PAIR(const_tbl+82042, const_tbl+122060)
MAKE_LITERAL_PAIR(const_tbl+82025, const_tbl+122077)
MAKE_LITERAL_PAIR(const_tbl+82008, const_tbl+122094)
MAKE_LITERAL_PAIR(const_tbl+81991, const_tbl+122111)
MAKE_LITERAL_PAIR(const_tbl+81974, const_tbl+122128)
MAKE_LITERAL_PAIR(const_tbl+81957, const_tbl+122145)
MAKE_LITERAL_PAIR(const_tbl+81940, const_tbl+122162)
MAKE_LITERAL_PAIR(const_tbl+81923, const_tbl+122179)
MAKE_LITERAL_PAIR(const_tbl+81906, const_tbl+122196)
MAKE_LITERAL_PAIR(const_tbl+81889, const_tbl+122213)
MAKE_LITERAL_PAIR(const_tbl+81872, const_tbl+122230)
MAKE_LITERAL_PAIR(const_tbl+81855, const_tbl+122247)
MAKE_LITERAL_PAIR(const_tbl+81838, const_tbl+122264)
MAKE_LITERAL_PAIR(const_tbl+81821, const_tbl+122281)
MAKE_LITERAL_PAIR(const_tbl+81804, const_tbl+122298)
MAKE_LITERAL_PAIR(const_tbl+81787, const_tbl+122315)
MAKE_LITERAL_PAIR(const_tbl+81770, const_tbl+122332)
MAKE_LITERAL_PAIR(const_tbl+81753, const_tbl+122349)
MAKE_LITERAL_PAIR(const_tbl+81736, const_tbl+122366)
MAKE_LITERAL_PAIR(const_tbl+81719, const_tbl+122383)
MAKE_LITERAL_PAIR(const_tbl+81702, const_tbl+122400)
MAKE_LITERAL_PAIR(const_tbl+81685, const_tbl+122417)
MAKE_LITERAL_PAIR(const_tbl+81668, const_tbl+122434)
MAKE_LITERAL_PAIR(const_tbl+81651, const_tbl+122451)
MAKE_LITERAL_PAIR(const_tbl+81634, const_tbl+122468)
MAKE_LITERAL_PAIR(const_tbl+81617, const_tbl+122485)
MAKE_LITERAL_PAIR(const_tbl+81600, const_tbl+122502)
MAKE_LITERAL_PAIR(const_tbl+81583, const_tbl+122519)
MAKE_LITERAL_PAIR(const_tbl+81566, const_tbl+122536)
MAKE_LITERAL_PAIR(const_tbl+81549, const_tbl+122553)
MAKE_LITERAL_PAIR(const_tbl+81532, const_tbl+122570)
MAKE_LITERAL_PAIR(const_tbl+81515, const_tbl+122587)
MAKE_LITERAL_PAIR(const_tbl+81498, const_tbl+122604)
MAKE_LITERAL_PAIR(const_tbl+81481, const_tbl+122621)
MAKE_LITERAL_PAIR(const_tbl+81464, const_tbl+122638)
MAKE_LITERAL_PAIR(const_tbl+81447, const_tbl+122655)
MAKE_LITERAL_PAIR(const_tbl+81430, const_tbl+122672)
MAKE_LITERAL_PAIR(const_tbl+81413, const_tbl+122689)
MAKE_LITERAL_PAIR(const_tbl+81396, const_tbl+122706)
MAKE_LITERAL_PAIR(const_tbl+81379, const_tbl+122723)
MAKE_LITERAL_PAIR(const_tbl+81362, const_tbl+122740)
MAKE_LITERAL_PAIR(const_tbl+81345, const_tbl+122757)
MAKE_LITERAL_PAIR(const_tbl+81328, const_tbl+122774)
MAKE_LITERAL_PAIR(const_tbl+81311, const_tbl+122791)
MAKE_LITERAL_PAIR(const_tbl+81294, const_tbl+122808)
MAKE_LITERAL_PAIR(const_tbl+81277, const_tbl+122825)
MAKE_LITERAL_PAIR(const_tbl+81260, const_tbl+122842)
MAKE_LITERAL_PAIR(const_tbl+81243, const_tbl+122859)
MAKE_LITERAL_PAIR(const_tbl+81226, const_tbl+122876)
MAKE_LITERAL_PAIR(const_tbl+81209, const_tbl+122893)
MAKE_LITERAL_PAIR(const_tbl+81192, const_tbl+122910)
MAKE_LITERAL_PAIR(const_tbl+81175, const_tbl+122927)
MAKE_LITERAL_PAIR(const_tbl+81158, const_tbl+122944)
MAKE_LITERAL_PAIR(const_tbl+81141, const_tbl+122961)
MAKE_LITERAL_PAIR(const_tbl+81124, const_tbl+122978)
MAKE_LITERAL_PAIR(const_tbl+81107, const_tbl+122995)
MAKE_LITERAL_PAIR(const_tbl+81090, const_tbl+123012)
MAKE_LITERAL_PAIR(const_tbl+81073, const_tbl+123029)
MAKE_LITERAL_PAIR(const_tbl+81056, const_tbl+123046)
MAKE_LITERAL_PAIR(const_tbl+81039, const_tbl+123063)
MAKE_LITERAL_PAIR(const_tbl+81022, const_tbl+123080)
MAKE_LITERAL_PAIR(const_tbl+81005, const_tbl+123097)
MAKE_LITERAL_PAIR(const_tbl+80988, const_tbl+123114)
MAKE_LITERAL_PAIR(const_tbl+80971, const_tbl+123131)
MAKE_LITERAL_PAIR(const_tbl+80954, const_tbl+123148)
MAKE_LITERAL_PAIR(const_tbl+80937, const_tbl+123165)
MAKE_LITERAL_PAIR(const_tbl+80920, const_tbl+123182)
MAKE_LITERAL_PAIR(const_tbl+80903, const_tbl+123199)
MAKE_LITERAL_PAIR(const_tbl+80886, const_tbl+123216)
MAKE_LITERAL_PAIR(const_tbl+80869, const_tbl+123233)
MAKE_LITERAL_PAIR(const_tbl+80852, const_tbl+123250)
MAKE_LITERAL_PAIR(const_tbl+80835, const_tbl+123267)
MAKE_LITERAL_PAIR(const_tbl+80818, const_tbl+123284)
MAKE_LITERAL_PAIR(const_tbl+80801, const_tbl+123301)
MAKE_LITERAL_PAIR(const_tbl+80784, const_tbl+123318)
MAKE_LITERAL_PAIR(const_tbl+80767, const_tbl+123335)
MAKE_LITERAL_PAIR(const_tbl+80750, const_tbl+123352)
MAKE_LITERAL_PAIR(const_tbl+80733, const_tbl+123369)
MAKE_LITERAL_PAIR(const_tbl+80716, const_tbl+123386)
MAKE_LITERAL_PAIR(const_tbl+80699, const_tbl+123403)
MAKE_LITERAL_PAIR(const_tbl+80682, const_tbl+123420)
MAKE_LITERAL_PAIR(const_tbl+80665, const_tbl+123437)
MAKE_LITERAL_PAIR(const_tbl+80648, const_tbl+123454)
MAKE_LITERAL_PAIR(const_tbl+80631, const_tbl+123471)
MAKE_LITERAL_PAIR(const_tbl+80614, const_tbl+123488)
MAKE_LITERAL_PAIR(const_tbl+80597, const_tbl+123505)
MAKE_LITERAL_PAIR(const_tbl+80580, const_tbl+123522)
MAKE_LITERAL_PAIR(const_tbl+80563, const_tbl+123539)
MAKE_LITERAL_PAIR(const_tbl+80546, const_tbl+123556)
MAKE_LITERAL_PAIR(const_tbl+80529, const_tbl+123573)
MAKE_LITERAL_PAIR(const_tbl+80512, const_tbl+123590)
MAKE_LITERAL_PAIR(const_tbl+80495, const_tbl+123607)
MAKE_LITERAL_PAIR(const_tbl+80478, const_tbl+123624)
MAKE_LITERAL_PAIR(const_tbl+80461, const_tbl+123641)
MAKE_LITERAL_PAIR(const_tbl+80444, const_tbl+123658)
MAKE_LITERAL_PAIR(const_tbl+80427, const_tbl+123675)
MAKE_LITERAL_PAIR(const_tbl+80410, const_tbl+123692)
MAKE_LITERAL_PAIR(const_tbl+80393, const_tbl+123709)
MAKE_LITERAL_PAIR(const_tbl+80376, const_tbl+123726)
MAKE_LITERAL_PAIR(const_tbl+80359, const_tbl+123743)
MAKE_LITERAL_PAIR(const_tbl+80342, const_tbl+123760)
MAKE_LITERAL_PAIR(const_tbl+80325, const_tbl+123777)
MAKE_LITERAL_PAIR(const_tbl+80308, const_tbl+123794)
MAKE_LITERAL_PAIR(const_tbl+80291, const_tbl+123811)
MAKE_LITERAL_PAIR(const_tbl+80274, const_tbl+123828)
MAKE_LITERAL_PAIR(const_tbl+80257, const_tbl+123845)
MAKE_LITERAL_PAIR(const_tbl+80240, const_tbl+123862)
MAKE_LITERAL_PAIR(const_tbl+80223, const_tbl+123879)
MAKE_LITERAL_PAIR(const_tbl+80206, const_tbl+123896)
MAKE_LITERAL_PAIR(const_tbl+80189, const_tbl+123913)
MAKE_LITERAL_PAIR(const_tbl+80172, const_tbl+123930)
MAKE_LITERAL_PAIR(const_tbl+80155, const_tbl+123947)
MAKE_LITERAL_PAIR(const_tbl+80138, const_tbl+123964)
MAKE_LITERAL_PAIR(const_tbl+80121, const_tbl+123981)
MAKE_LITERAL_PAIR(const_tbl+80104, const_tbl+123998)
MAKE_LITERAL_PAIR(const_tbl+80087, const_tbl+124015)
MAKE_LITERAL_PAIR(const_tbl+80070, const_tbl+124032)
MAKE_LITERAL_PAIR(const_tbl+80053, const_tbl+124049)
MAKE_LITERAL_PAIR(const_tbl+80036, const_tbl+124066)
MAKE_LITERAL_PAIR(const_tbl+80019, const_tbl+124083)
MAKE_LITERAL_PAIR(const_tbl+80002, const_tbl+124100)
MAKE_LITERAL_PAIR(const_tbl+79985, const_tbl+124117)
MAKE_LITERAL_PAIR(const_tbl+79968, const_tbl+124134)
MAKE_LITERAL_PAIR(const_tbl+79951, const_tbl+124151)
MAKE_LITERAL_PAIR(const_tbl+79934, const_tbl+124168)
MAKE_LITERAL_PAIR(const_tbl+79917, const_tbl+124185)
MAKE_LITERAL_PAIR(const_tbl+79900, const_tbl+124202)
MAKE_LITERAL_PAIR(const_tbl+79883, const_tbl+124219)
MAKE_LITERAL_PAIR(const_tbl+79866, const_tbl+124236)
MAKE_LITERAL_PAIR(const_tbl+79849, const_tbl+124253)
MAKE_LITERAL_PAIR(const_tbl+79832, const_tbl+124270)
MAKE_LITERAL_PAIR(const_tbl+79815, const_tbl+124287)
MAKE_LITERAL_PAIR(const_tbl+79798, const_tbl+124304)
MAKE_LITERAL_PAIR(const_tbl+79781, const_tbl+124321)
MAKE_LITERAL_PAIR(const_tbl+79764, const_tbl+124338)
MAKE_LITERAL_PAIR(const_tbl+79747, const_tbl+124355)
MAKE_LITERAL_PAIR(const_tbl+79730, const_tbl+124372)
MAKE_LITERAL_PAIR(const_tbl+79713, const_tbl+124389)
MAKE_LITERAL_PAIR(const_tbl+79696, const_tbl+124406)
MAKE_LITERAL_PAIR(const_tbl+79679, const_tbl+124423)
MAKE_LITERAL_PAIR(const_tbl+79662, const_tbl+124440)
MAKE_LITERAL_PAIR(const_tbl+79645, const_tbl+124457)
MAKE_LITERAL_PAIR(const_tbl+79628, const_tbl+124474)
MAKE_LITERAL_PAIR(const_tbl+79611, const_tbl+124491)
MAKE_LITERAL_PAIR(const_tbl+79594, const_tbl+124508)
MAKE_LITERAL_PAIR(const_tbl+79577, const_tbl+124525)
MAKE_LITERAL_PAIR(const_tbl+79560, const_tbl+124542)
MAKE_LITERAL_PAIR(const_tbl+79543, const_tbl+124559)
MAKE_LITERAL_PAIR(const_tbl+79526, const_tbl+124576)
MAKE_LITERAL_PAIR(const_tbl+79509, const_tbl+124593)
MAKE_LITERAL_PAIR(const_tbl+79492, const_tbl+124610)
MAKE_LITERAL_PAIR(const_tbl+79475, const_tbl+124627)
MAKE_LITERAL_PAIR(const_tbl+79458, const_tbl+124644)
MAKE_LITERAL_PAIR(const_tbl+79441, const_tbl+124661)
MAKE_LITERAL_PAIR(const_tbl+79424, const_tbl+124678)
MAKE_LITERAL_PAIR(const_tbl+79407, const_tbl+124695)
MAKE_LITERAL_PAIR(const_tbl+79390, const_tbl+124712)
MAKE_LITERAL_PAIR(const_tbl+79373, const_tbl+124729)
MAKE_LITERAL_PAIR(const_tbl+79356, const_tbl+124746)
MAKE_LITERAL_PAIR(const_tbl+79339, const_tbl+124763)
MAKE_LITERAL_PAIR(const_tbl+79322, const_tbl+124780)
MAKE_LITERAL_PAIR(const_tbl+79305, const_tbl+124797)
MAKE_LITERAL_PAIR(const_tbl+79288, const_tbl+124814)
MAKE_LITERAL_PAIR(const_tbl+79271, const_tbl+124831)
MAKE_LITERAL_PAIR(const_tbl+79254, const_tbl+124848)
MAKE_LITERAL_PAIR(const_tbl+79237, const_tbl+124865)
MAKE_LITERAL_PAIR(const_tbl+79220, const_tbl+124882)
MAKE_LITERAL_PAIR(const_tbl+79203, const_tbl+124899)
MAKE_LITERAL_PAIR(const_tbl+79186, const_tbl+124916)
MAKE_LITERAL_PAIR(const_tbl+79169, const_tbl+124933)
MAKE_LITERAL_PAIR(const_tbl+79152, const_tbl+124950)
MAKE_LITERAL_PAIR(const_tbl+79135, const_tbl+124967)
MAKE_LITERAL_PAIR(const_tbl+79118, const_tbl+124984)
MAKE_LITERAL_PAIR(const_tbl+79101, const_tbl+125001)
MAKE_LITERAL_PAIR(const_tbl+79084, const_tbl+125018)
MAKE_LITERAL_PAIR(const_tbl+79067, const_tbl+125035)
MAKE_LITERAL_PAIR(const_tbl+79050, const_tbl+125052)
MAKE_LITERAL_PAIR(const_tbl+79033, const_tbl+125069)
MAKE_LITERAL_PAIR(const_tbl+79016, const_tbl+125086)
MAKE_LITERAL_PAIR(const_tbl+78999, const_tbl+125103)
MAKE_LITERAL_PAIR(const_tbl+78982, const_tbl+125120)
MAKE_LITERAL_PAIR(const_tbl+78965, const_tbl+125137)
MAKE_LITERAL_PAIR(const_tbl+78948, const_tbl+125154)
MAKE_LITERAL_PAIR(const_tbl+78931, const_tbl+125171)
MAKE_LITERAL_PAIR(const_tbl+78914, const_tbl+125188)
MAKE_LITERAL_PAIR(const_tbl+78897, const_tbl+125205)
MAKE_LITERAL_PAIR(const_tbl+78880, const_tbl+125222)
MAKE_LITERAL_PAIR(const_tbl+78863, const_tbl+125239)
MAKE_LITERAL_PAIR(const_tbl+78846, const_tbl+125256)
MAKE_LITERAL_PAIR(const_tbl+78829, const_tbl+125273)
MAKE_LITERAL_PAIR(const_tbl+78812, const_tbl+125290)
MAKE_LITERAL_PAIR(const_tbl+78795, const_tbl+125307)
MAKE_LITERAL_PAIR(const_tbl+78778, const_tbl+125324)
MAKE_LITERAL_PAIR(const_tbl+78761, const_tbl+125341)
MAKE_LITERAL_PAIR(const_tbl+78744, const_tbl+125358)
MAKE_LITERAL_PAIR(const_tbl+78727, const_tbl+125375)
MAKE_LITERAL_PAIR(const_tbl+78710, const_tbl+125392)
MAKE_LITERAL_PAIR(const_tbl+78693, const_tbl+125409)
MAKE_LITERAL_PAIR(const_tbl+78676, const_tbl+125426)
MAKE_LITERAL_PAIR(const_tbl+78659, const_tbl+125443)
MAKE_LITERAL_PAIR(const_tbl+78642, const_tbl+125460)
MAKE_LITERAL_PAIR(const_tbl+78625, const_tbl+125477)
MAKE_LITERAL_PAIR(const_tbl+78608, const_tbl+125494)
MAKE_LITERAL_PAIR(const_tbl+78591, const_tbl+125511)
MAKE_LITERAL_PAIR(const_tbl+78574, const_tbl+125528)
MAKE_LITERAL_PAIR(const_tbl+78557, const_tbl+125545)
MAKE_LITERAL_PAIR(const_tbl+78540, const_tbl+125562)
MAKE_LITERAL_PAIR(const_tbl+78523, const_tbl+125579)
MAKE_LITERAL_PAIR(const_tbl+78506, const_tbl+125596)
MAKE_LITERAL_PAIR(const_tbl+78489, const_tbl+125613)
MAKE_LITERAL_PAIR(const_tbl+78472, const_tbl+125630)
MAKE_LITERAL_PAIR(const_tbl+78455, const_tbl+125647)
MAKE_LITERAL_PAIR(const_tbl+78438, const_tbl+125664)
MAKE_LITERAL_PAIR(const_tbl+78421, const_tbl+125681)
MAKE_LITERAL_PAIR(const_tbl+78404, const_tbl+125698)
MAKE_LITERAL_PAIR(const_tbl+78387, const_tbl+125715)
MAKE_LITERAL_PAIR(const_tbl+78370, const_tbl+125732)
MAKE_LITERAL_PAIR(const_tbl+78353, const_tbl+125749)
MAKE_LITERAL_PAIR(const_tbl+78336, const_tbl+125766)
MAKE_LITERAL_PAIR(const_tbl+78319, const_tbl+125783)
MAKE_LITERAL_PAIR(const_tbl+78302, const_tbl+125800)
MAKE_LITERAL_PAIR(const_tbl+78285, const_tbl+125817)
MAKE_LITERAL_PAIR(const_tbl+78268, const_tbl+125834)
MAKE_LITERAL_PAIR(const_tbl+78251, const_tbl+125851)
MAKE_LITERAL_PAIR(const_tbl+78234, const_tbl+125868)
MAKE_LITERAL_PAIR(const_tbl+78217, const_tbl+125885)
MAKE_LITERAL_PAIR(const_tbl+78200, const_tbl+125902)
MAKE_LITERAL_PAIR(const_tbl+78183, const_tbl+125919)
MAKE_LITERAL_PAIR(const_tbl+78166, const_tbl+125936)
MAKE_LITERAL_PAIR(const_tbl+78149, const_tbl+125953)
MAKE_LITERAL_PAIR(const_tbl+78132, const_tbl+125970)
MAKE_LITERAL_PAIR(const_tbl+78115, const_tbl+125987)
MAKE_LITERAL_PAIR(const_tbl+78098, const_tbl+126004)
MAKE_LITERAL_PAIR(const_tbl+78081, const_tbl+126021)
MAKE_LITERAL_PAIR(const_tbl+78064, const_tbl+126038)
MAKE_LITERAL_PAIR(const_tbl+78047, const_tbl+126055)
MAKE_LITERAL_PAIR(const_tbl+78030, const_tbl+126072)
MAKE_LITERAL_PAIR(const_tbl+78013, const_tbl+126089)
MAKE_LITERAL_PAIR(const_tbl+77996, const_tbl+126106)
MAKE_LITERAL_PAIR(const_tbl+77979, const_tbl+126123)
MAKE_LITERAL_PAIR(const_tbl+77962, const_tbl+126140)
MAKE_LITERAL_PAIR(const_tbl+77945, const_tbl+126157)
MAKE_LITERAL_PAIR(const_tbl+77928, const_tbl+126174)
MAKE_LITERAL_PAIR(const_tbl+77911, const_tbl+126191)
MAKE_LITERAL_PAIR(const_tbl+77894, const_tbl+126208)
MAKE_LITERAL_PAIR(const_tbl+77877, const_tbl+126225)
MAKE_LITERAL_PAIR(const_tbl+77860, const_tbl+126242)
MAKE_LITERAL_PAIR(const_tbl+77843, const_tbl+126259)
MAKE_LITERAL_PAIR(const_tbl+77826, const_tbl+126276)
MAKE_LITERAL_PAIR(const_tbl+77809, const_tbl+126293)
MAKE_LITERAL_PAIR(const_tbl+77792, const_tbl+126310)
MAKE_LITERAL_PAIR(const_tbl+77775, const_tbl+126327)
MAKE_LITERAL_PAIR(const_tbl+77758, const_tbl+126344)
MAKE_LITERAL_PAIR(const_tbl+77741, const_tbl+126361)
MAKE_LITERAL_PAIR(const_tbl+77724, const_tbl+126378)
MAKE_LITERAL_PAIR(const_tbl+77707, const_tbl+126395)
MAKE_LITERAL_PAIR(const_tbl+77690, const_tbl+126412)
MAKE_LITERAL_PAIR(const_tbl+77673, const_tbl+126429)
MAKE_LITERAL_PAIR(const_tbl+77656, const_tbl+126446)
MAKE_LITERAL_PAIR(const_tbl+77639, const_tbl+126463)
MAKE_LITERAL_PAIR(const_tbl+77622, const_tbl+126480)
MAKE_LITERAL_PAIR(const_tbl+77605, const_tbl+126497)
MAKE_LITERAL_PAIR(const_tbl+77588, const_tbl+126514)
MAKE_LITERAL_PAIR(const_tbl+77571, const_tbl+126531)
MAKE_LITERAL_PAIR(const_tbl+77554, const_tbl+126548)
MAKE_LITERAL_PAIR(const_tbl+77537, const_tbl+126565)
MAKE_LITERAL_PAIR(const_tbl+77520, const_tbl+126582)
MAKE_LITERAL_PAIR(const_tbl+77503, const_tbl+126599)
MAKE_LITERAL_PAIR(const_tbl+77486, const_tbl+126616)
MAKE_LITERAL_PAIR(const_tbl+77469, const_tbl+126633)
MAKE_LITERAL_PAIR(const_tbl+77452, const_tbl+126650)
MAKE_LITERAL_PAIR(const_tbl+77435, const_tbl+126667)
MAKE_LITERAL_PAIR(const_tbl+77418, const_tbl+126684)
MAKE_LITERAL_PAIR(const_tbl+77401, const_tbl+126701)
MAKE_LITERAL_PAIR(const_tbl+77384, const_tbl+126718)
MAKE_LITERAL_PAIR(const_tbl+77367, const_tbl+126735)
MAKE_LITERAL_PAIR(const_tbl+77350, const_tbl+126752)
MAKE_LITERAL_PAIR(const_tbl+77333, const_tbl+126769)
MAKE_LITERAL_PAIR(const_tbl+77316, const_tbl+126786)
MAKE_LITERAL_PAIR(const_tbl+77299, const_tbl+126803)
MAKE_LITERAL_PAIR(const_tbl+77282, const_tbl+126820)
MAKE_LITERAL_PAIR(const_tbl+77265, const_tbl+126837)
MAKE_LITERAL_PAIR(const_tbl+77248, const_tbl+126854)
MAKE_LITERAL_PAIR(const_tbl+77231, const_tbl+126871)
MAKE_LITERAL_PAIR(const_tbl+77214, const_tbl+126888)
MAKE_LITERAL_PAIR(const_tbl+77197, const_tbl+126905)
MAKE_LITERAL_PAIR(const_tbl+77180, const_tbl+126922)
MAKE_LITERAL_PAIR(const_tbl+77163, const_tbl+126939)
MAKE_LITERAL_PAIR(const_tbl+77146, const_tbl+126956)
MAKE_LITERAL_PAIR(const_tbl+77129, const_tbl+126973)
MAKE_LITERAL_PAIR(const_tbl+77112, const_tbl+126990)
MAKE_LITERAL_PAIR(const_tbl+77095, const_tbl+127007)
MAKE_LITERAL_PAIR(const_tbl+77078, const_tbl+127024)
MAKE_LITERAL_PAIR(const_tbl+77061, const_tbl+127041)
MAKE_LITERAL_PAIR(const_tbl+77044, const_tbl+127058)
MAKE_LITERAL_PAIR(const_tbl+77027, const_tbl+127075)
MAKE_LITERAL_PAIR(const_tbl+77010, const_tbl+127092)
MAKE_LITERAL_PAIR(const_tbl+76993, const_tbl+127109)
MAKE_LITERAL_PAIR(const_tbl+76976, const_tbl+127126)
MAKE_LITERAL_PAIR(const_tbl+76959, const_tbl+127143)
MAKE_LITERAL_PAIR(const_tbl+76942, const_tbl+127160)
MAKE_LITERAL_PAIR(const_tbl+76925, const_tbl+127177)
MAKE_LITERAL_PAIR(const_tbl+76908, const_tbl+127194)
MAKE_LITERAL_PAIR(const_tbl+76891, const_tbl+127211)
MAKE_LITERAL_PAIR(const_tbl+76874, const_tbl+127228)
MAKE_LITERAL_PAIR(const_tbl+76857, const_tbl+127245)
MAKE_LITERAL_PAIR(const_tbl+76840, const_tbl+127262)
MAKE_LITERAL_PAIR(const_tbl+76823, const_tbl+127279)
MAKE_LITERAL_PAIR(const_tbl+76806, const_tbl+127296)
MAKE_LITERAL_PAIR(const_tbl+76789, const_tbl+127313)
MAKE_LITERAL_PAIR(const_tbl+76772, const_tbl+127330)
MAKE_LITERAL_PAIR(const_tbl+76755, const_tbl+127347)
MAKE_LITERAL_PAIR(const_tbl+76738, const_tbl+127364)
MAKE_LITERAL_PAIR(const_tbl+76721, const_tbl+127381)
MAKE_LITERAL_PAIR(const_tbl+76704, const_tbl+127398)
MAKE_LITERAL_PAIR(const_tbl+76687, const_tbl+127415)
MAKE_LITERAL_PAIR(const_tbl+76670, const_tbl+127432)
MAKE_LITERAL_PAIR(const_tbl+76653, const_tbl+127449)
MAKE_LITERAL_PAIR(const_tbl+76636, const_tbl+127466)
MAKE_LITERAL_PAIR(const_tbl+76619, const_tbl+127483)
MAKE_LITERAL_PAIR(const_tbl+76602, const_tbl+127500)
MAKE_LITERAL_PAIR(const_tbl+76585, const_tbl+127517)
MAKE_LITERAL_PAIR(const_tbl+76568, const_tbl+127534)
MAKE_LITERAL_PAIR(const_tbl+76551, const_tbl+127551)
MAKE_LITERAL_PAIR(const_tbl+76534, const_tbl+127568)
MAKE_LITERAL_PAIR(const_tbl+76517, const_tbl+127585)
MAKE_LITERAL_PAIR(const_tbl+76500, const_tbl+127602)
MAKE_LITERAL_PAIR(const_tbl+76483, const_tbl+127619)
MAKE_LITERAL_PAIR(const_tbl+76466, const_tbl+127636)
MAKE_LITERAL_PAIR(const_tbl+76449, const_tbl+127653)
MAKE_LITERAL_PAIR(const_tbl+76432, const_tbl+127670)
MAKE_LITERAL_PAIR(const_tbl+76415, const_tbl+127687)
MAKE_LITERAL_PAIR(const_tbl+76398, const_tbl+127704)
MAKE_LITERAL_PAIR(const_tbl+76381, const_tbl+127721)
MAKE_LITERAL_PAIR(const_tbl+76364, const_tbl+127738)
MAKE_LITERAL_PAIR(const_tbl+76347, const_tbl+127755)
MAKE_LITERAL_PAIR(const_tbl+76330, const_tbl+127772)
MAKE_LITERAL_PAIR(const_tbl+76313, const_tbl+127789)
MAKE_LITERAL_PAIR(const_tbl+76296, const_tbl+127806)
MAKE_LITERAL_PAIR(const_tbl+76279, const_tbl+127823)
MAKE_LITERAL_PAIR(const_tbl+76262, const_tbl+127840)
MAKE_LITERAL_PAIR(const_tbl+76245, const_tbl+127857)
MAKE_LITERAL_PAIR(const_tbl+76228, const_tbl+127874)
MAKE_LITERAL_PAIR(const_tbl+76211, const_tbl+127891)
MAKE_LITERAL_PAIR(const_tbl+76194, const_tbl+127908)
MAKE_LITERAL_PAIR(const_tbl+76177, const_tbl+127925)
MAKE_LITERAL_PAIR(const_tbl+76160, const_tbl+127942)
MAKE_LITERAL_PAIR(const_tbl+76143, const_tbl+127959)
MAKE_LITERAL_PAIR(const_tbl+76126, const_tbl+127976)
MAKE_LITERAL_PAIR(const_tbl+76109, const_tbl+127993)
MAKE_LITERAL_PAIR(const_tbl+76092, const_tbl+128010)
MAKE_LITERAL_PAIR(const_tbl+76075, const_tbl+128027)
MAKE_LITERAL_PAIR(const_tbl+76058, const_tbl+128044)
MAKE_LITERAL_PAIR(const_tbl+76041, const_tbl+128061)
MAKE_LITERAL_PAIR(const_tbl+76024, const_tbl+128078)
MAKE_LITERAL_PAIR(const_tbl+76007, const_tbl+128095)
MAKE_LITERAL_PAIR(const_tbl+75990, const_tbl+128112)
MAKE_LITERAL_PAIR(const_tbl+75973, const_tbl+128129)
MAKE_LITERAL_PAIR(const_tbl+75956, const_tbl+128146)
MAKE_LITERAL_PAIR(const_tbl+75939, const_tbl+128163)
MAKE_LITERAL_PAIR(const_tbl+75922, const_tbl+128180)
MAKE_LITERAL_PAIR(const_tbl+75905, const_tbl+128197)
MAKE_LITERAL_PAIR(const_tbl+75888, const_tbl+128214)
MAKE_LITERAL_PAIR(const_tbl+75871, const_tbl+128231)
MAKE_LITERAL_PAIR(const_tbl+75854, const_tbl+128248)
MAKE_LITERAL_PAIR(const_tbl+75837, const_tbl+128265)
MAKE_LITERAL_PAIR(const_tbl+75820, const_tbl+128282)
MAKE_LITERAL_PAIR(const_tbl+75803, const_tbl+128299)
MAKE_LITERAL_PAIR(const_tbl+75786, const_tbl+128316)
MAKE_LITERAL_PAIR(const_tbl+75769, const_tbl+128333)
MAKE_LITERAL_PAIR(const_tbl+75752, const_tbl+128350)
MAKE_LITERAL_PAIR(const_tbl+75735, const_tbl+128367)
MAKE_LITERAL_PAIR(const_tbl+75718, const_tbl+128384)
MAKE_LITERAL_PAIR(const_tbl+75701, const_tbl+128401)
MAKE_LITERAL_PAIR(const_tbl+75684, const_tbl+128418)
MAKE_LITERAL_PAIR(const_tbl+75667, const_tbl+128435)
MAKE_LITERAL_PAIR(const_tbl+75650, const_tbl+128452)
MAKE_LITERAL_PAIR(const_tbl+75633, const_tbl+128469)
MAKE_LITERAL_PAIR(const_tbl+75616, const_tbl+128486)
MAKE_LITERAL_PAIR(const_tbl+75599, const_tbl+128503)
MAKE_LITERAL_PAIR(const_tbl+75582, const_tbl+128520)
MAKE_LITERAL_PAIR(const_tbl+75565, const_tbl+128537)
MAKE_LITERAL_PAIR(const_tbl+75548, const_tbl+128554)
MAKE_LITERAL_PAIR(const_tbl+75531, const_tbl+128571)
MAKE_LITERAL_PAIR(const_tbl+75514, const_tbl+128588)
MAKE_LITERAL_PAIR(const_tbl+75497, const_tbl+128605)
MAKE_LITERAL_PAIR(const_tbl+75480, const_tbl+128622)
MAKE_LITERAL_PAIR(const_tbl+75463, const_tbl+128639)
MAKE_LITERAL_PAIR(const_tbl+75446, const_tbl+128656)
MAKE_LITERAL_PAIR(const_tbl+75429, const_tbl+128673)
MAKE_LITERAL_PAIR(const_tbl+75412, const_tbl+128690)
MAKE_LITERAL_PAIR(const_tbl+75395, const_tbl+128707)
MAKE_LITERAL_PAIR(const_tbl+75378, const_tbl+128724)
MAKE_LITERAL_PAIR(const_tbl+75361, const_tbl+128741)
MAKE_LITERAL_PAIR(const_tbl+75344, const_tbl+128758)
MAKE_LITERAL_PAIR(const_tbl+75327, const_tbl+128775)
MAKE_LITERAL_PAIR(const_tbl+75310, const_tbl+128792)
MAKE_LITERAL_PAIR(const_tbl+75293, const_tbl+128809)
MAKE_LITERAL_PAIR(const_tbl+75276, const_tbl+128826)
MAKE_LITERAL_PAIR(const_tbl+75259, const_tbl+128843)
MAKE_LITERAL_PAIR(const_tbl+75242, const_tbl+128860)
MAKE_LITERAL_PAIR(const_tbl+75225, const_tbl+128877)
MAKE_LITERAL_PAIR(const_tbl+75208, const_tbl+128894)
MAKE_LITERAL_PAIR(const_tbl+75191, const_tbl+128911)
MAKE_LITERAL_PAIR(const_tbl+75174, const_tbl+128928)
MAKE_LITERAL_PAIR(const_tbl+75157, const_tbl+128945)
MAKE_LITERAL_PAIR(const_tbl+75140, const_tbl+128962)
MAKE_LITERAL_PAIR(const_tbl+75123, const_tbl+128979)
MAKE_LITERAL_PAIR(const_tbl+75106, const_tbl+128996)
MAKE_LITERAL_PAIR(const_tbl+75089, const_tbl+129013)
MAKE_LITERAL_PAIR(const_tbl+75072, const_tbl+129030)
MAKE_LITERAL_PAIR(const_tbl+75055, const_tbl+129047)
MAKE_LITERAL_PAIR(const_tbl+75038, const_tbl+129064)
MAKE_LITERAL_PAIR(const_tbl+75021, const_tbl+129081)
MAKE_LITERAL_PAIR(const_tbl+75004, const_tbl+129098)
MAKE_LITERAL_PAIR(const_tbl+74987, const_tbl+129115)
MAKE_LITERAL_PAIR(const_tbl+74970, const_tbl+129132)
MAKE_LITERAL_PAIR(const_tbl+74953, const_tbl+129149)
MAKE_LITERAL_PAIR(const_tbl+74936, const_tbl+129166)
MAKE_LITERAL_PAIR(const_tbl+74919, const_tbl+129183)
MAKE_LITERAL_PAIR(const_tbl+74902, const_tbl+129200)
MAKE_LITERAL_PAIR(const_tbl+74885, const_tbl+129217)
MAKE_LITERAL_PAIR(const_tbl+74868, const_tbl+129234)
MAKE_LITERAL_PAIR(const_tbl+74851, const_tbl+129251)
MAKE_LITERAL_PAIR(const_tbl+74834, const_tbl+129268)
MAKE_LITERAL_PAIR(const_tbl+74817, const_tbl+129285)
MAKE_LITERAL_PAIR(const_tbl+74800, const_tbl+129302)
MAKE_LITERAL_PAIR(const_tbl+74783, const_tbl+129319)
MAKE_LITERAL_PAIR(const_tbl+74766, const_tbl+129336)
MAKE_LITERAL_PAIR(const_tbl+74749, const_tbl+129353)
MAKE_LITERAL_PAIR(const_tbl+74732, const_tbl+129370)
MAKE_LITERAL_PAIR(const_tbl+74715, const_tbl+129387)
MAKE_LITERAL_PAIR(const_tbl+74698, const_tbl+129404)
MAKE_LITERAL_PAIR(const_tbl+74681, const_tbl+129421)
MAKE_LITERAL_PAIR(const_tbl+74664, const_tbl+129438)
MAKE_LITERAL_PAIR(const_tbl+74647, const_tbl+129455)
MAKE_LITERAL_PAIR(const_tbl+74630, const_tbl+129472)
MAKE_LITERAL_PAIR(const_tbl+74613, const_tbl+129489)
MAKE_LITERAL_PAIR(const_tbl+74596, const_tbl+129506)
MAKE_LITERAL_PAIR(const_tbl+74579, const_tbl+129523)
MAKE_LITERAL_PAIR(const_tbl+74562, const_tbl+129540)
MAKE_LITERAL_PAIR(const_tbl+74545, const_tbl+129557)
MAKE_LITERAL_PAIR(const_tbl+74528, const_tbl+129574)
MAKE_LITERAL_PAIR(const_tbl+74511, const_tbl+129591)
MAKE_LITERAL_PAIR(const_tbl+74494, const_tbl+129608)
MAKE_LITERAL_PAIR(const_tbl+74477, const_tbl+129625)
MAKE_LITERAL_PAIR(const_tbl+74460, const_tbl+129642)
MAKE_LITERAL_PAIR(const_tbl+74443, const_tbl+129659)
MAKE_LITERAL_PAIR(const_tbl+74426, const_tbl+129676)
MAKE_LITERAL_PAIR(const_tbl+74409, const_tbl+129693)
MAKE_LITERAL_PAIR(const_tbl+74392, const_tbl+129710)
MAKE_LITERAL_PAIR(const_tbl+74375, const_tbl+129727)
MAKE_LITERAL_PAIR(const_tbl+74358, const_tbl+129744)
MAKE_LITERAL_PAIR(const_tbl+74341, const_tbl+129761)
MAKE_LITERAL_PAIR(const_tbl+74324, const_tbl+129778)
MAKE_LITERAL_PAIR(const_tbl+74307, const_tbl+129795)
MAKE_LITERAL_PAIR(const_tbl+74290, const_tbl+129812)
MAKE_LITERAL_PAIR(const_tbl+74273, const_tbl+129829)
MAKE_LITERAL_PAIR(const_tbl+74256, const_tbl+129846)
MAKE_LITERAL_PAIR(const_tbl+74239, const_tbl+129863)
MAKE_LITERAL_PAIR(const_tbl+74222, const_tbl+129880)
MAKE_LITERAL_PAIR(const_tbl+74205, const_tbl+129897)
MAKE_LITERAL_PAIR(const_tbl+74188, const_tbl+129914)
MAKE_LITERAL_PAIR(const_tbl+74171, const_tbl+129931)
MAKE_LITERAL_PAIR(const_tbl+74154, const_tbl+129948)
MAKE_LITERAL_PAIR(const_tbl+74137, const_tbl+129965)
MAKE_LITERAL_PAIR(const_tbl+74120, const_tbl+129982)
MAKE_LITERAL_PAIR(const_tbl+74103, const_tbl+129999)
MAKE_LITERAL_PAIR(const_tbl+74086, const_tbl+130016)
MAKE_LITERAL_PAIR(const_tbl+74069, const_tbl+130033)
MAKE_LITERAL_PAIR(const_tbl+74052, const_tbl+130050)
MAKE_LITERAL_PAIR(const_tbl+74035, const_tbl+130067)
MAKE_LITERAL_PAIR(const_tbl+74018, const_tbl+130084)
MAKE_LITERAL_PAIR(const_tbl+74001, const_tbl+130101)
MAKE_LITERAL_PAIR(const_tbl+73984, const_tbl+130118)
MAKE_LITERAL_PAIR(const_tbl+73967, const_tbl+130135)
MAKE_LITERAL_PAIR(const_tbl+73950, const_tbl+130152)
MAKE_LITERAL_PAIR(const_tbl+73933, const_tbl+130169)
MAKE_LITERAL_PAIR(const_tbl+73916, const_tbl+130186)
MAKE_LITERAL_PAIR(const_tbl+73899, const_tbl+130203)
MAKE_LITERAL_PAIR(const_tbl+73882, const_tbl+130220)
MAKE_LITERAL_PAIR(const_tbl+73865, const_tbl+130237)
MAKE_LITERAL_PAIR(const_tbl+73848, const_tbl+130254)
MAKE_LITERAL_PAIR(const_tbl+73831, const_tbl+130271)
MAKE_LITERAL_PAIR(const_tbl+73814, const_tbl+130288)
MAKE_LITERAL_PAIR(const_tbl+73797, const_tbl+130305)
MAKE_LITERAL_PAIR(const_tbl+73780, const_tbl+130322)
MAKE_LITERAL_PAIR(const_tbl+73763, const_tbl+130339)
MAKE_LITERAL_PAIR(const_tbl+73746, const_tbl+130356)
MAKE_LITERAL_PAIR(const_tbl+73729, const_tbl+130373)
MAKE_LITERAL_PAIR(const_tbl+73712, const_tbl+130390)
MAKE_LITERAL_PAIR(const_tbl+73695, const_tbl+130407)
MAKE_LITERAL_PAIR(const_tbl+73678, const_tbl+130424)
MAKE_LITERAL_PAIR(const_tbl+73661, const_tbl+130441)
MAKE_LITERAL_PAIR(const_tbl+73644, const_tbl+130458)
MAKE_LITERAL_PAIR(const_tbl+73627, const_tbl+130475)
MAKE_LITERAL_PAIR(const_tbl+73610, const_tbl+130492)
MAKE_LITERAL_PAIR(const_tbl+73593, const_tbl+130509)
MAKE_LITERAL_PAIR(const_tbl+73576, const_tbl+130526)
MAKE_LITERAL_PAIR(const_tbl+73559, const_tbl+130543)
MAKE_LITERAL_PAIR(const_tbl+73542, const_tbl+130560)
MAKE_LITERAL_PAIR(const_tbl+73525, const_tbl+130577)
MAKE_LITERAL_PAIR(const_tbl+73508, const_tbl+130594)
MAKE_LITERAL_PAIR(const_tbl+73491, const_tbl+130611)
MAKE_LITERAL_PAIR(const_tbl+73474, const_tbl+130628)
MAKE_LITERAL_PAIR(const_tbl+73457, const_tbl+130645)
MAKE_LITERAL_PAIR(const_tbl+73440, const_tbl+130662)
MAKE_LITERAL_PAIR(const_tbl+73423, const_tbl+130679)
MAKE_LITERAL_PAIR(const_tbl+73406, const_tbl+130696)
MAKE_LITERAL_PAIR(const_tbl+73389, const_tbl+130713)
MAKE_LITERAL_PAIR(const_tbl+73372, const_tbl+130730)
MAKE_LITERAL_PAIR(const_tbl+73355, const_tbl+130747)
MAKE_LITERAL_PAIR(const_tbl+73338, const_tbl+130764)
MAKE_LITERAL_PAIR(const_tbl+73321, const_tbl+130781)
MAKE_LITERAL_PAIR(const_tbl+73304, const_tbl+130798)
MAKE_LITERAL_PAIR(const_tbl+73287, const_tbl+130815)
MAKE_LITERAL_PAIR(const_tbl+73270, const_tbl+130832)
MAKE_LITERAL_PAIR(const_tbl+73253, const_tbl+130849)
MAKE_LITERAL_PAIR(const_tbl+73236, const_tbl+130866)
MAKE_LITERAL_PAIR(const_tbl+73219, const_tbl+130883)
MAKE_LITERAL_PAIR(const_tbl+73202, const_tbl+130900)
MAKE_LITERAL_PAIR(const_tbl+73185, const_tbl+130917)
MAKE_LITERAL_PAIR(const_tbl+73168, const_tbl+130934)
MAKE_LITERAL_PAIR(const_tbl+73151, const_tbl+130951)
MAKE_LITERAL_PAIR(const_tbl+73134, const_tbl+130968)
MAKE_LITERAL_PAIR(const_tbl+73117, const_tbl+130985)
MAKE_LITERAL_PAIR(const_tbl+73100, const_tbl+131002)
MAKE_LITERAL_PAIR(const_tbl+73083, const_tbl+131019)
MAKE_LITERAL_PAIR(const_tbl+73066, const_tbl+131036)
MAKE_LITERAL_PAIR(const_tbl+73049, const_tbl+131053)
MAKE_LITERAL_PAIR(const_tbl+73032, const_tbl+131070)
MAKE_LITERAL_PAIR(const_tbl+73015, const_tbl+131087)
MAKE_LITERAL_PAIR(const_tbl+72998, const_tbl+131104)
MAKE_LITERAL_PAIR(const_tbl+72981, const_tbl+131121)
MAKE_LITERAL_PAIR(const_tbl+72964, const_tbl+131138)
MAKE_LITERAL_PAIR(const_tbl+72947, const_tbl+131155)
MAKE_LITERAL_PAIR(const_tbl+72930, const_tbl+131172)
MAKE_LITERAL_PAIR(const_tbl+72913, const_tbl+131189)
MAKE_LITERAL_PAIR(const_tbl+72896, const_tbl+131206)
MAKE_LITERAL_PAIR(const_tbl+72879, const_tbl+131223)
MAKE_LITERAL_PAIR(const_tbl+72862, const_tbl+131240)
MAKE_LITERAL_PAIR(const_tbl+72845, const_tbl+131257)
MAKE_LITERAL_PAIR(const_tbl+72828, const_tbl+131274)
MAKE_LITERAL_PAIR(const_tbl+72811, const_tbl+131291)
MAKE_LITERAL_PAIR(const_tbl+72794, const_tbl+131308)
MAKE_LITERAL_PAIR(const_tbl+72777, const_tbl+131325)
MAKE_LITERAL_PAIR(const_tbl+72760, const_tbl+131342)
MAKE_LITERAL_PAIR(const_tbl+72743, const_tbl+131359)
MAKE_LITERAL_PAIR(const_tbl+72726, const_tbl+131376)
MAKE_LITERAL_PAIR(const_tbl+72709, const_tbl+131393)
MAKE_LITERAL_PAIR(const_tbl+72692, const_tbl+131410)
MAKE_LITERAL_PAIR(const_tbl+72675, const_tbl+131427)
MAKE_LITERAL_PAIR(const_tbl+72658, const_tbl+131444)
MAKE_LITERAL_PAIR(const_tbl+72641, const_tbl+131461)
MAKE_LITERAL_PAIR(const_tbl+72624, const_tbl+131478)
MAKE_LITERAL_PAIR(const_tbl+72607, const_tbl+131495)
MAKE_LITERAL_PAIR(const_tbl+72590, const_tbl+131512)
MAKE_LITERAL_PAIR(const_tbl+72573, const_tbl+131529)
MAKE_LITERAL_PAIR(const_tbl+72556, const_tbl+131546)
MAKE_LITERAL_PAIR(const_tbl+72539, const_tbl+131563)
MAKE_LITERAL_PAIR(const_tbl+72522, const_tbl+131580)
MAKE_LITERAL_PAIR(const_tbl+72505, const_tbl+131597)
MAKE_LITERAL_PAIR(const_tbl+72488, const_tbl+131614)
MAKE_LITERAL_PAIR(const_tbl+72471, const_tbl+131631)
MAKE_LITERAL_PAIR(const_tbl+72454, const_tbl+131648)
MAKE_LITERAL_PAIR(const_tbl+72437, const_tbl+131665)
MAKE_LITERAL_PAIR(const_tbl+72420, const_tbl+131682)
MAKE_LITERAL_PAIR(const_tbl+72403, const_tbl+131699)
MAKE_LITERAL_PAIR(const_tbl+72386, const_tbl+131716)
MAKE_LITERAL_PAIR(const_tbl+72369, const_tbl+131733)
MAKE_LITERAL_PAIR(const_tbl+72352, const_tbl+131750)
MAKE_LITERAL_PAIR(const_tbl+72335, const_tbl+131767)
MAKE_LITERAL_PAIR(const_tbl+72318, const_tbl+131784)
MAKE_LITERAL_PAIR(const_tbl+72301, const_tbl+131801)
MAKE_LITERAL_PAIR(const_tbl+72284, const_tbl+131818)
MAKE_LITERAL_PAIR(const_tbl+72267, const_tbl+131835)
MAKE_LITERAL_PAIR(const_tbl+72250, const_tbl+131852)
MAKE_LITERAL_PAIR(const_tbl+72233, const_tbl+131869)
MAKE_LITERAL_PAIR(const_tbl+72216, const_tbl+131886)
MAKE_LITERAL_PAIR(const_tbl+72199, const_tbl+131903)
MAKE_LITERAL_PAIR(const_tbl+72182, const_tbl+131920)
MAKE_LITERAL_PAIR(const_tbl+72165, const_tbl+131937)
MAKE_LITERAL_PAIR(const_tbl+72148, const_tbl+131954)
MAKE_LITERAL_PAIR(const_tbl+72131, const_tbl+131971)
MAKE_LITERAL_PAIR(const_tbl+72114, const_tbl+131988)
MAKE_LITERAL_PAIR(const_tbl+72097, const_tbl+132005)
MAKE_LITERAL_PAIR(const_tbl+72080, const_tbl+132022)
MAKE_LITERAL_PAIR(const_tbl+72063, const_tbl+132039)
MAKE_LITERAL_PAIR(const_tbl+72046, const_tbl+132056)
MAKE_LITERAL_PAIR(const_tbl+72029, const_tbl+132073)
MAKE_LITERAL_PAIR(const_tbl+72012, const_tbl+132090)
MAKE_LITERAL_PAIR(const_tbl+71995, const_tbl+132107)
MAKE_LITERAL_PAIR(const_tbl+71978, const_tbl+132124)
MAKE_LITERAL_PAIR(const_tbl+71961, const_tbl+132141)
MAKE_LITERAL_PAIR(const_tbl+71944, const_tbl+132158)
MAKE_LITERAL_PAIR(const_tbl+71927, const_tbl+132175)
MAKE_LITERAL_PAIR(const_tbl+71910, const_tbl+132192)
MAKE_LITERAL_PAIR(const_tbl+71893, const_tbl+132209)
MAKE_LITERAL_PAIR(const_tbl+71876, const_tbl+132226)
MAKE_LITERAL_PAIR(const_tbl+71859, const_tbl+132243)
MAKE_LITERAL_PAIR(const_tbl+71842, const_tbl+132260)
MAKE_LITERAL_PAIR(const_tbl+71825, const_tbl+132277)
MAKE_LITERAL_PAIR(const_tbl+71808, const_tbl+132294)
MAKE_LITERAL_PAIR(const_tbl+71791, const_tbl+132311)
MAKE_LITERAL_PAIR(const_tbl+71774, const_tbl+132328)
MAKE_LITERAL_PAIR(const_tbl+71757, const_tbl+132345)
MAKE_LITERAL_PAIR(const_tbl+71740, const_tbl+132362)
MAKE_LITERAL_PAIR(const_tbl+71723, const_tbl+132379)
MAKE_LITERAL_PAIR(const_tbl+71706, const_tbl+132396)
MAKE_LITERAL_PAIR(const_tbl+71689, const_tbl+132413)
MAKE_LITERAL_PAIR(const_tbl+71672, const_tbl+132430)
MAKE_LITERAL_PAIR(const_tbl+71655, const_tbl+132447)
MAKE_LITERAL_PAIR(const_tbl+71638, const_tbl+132464)
MAKE_LITERAL_PAIR(const_tbl+71621, const_tbl+132481)
MAKE_LITERAL_PAIR(const_tbl+71604, const_tbl+132498)
MAKE_LITERAL_PAIR(const_tbl+71587, const_tbl+132515)
MAKE_LITERAL_PAIR(const_tbl+71570, const_tbl+132532)
MAKE_LITERAL_PAIR(const_tbl+71553, const_tbl+132549)
MAKE_LITERAL_PAIR(const_tbl+71536, const_tbl+132566)
MAKE_LITERAL_PAIR(const_tbl+71519, const_tbl+132583)
MAKE_LITERAL_PAIR(const_tbl+71502, const_tbl+132600)
MAKE_LITERAL_PAIR(const_tbl+71485, const_tbl+132617)
MAKE_LITERAL_PAIR(const_tbl+71468, const_tbl+132634)
MAKE_LITERAL_PAIR(const_tbl+71451, const_tbl+132651)
MAKE_LITERAL_PAIR(const_tbl+71434, const_tbl+132668)
MAKE_LITERAL_PAIR(const_tbl+71417, const_tbl+132685)
MAKE_LITERAL_PAIR(const_tbl+71400, const_tbl+132702)
MAKE_LITERAL_PAIR(const_tbl+71383, const_tbl+132719)
MAKE_LITERAL_PAIR(const_tbl+71366, const_tbl+132736)
MAKE_LITERAL_PAIR(const_tbl+71349, const_tbl+132753)
MAKE_LITERAL_PAIR(const_tbl+71332, const_tbl+132770)
MAKE_LITERAL_PAIR(const_tbl+71315, const_tbl+132787)
MAKE_LITERAL_PAIR(const_tbl+71298, const_tbl+132804)
MAKE_LITERAL_PAIR(const_tbl+71281, const_tbl+132821)
MAKE_LITERAL_PAIR(const_tbl+71264, const_tbl+132838)
MAKE_LITERAL_PAIR(const_tbl+71247, const_tbl+132855)
MAKE_LITERAL_PAIR(const_tbl+71230, const_tbl+132872)
MAKE_LITERAL_PAIR(const_tbl+71213, const_tbl+132889)
MAKE_LITERAL_PAIR(const_tbl+71196, const_tbl+132906)
MAKE_LITERAL_PAIR(const_tbl+71179, const_tbl+132923)
MAKE_LITERAL_PAIR(const_tbl+71162, const_tbl+132940)
MAKE_LITERAL_PAIR(const_tbl+71145, const_tbl+132957)
MAKE_LITERAL_PAIR(const_tbl+71128, const_tbl+132974)
MAKE_LITERAL_PAIR(const_tbl+71111, const_tbl+132991)
MAKE_LITERAL_PAIR(const_tbl+71094, const_tbl+133008)
MAKE_LITERAL_PAIR(const_tbl+71077, const_tbl+133025)
MAKE_LITERAL_PAIR(const_tbl+71060, const_tbl+133042)
MAKE_LITERAL_PAIR(const_tbl+71043, const_tbl+133059)
MAKE_LITERAL_PAIR(const_tbl+71026, const_tbl+133076)
MAKE_LITERAL_PAIR(const_tbl+71009, const_tbl+133093)
MAKE_LITERAL_PAIR(const_tbl+70992, const_tbl+133110)
MAKE_LITERAL_PAIR(const_tbl+70975, const_tbl+133127)
MAKE_LITERAL_PAIR(const_tbl+70958, const_tbl+133144)
MAKE_LITERAL_PAIR(const_tbl+70941, const_tbl+133161)
MAKE_LITERAL_PAIR(const_tbl+70924, const_tbl+133178)
MAKE_LITERAL_PAIR(const_tbl+70907, const_tbl+133195)
MAKE_LITERAL_PAIR(const_tbl+70890, const_tbl+133212)
MAKE_LITERAL_PAIR(const_tbl+70873, const_tbl+133229)
MAKE_LITERAL_PAIR(const_tbl+70856, const_tbl+133246)
MAKE_LITERAL_PAIR(const_tbl+70839, const_tbl+133263)
MAKE_LITERAL_PAIR(const_tbl+70822, const_tbl+133280)
MAKE_LITERAL_PAIR(const_tbl+70805, const_tbl+133297)
MAKE_LITERAL_PAIR(const_tbl+70788, const_tbl+133314)
MAKE_LITERAL_PAIR(const_tbl+70771, const_tbl+133331)
MAKE_LITERAL_PAIR(const_tbl+70754, const_tbl+133348)
MAKE_LITERAL_PAIR(const_tbl+70737, const_tbl+133365)
MAKE_LITERAL_PAIR(const_tbl+70720, const_tbl+133382)
MAKE_LITERAL_PAIR(const_tbl+70703, const_tbl+133399)
MAKE_LITERAL_PAIR(const_tbl+70686, const_tbl+133416)
MAKE_LITERAL_PAIR(const_tbl+70669, const_tbl+133433)
MAKE_LITERAL_PAIR(const_tbl+70652, const_tbl+133450)
MAKE_LITERAL_PAIR(const_tbl+70635, const_tbl+133467)
MAKE_LITERAL_PAIR(const_tbl+70618, const_tbl+133484)
MAKE_LITERAL_PAIR(const_tbl+70601, const_tbl+133501)
MAKE_LITERAL_PAIR(const_tbl+70584, const_tbl+133518)
MAKE_LITERAL_PAIR(const_tbl+70567, const_tbl+133535)
MAKE_LITERAL_PAIR(const_tbl+70550, const_tbl+133552)
MAKE_LITERAL_PAIR(const_tbl+70533, const_tbl+133569)
MAKE_LITERAL_PAIR(const_tbl+70516, const_tbl+133586)
MAKE_LITERAL_PAIR(const_tbl+70499, const_tbl+133603)
MAKE_LITERAL_PAIR(const_tbl+70482, const_tbl+133620)
MAKE_LITERAL_PAIR(const_tbl+70465, const_tbl+133637)
MAKE_LITERAL_PAIR(const_tbl+70448, const_tbl+133654)
MAKE_LITERAL_PAIR(const_tbl+70431, const_tbl+133671)
MAKE_LITERAL_PAIR(const_tbl+70414, const_tbl+133688)
MAKE_LITERAL_PAIR(const_tbl+70397, const_tbl+133705)
MAKE_LITERAL_PAIR(const_tbl+70380, const_tbl+133722)
MAKE_LITERAL_PAIR(const_tbl+70363, const_tbl+133739)
MAKE_LITERAL_PAIR(const_tbl+70346, const_tbl+133756)
MAKE_LITERAL_PAIR(const_tbl+70329, const_tbl+133773)
MAKE_LITERAL_PAIR(const_tbl+70312, const_tbl+133790)
MAKE_LITERAL_PAIR(const_tbl+70295, const_tbl+133807)
MAKE_LITERAL_PAIR(const_tbl+70278, const_tbl+133824)
MAKE_LITERAL_PAIR(const_tbl+70261, const_tbl+133841)
MAKE_LITERAL_PAIR(const_tbl+70244, const_tbl+133858)
MAKE_LITERAL_PAIR(const_tbl+70227, const_tbl+133875)
MAKE_LITERAL_PAIR(const_tbl+70210, const_tbl+133892)
MAKE_LITERAL_PAIR(const_tbl+70193, const_tbl+133909)
MAKE_LITERAL_PAIR(const_tbl+70176, const_tbl+133926)
MAKE_LITERAL_PAIR(const_tbl+70159, const_tbl+133943)
MAKE_LITERAL_PAIR(const_tbl+70142, const_tbl+133960)
MAKE_LITERAL_PAIR(const_tbl+70125, const_tbl+133977)
MAKE_LITERAL_PAIR(const_tbl+70108, const_tbl+133994)
MAKE_LITERAL_PAIR(const_tbl+70091, const_tbl+134011)
MAKE_LITERAL_PAIR(const_tbl+70074, const_tbl+134028)
MAKE_LITERAL_PAIR(const_tbl+70057, const_tbl+134045)
MAKE_LITERAL_PAIR(const_tbl+70040, const_tbl+134062)
MAKE_LITERAL_PAIR(const_tbl+70023, const_tbl+134079)
MAKE_LITERAL_PAIR(const_tbl+70006, const_tbl+134096)
MAKE_LITERAL_PAIR(const_tbl+69989, const_tbl+134113)
MAKE_LITERAL_PAIR(const_tbl+69972, const_tbl+134130)
MAKE_LITERAL_PAIR(const_tbl+69955, const_tbl+134147)
MAKE_LITERAL_PAIR(const_tbl+69938, const_tbl+134164)
MAKE_LITERAL_PAIR(const_tbl+69921, const_tbl+134181)
MAKE_LITERAL_PAIR(const_tbl+69904, const_tbl+134198)
MAKE_LITERAL_PAIR(const_tbl+69887, const_tbl+134215)
MAKE_LITERAL_PAIR(const_tbl+69870, const_tbl+134232)
MAKE_LITERAL_PAIR(const_tbl+69853, const_tbl+134249)
MAKE_LITERAL_PAIR(const_tbl+69836, const_tbl+134266)
MAKE_LITERAL_PAIR(const_tbl+69819, const_tbl+134283)
MAKE_LITERAL_PAIR(const_tbl+69802, const_tbl+134300)
MAKE_LITERAL_PAIR(const_tbl+69785, const_tbl+134317)
MAKE_LITERAL_PAIR(const_tbl+69768, const_tbl+134334)
MAKE_LITERAL_PAIR(const_tbl+69751, const_tbl+134351)
MAKE_LITERAL_PAIR(const_tbl+69734, const_tbl+134368)
MAKE_LITERAL_PAIR(const_tbl+69717, const_tbl+134385)
MAKE_LITERAL_PAIR(const_tbl+69700, const_tbl+134402)
MAKE_LITERAL_PAIR(const_tbl+69683, const_tbl+134419)
MAKE_LITERAL_PAIR(const_tbl+69666, const_tbl+134436)
MAKE_LITERAL_PAIR(const_tbl+69649, const_tbl+134453)
MAKE_LITERAL_PAIR(const_tbl+69632, const_tbl+134470)
MAKE_LITERAL_PAIR(const_tbl+69615, const_tbl+134487)
MAKE_LITERAL_PAIR(const_tbl+69598, const_tbl+134504)
MAKE_LITERAL_PAIR(const_tbl+69581, const_tbl+134521)
MAKE_LITERAL_PAIR(const_tbl+69564, const_tbl+134538)
MAKE_LITERAL_PAIR(const_tbl+69547, const_tbl+134555)
MAKE_LITERAL_PAIR(const_tbl+69530, const_tbl+134572)
MAKE_LITERAL_PAIR(const_tbl+69513, const_tbl+134589)
MAKE_LITERAL_PAIR(const_tbl+69496, const_tbl+134606)
MAKE_LITERAL_PAIR(const_tbl+69479, const_tbl+134623)
MAKE_LITERAL_PAIR(const_tbl+69462, const_tbl+134640)
MAKE_LITERAL_PAIR(const_tbl+69445, const_tbl+134657)
MAKE_LITERAL_PAIR(const_tbl+69428, const_tbl+134674)
MAKE_LITERAL_PAIR(const_tbl+69411, const_tbl+134691)
MAKE_LITERAL_PAIR(const_tbl+69394, const_tbl+134708)
MAKE_LITERAL_PAIR(const_tbl+69377, const_tbl+134725)
MAKE_LITERAL_PAIR(const_tbl+69360, const_tbl+134742)
MAKE_LITERAL_PAIR(const_tbl+69343, const_tbl+134759)
MAKE_LITERAL_PAIR(const_tbl+69326, const_tbl+134776)
MAKE_LITERAL_PAIR(const_tbl+69309, const_tbl+134793)
MAKE_LITERAL_PAIR(const_tbl+69292, const_tbl+134810)
MAKE_LITERAL_PAIR(const_tbl+69275, const_tbl+134827)
MAKE_LITERAL_PAIR(const_tbl+69258, const_tbl+134844)
MAKE_LITERAL_PAIR(const_tbl+69241, const_tbl+134861)
MAKE_LITERAL_PAIR(const_tbl+69224, const_tbl+134878)
MAKE_LITERAL_PAIR(const_tbl+69207, const_tbl+134895)
MAKE_LITERAL_PAIR(const_tbl+69190, const_tbl+134912)
MAKE_LITERAL_PAIR(const_tbl+69173, const_tbl+134929)
MAKE_LITERAL_PAIR(const_tbl+69156, const_tbl+134946)
MAKE_LITERAL_PAIR(const_tbl+69139, const_tbl+134963)
MAKE_LITERAL_PAIR(const_tbl+69122, const_tbl+134980)
MAKE_LITERAL_PAIR(const_tbl+69105, const_tbl+134997)
MAKE_LITERAL_PAIR(const_tbl+69088, const_tbl+135014)
MAKE_LITERAL_PAIR(const_tbl+69071, const_tbl+135031)
MAKE_LITERAL_PAIR(const_tbl+69054, const_tbl+135048)
MAKE_LITERAL_PAIR(const_tbl+69037, const_tbl+135065)
MAKE_LITERAL_PAIR(const_tbl+69020, const_tbl+135082)
MAKE_LITERAL_PAIR(const_tbl+69003, const_tbl+135099)
MAKE_LITERAL_PAIR(const_tbl+68986, const_tbl+135116)
MAKE_LITERAL_PAIR(const_tbl+68969, const_tbl+135133)
MAKE_LITERAL_PAIR(const_tbl+68952, const_tbl+135150)
MAKE_LITERAL_PAIR(const_tbl+68935, const_tbl+135167)
MAKE_LITERAL_PAIR(const_tbl+68918, const_tbl+135184)
MAKE_LITERAL_PAIR(const_tbl+68901, const_tbl+135201)
MAKE_LITERAL_PAIR(const_tbl+68884, const_tbl+135218)
MAKE_LITERAL_PAIR(const_tbl+68867, const_tbl+135235)
MAKE_LITERAL_PAIR(const_tbl+68850, const_tbl+135252)
MAKE_LITERAL_PAIR(const_tbl+68833, const_tbl+135269)
MAKE_LITERAL_PAIR(const_tbl+68816, const_tbl+135286)
MAKE_LITERAL_PAIR(const_tbl+68799, const_tbl+135303)
MAKE_LITERAL_PAIR(const_tbl+68782, const_tbl+135320)
MAKE_LITERAL_PAIR(const_tbl+68765, const_tbl+135337)
MAKE_LITERAL_PAIR(const_tbl+68748, const_tbl+135354)
MAKE_LITERAL_PAIR(const_tbl+68731, const_tbl+135371)
MAKE_LITERAL_PAIR(const_tbl+68714, const_tbl+135388)
MAKE_LITERAL_PAIR(const_tbl+68697, const_tbl+135405)
MAKE_LITERAL_PAIR(const_tbl+68680, const_tbl+135422)
MAKE_LITERAL_PAIR(const_tbl+68663, const_tbl+135439)
MAKE_LITERAL_PAIR(const_tbl+68646, const_tbl+135456)
MAKE_LITERAL_PAIR(const_tbl+68629, const_tbl+135473)
MAKE_LITERAL_PAIR(const_tbl+68612, const_tbl+135490)
MAKE_LITERAL_PAIR(const_tbl+68595, const_tbl+135507)
MAKE_LITERAL_PAIR(const_tbl+68578, const_tbl+135524)
MAKE_LITERAL_PAIR(const_tbl+68561, const_tbl+135541)
MAKE_LITERAL_PAIR(const_tbl+68544, const_tbl+135558)
MAKE_LITERAL_PAIR(const_tbl+68527, const_tbl+135575)
MAKE_LITERAL_PAIR(const_tbl+68510, const_tbl+135592)
MAKE_LITERAL_PAIR(const_tbl+68493, const_tbl+135609)
MAKE_LITERAL_PAIR(const_tbl+68476, const_tbl+135626)
MAKE_LITERAL_PAIR(const_tbl+68459, const_tbl+135643)
MAKE_LITERAL_PAIR(const_tbl+68442, const_tbl+135660)
MAKE_LITERAL_PAIR(const_tbl+68425, const_tbl+135677)
MAKE_LITERAL_PAIR(const_tbl+68408, const_tbl+135694)
MAKE_LITERAL_PAIR(const_tbl+68391, const_tbl+135711)
MAKE_LITERAL_PAIR(const_tbl+68374, const_tbl+135728)
MAKE_LITERAL_PAIR(const_tbl+68357, const_tbl+135745)
MAKE_LITERAL_PAIR(const_tbl+68340, const_tbl+135762)
MAKE_LITERAL_PAIR(const_tbl+68323, const_tbl+135779)
MAKE_LITERAL_PAIR(const_tbl+68306, const_tbl+135796)
MAKE_LITERAL_PAIR(const_tbl+68289, const_tbl+135813)
MAKE_LITERAL_PAIR(const_tbl+68272, const_tbl+135830)
MAKE_LITERAL_PAIR(const_tbl+68255, const_tbl+135847)
MAKE_LITERAL_PAIR(const_tbl+68238, const_tbl+135864)
MAKE_LITERAL_PAIR(const_tbl+68221, const_tbl+135881)
MAKE_LITERAL_PAIR(const_tbl+68204, const_tbl+135898)
MAKE_LITERAL_PAIR(const_tbl+68187, const_tbl+135915)
MAKE_LITERAL_PAIR(const_tbl+68170, const_tbl+135932)
MAKE_LITERAL_PAIR(const_tbl+68153, const_tbl+135949)
MAKE_LITERAL_PAIR(const_tbl+68136, const_tbl+135966)
MAKE_LITERAL_PAIR(const_tbl+68119, const_tbl+135983)
MAKE_LITERAL_PAIR(const_tbl+68102, const_tbl+136000)
MAKE_LITERAL_PAIR(const_tbl+68085, const_tbl+136017)
MAKE_LITERAL_PAIR(const_tbl+68068, const_tbl+136034)
MAKE_LITERAL_PAIR(const_tbl+68051, const_tbl+136051)
MAKE_LITERAL_PAIR(const_tbl+68034, const_tbl+136068)
MAKE_LITERAL_PAIR(const_tbl+68017, const_tbl+136085)
MAKE_LITERAL_PAIR(const_tbl+68000, const_tbl+136102)
MAKE_LITERAL_PAIR(const_tbl+67983, const_tbl+136119)
MAKE_LITERAL_PAIR(const_tbl+67966, const_tbl+136136)
MAKE_LITERAL_PAIR(const_tbl+67949, const_tbl+136153)
MAKE_LITERAL_PAIR(const_tbl+67932, const_tbl+136170)
MAKE_LITERAL_PAIR(const_tbl+67915, const_tbl+136187)
MAKE_LITERAL_PAIR(const_tbl+67898, const_tbl+136204)
MAKE_LITERAL_PAIR(const_tbl+67881, const_tbl+136221)
MAKE_LITERAL_PAIR(const_tbl+67864, const_tbl+136238)
MAKE_LITERAL_PAIR(const_tbl+67847, const_tbl+136255)
MAKE_LITERAL_PAIR(const_tbl+67830, const_tbl+136272)
MAKE_LITERAL_PAIR(const_tbl+67813, const_tbl+136289)
MAKE_LITERAL_PAIR(const_tbl+67796, const_tbl+136306)
MAKE_LITERAL_PAIR(const_tbl+67779, const_tbl+136323)
MAKE_LITERAL_PAIR(const_tbl+67762, const_tbl+136340)
MAKE_LITERAL_PAIR(const_tbl+67745, const_tbl+136357)
MAKE_LITERAL_PAIR(const_tbl+67728, const_tbl+136374)
MAKE_LITERAL_PAIR(const_tbl+67711, const_tbl+136391)
MAKE_LITERAL_PAIR(const_tbl+67694, const_tbl+136408)
MAKE_LITERAL_PAIR(const_tbl+67677, const_tbl+136425)
MAKE_LITERAL_PAIR(const_tbl+67660, const_tbl+136442)
MAKE_LITERAL_PAIR(const_tbl+67643, const_tbl+136459)
MAKE_LITERAL_PAIR(const_tbl+67626, const_tbl+136476)
MAKE_LITERAL_PAIR(const_tbl+67609, const_tbl+136493)
MAKE_LITERAL_PAIR(const_tbl+67592, const_tbl+136510)
MAKE_LITERAL_PAIR(const_tbl+67575, const_tbl+136527)
MAKE_LITERAL_PAIR(const_tbl+67558, const_tbl+136544)
MAKE_LITERAL_PAIR(const_tbl+67541, const_tbl+136561)
MAKE_LITERAL_PAIR(const_tbl+67524, const_tbl+136578)
MAKE_LITERAL_PAIR(const_tbl+67507, const_tbl+136595)
MAKE_LITERAL_PAIR(const_tbl+67490, const_tbl+136612)
MAKE_LITERAL_PAIR(const_tbl+67473, const_tbl+136629)
MAKE_LITERAL_PAIR(const_tbl+67456, const_tbl+136646)
MAKE_LITERAL_PAIR(const_tbl+67439, const_tbl+136663)
MAKE_LITERAL_PAIR(const_tbl+67422, const_tbl+136680)
MAKE_LITERAL_PAIR(const_tbl+67405, const_tbl+136697)
MAKE_LITERAL_PAIR(const_tbl+67388, const_tbl+136714)
MAKE_LITERAL_PAIR(const_tbl+67371, const_tbl+136731)
MAKE_LITERAL_PAIR(const_tbl+67354, const_tbl+136748)
MAKE_LITERAL_PAIR(const_tbl+67337, const_tbl+136765)
MAKE_LITERAL_PAIR(const_tbl+67320, const_tbl+136782)
MAKE_LITERAL_PAIR(const_tbl+67303, const_tbl+136799)
MAKE_LITERAL_PAIR(const_tbl+67286, const_tbl+136816)
MAKE_LITERAL_PAIR(const_tbl+67269, const_tbl+136833)
MAKE_LITERAL_PAIR(const_tbl+67252, const_tbl+136850)
MAKE_LITERAL_PAIR(const_tbl+67235, const_tbl+136867)
MAKE_LITERAL_PAIR(const_tbl+67218, const_tbl+136884)
MAKE_LITERAL_PAIR(const_tbl+67201, const_tbl+136901)
MAKE_LITERAL_PAIR(const_tbl+67184, const_tbl+136918)
MAKE_LITERAL_PAIR(const_tbl+67167, const_tbl+136935)
MAKE_LITERAL_PAIR(const_tbl+67150, const_tbl+136952)
MAKE_LITERAL_PAIR(const_tbl+67133, const_tbl+136969)
MAKE_LITERAL_PAIR(const_tbl+67116, const_tbl+136986)
MAKE_LITERAL_PAIR(const_tbl+67099, const_tbl+137003)
MAKE_LITERAL_PAIR(const_tbl+67082, const_tbl+137020)
MAKE_LITERAL_PAIR(const_tbl+67065, const_tbl+137037)
MAKE_LITERAL_PAIR(const_tbl+67048, const_tbl+137054)
MAKE_LITERAL_PAIR(const_tbl+67031, const_tbl+137071)
MAKE_LITERAL_PAIR(const_tbl+67014, const_tbl+137088)
MAKE_LITERAL_PAIR(const_tbl+66997, const_tbl+137105)
MAKE_LITERAL_PAIR(const_tbl+66980, const_tbl+137122)
MAKE_LITERAL_PAIR(const_tbl+66963, const_tbl+137139)
MAKE_LITERAL_PAIR(const_tbl+66946, const_tbl+137156)
MAKE_LITERAL_PAIR(const_tbl+66929, const_tbl+137173)
MAKE_LITERAL_PAIR(const_tbl+66912, const_tbl+137190)
MAKE_LITERAL_PAIR(const_tbl+66895, const_tbl+137207)
MAKE_LITERAL_PAIR(const_tbl+66878, const_tbl+137224)
MAKE_LITERAL_PAIR(const_tbl+66861, const_tbl+137241)
MAKE_LITERAL_PAIR(const_tbl+66844, const_tbl+137258)
MAKE_LITERAL_PAIR(const_tbl+66827, const_tbl+137275)
MAKE_LITERAL_PAIR(const_tbl+66810, const_tbl+137292)
MAKE_LITERAL_PAIR(const_tbl+66793, const_tbl+137309)
MAKE_LITERAL_PAIR(const_tbl+66776, const_tbl+137326)
MAKE_LITERAL_PAIR(const_tbl+66759, const_tbl+137343)
MAKE_LITERAL_PAIR(const_tbl+66742, const_tbl+137360)
MAKE_LITERAL_PAIR(const_tbl+66725, const_tbl+137377)
MAKE_LITERAL_PAIR(const_tbl+66708, const_tbl+137394)
MAKE_LITERAL_PAIR(const_tbl+66691, const_tbl+137411)
MAKE_LITERAL_PAIR(const_tbl+66674, const_tbl+137428)
MAKE_LITERAL_PAIR(const_tbl+66657, const_tbl+137445)
MAKE_LITERAL_PAIR(const_tbl+66640, const_tbl+137462)
MAKE_LITERAL_PAIR(const_tbl+66623, const_tbl+137479)
MAKE_LITERAL_PAIR(const_tbl+66606, const_tbl+137496)
MAKE_LITERAL_PAIR(const_tbl+66589, const_tbl+137513)
MAKE_LITERAL_PAIR(const_tbl+66572, const_tbl+137530)
MAKE_LITERAL_PAIR(const_tbl+66555, const_tbl+137547)
MAKE_LITERAL_PAIR(const_tbl+66538, const_tbl+137564)
MAKE_LITERAL_PAIR(const_tbl+66521, const_tbl+137581)
MAKE_LITERAL_PAIR(const_tbl+66504, const_tbl+137598)
MAKE_LITERAL_PAIR(const_tbl+66487, const_tbl+137615)
MAKE_LITERAL_PAIR(const_tbl+66470, const_tbl+137632)
MAKE_LITERAL_PAIR(const_tbl+66453, const_tbl+137649)
MAKE_LITERAL_PAIR(const_tbl+66436, const_tbl+137666)
MAKE_LITERAL_PAIR(const_tbl+66419, const_tbl+137683)
MAKE_LITERAL_PAIR(const_tbl+66402, const_tbl+137700)
MAKE_LITERAL_PAIR(const_tbl+66385, const_tbl+137717)
MAKE_LITERAL_PAIR(const_tbl+66368, const_tbl+137734)
MAKE_LITERAL_PAIR(const_tbl+66351, const_tbl+137751)
MAKE_LITERAL_PAIR(const_tbl+66334, const_tbl+137768)
MAKE_LITERAL_PAIR(const_tbl+66317, const_tbl+137785)
MAKE_LITERAL_PAIR(const_tbl+66300, const_tbl+137802)
MAKE_LITERAL_PAIR(const_tbl+66283, const_tbl+137819)
MAKE_LITERAL_PAIR(const_tbl+66266, const_tbl+137836)
MAKE_LITERAL_PAIR(const_tbl+66249, const_tbl+137853)
MAKE_LITERAL_PAIR(const_tbl+66232, const_tbl+137870)
MAKE_LITERAL_PAIR(const_tbl+66215, const_tbl+137887)
MAKE_LITERAL_PAIR(const_tbl+66198, const_tbl+137904)
MAKE_LITERAL_PAIR(const_tbl+66181, const_tbl+137921)
MAKE_LITERAL_PAIR(const_tbl+66164, const_tbl+137938)
MAKE_LITERAL_PAIR(const_tbl+66147, const_tbl+137955)
MAKE_LITERAL_PAIR(const_tbl+66130, const_tbl+137972)
MAKE_LITERAL_PAIR(const_tbl+66113, const_tbl+137989)
MAKE_LITERAL_PAIR(const_tbl+66096, const_tbl+138006)
MAKE_LITERAL_PAIR(const_tbl+66079, const_tbl+138023)
MAKE_LITERAL_PAIR(const_tbl+66062, const_tbl+138040)
MAKE_LITERAL_PAIR(const_tbl+66045, const_tbl+138057)
MAKE_LITERAL_PAIR(const_tbl+66028, const_tbl+138074)
MAKE_LITERAL_PAIR(const_tbl+66011, const_tbl+138091)
MAKE_LITERAL_PAIR(const_tbl+65994, const_tbl+138108)
MAKE_LITERAL_PAIR(const_tbl+65977, const_tbl+138125)
MAKE_LITERAL_PAIR(const_tbl+65960, const_tbl+138142)
MAKE_LITERAL_PAIR(const_tbl+65943, const_tbl+138159)
MAKE_LITERAL_PAIR(const_tbl+65926, const_tbl+138176)
MAKE_LITERAL_PAIR(const_tbl+65909, const_tbl+138193)
MAKE_LITERAL_PAIR(const_tbl+65892, const_tbl+138210)
MAKE_LITERAL_PAIR(const_tbl+65875, const_tbl+138227)
MAKE_LITERAL_PAIR(const_tbl+65858, const_tbl+138244)
MAKE_LITERAL_PAIR(const_tbl+65841, const_tbl+138261)
MAKE_LITERAL_PAIR(const_tbl+65824, const_tbl+138278)
MAKE_LITERAL_PAIR(const_tbl+65807, const_tbl+138295)
MAKE_LITERAL_PAIR(const_tbl+65790, const_tbl+138312)
MAKE_LITERAL_PAIR(const_tbl+65773, const_tbl+138329)
MAKE_LITERAL_PAIR(const_tbl+65756, const_tbl+138346)
MAKE_LITERAL_PAIR(const_tbl+65739, const_tbl+138363)
MAKE_LITERAL_PAIR(const_tbl+65722, const_tbl+138380)
MAKE_LITERAL_PAIR(const_tbl+65705, const_tbl+138397)
MAKE_LITERAL_PAIR(const_tbl+65688, const_tbl+138414)
MAKE_LITERAL_PAIR(const_tbl+65671, const_tbl+138431)
MAKE_LITERAL_PAIR(const_tbl+65654, const_tbl+138448)
MAKE_LITERAL_PAIR(const_tbl+65637, const_tbl+138465)
MAKE_LITERAL_PAIR(const_tbl+65620, const_tbl+138482)
MAKE_LITERAL_PAIR(const_tbl+65603, const_tbl+138499)
MAKE_LITERAL_PAIR(const_tbl+65586, const_tbl+138516)
MAKE_LITERAL_PAIR(const_tbl+65569, const_tbl+138533)
MAKE_LITERAL_PAIR(const_tbl+65552, const_tbl+138550)
MAKE_LITERAL_PAIR(const_tbl+65535, const_tbl+138567)
MAKE_LITERAL_PAIR(const_tbl+65518, const_tbl+138584)
MAKE_LITERAL_PAIR(const_tbl+65501, const_tbl+138601)
MAKE_LITERAL_PAIR(const_tbl+65484, const_tbl+138618)
MAKE_LITERAL_PAIR(const_tbl+65467, const_tbl+138635)
MAKE_LITERAL_PAIR(const_tbl+65450, const_tbl+138652)
MAKE_LITERAL_PAIR(const_tbl+65433, const_tbl+138669)
MAKE_LITERAL_PAIR(const_tbl+65416, const_tbl+138686)
MAKE_LITERAL_PAIR(const_tbl+65399, const_tbl+138703)
MAKE_LITERAL_PAIR(const_tbl+65382, const_tbl+138720)
MAKE_LITERAL_PAIR(const_tbl+65365, const_tbl+138737)
MAKE_LITERAL_PAIR(const_tbl+65348, const_tbl+138754)
MAKE_LITERAL_PAIR(const_tbl+65331, const_tbl+138771)
MAKE_LITERAL_PAIR(const_tbl+65314, const_tbl+138788)
MAKE_LITERAL_PAIR(const_tbl+65297, const_tbl+138805)
MAKE_LITERAL_PAIR(const_tbl+65280, const_tbl+138822)
MAKE_LITERAL_PAIR(const_tbl+65263, const_tbl+138839)
MAKE_LITERAL_PAIR(const_tbl+65246, const_tbl+138856)
MAKE_LITERAL_PAIR(const_tbl+65229, const_tbl+138873)
MAKE_LITERAL_PAIR(const_tbl+65212, const_tbl+138890)
MAKE_LITERAL_PAIR(const_tbl+65195, const_tbl+138907)
MAKE_LITERAL_PAIR(const_tbl+65178, const_tbl+138924)
MAKE_LITERAL_PAIR(const_tbl+65161, const_tbl+138941)
MAKE_LITERAL_PAIR(const_tbl+65144, const_tbl+138958)
MAKE_LITERAL_PAIR(const_tbl+65127, const_tbl+138975)
MAKE_LITERAL_PAIR(const_tbl+65110, const_tbl+138992)
MAKE_LITERAL_PAIR(const_tbl+65093, const_tbl+139009)
MAKE_LITERAL_PAIR(const_tbl+65076, const_tbl+139026)
MAKE_LITERAL_PAIR(const_tbl+65059, const_tbl+139043)
MAKE_LITERAL_PAIR(const_tbl+65042, const_tbl+139060)
MAKE_LITERAL_PAIR(const_tbl+65025, const_tbl+139077)
MAKE_LITERAL_PAIR(const_tbl+65008, const_tbl+139094)
MAKE_LITERAL_PAIR(const_tbl+64991, const_tbl+139111)
MAKE_LITERAL_PAIR(const_tbl+64974, const_tbl+139128)
MAKE_LITERAL_PAIR(const_tbl+64957, const_tbl+139145)
MAKE_LITERAL_PAIR(const_tbl+64940, const_tbl+139162)
MAKE_LITERAL_PAIR(const_tbl+64923, const_tbl+139179)
MAKE_LITERAL_PAIR(const_tbl+64906, const_tbl+139196)
MAKE_LITERAL_PAIR(const_tbl+64889, const_tbl+139213)
MAKE_LITERAL_PAIR(const_tbl+64872, const_tbl+139230)
MAKE_LITERAL_PAIR(const_tbl+64855, const_tbl+139247)
MAKE_LITERAL_PAIR(const_tbl+64838, const_tbl+139264)
MAKE_LITERAL_PAIR(const_tbl+64821, const_tbl+139281)
MAKE_LITERAL_PAIR(const_tbl+64804, const_tbl+139298)
MAKE_LITERAL_PAIR(const_tbl+64787, const_tbl+139315)
MAKE_LITERAL_PAIR(const_tbl+64770, const_tbl+139332)
MAKE_LITERAL_PAIR(const_tbl+64753, const_tbl+139349)
MAKE_LITERAL_PAIR(const_tbl+64736, const_tbl+139366)
MAKE_LITERAL_PAIR(const_tbl+64719, const_tbl+139383)
MAKE_LITERAL_PAIR(const_tbl+64702, const_tbl+139400)
MAKE_LITERAL_PAIR(const_tbl+64685, const_tbl+139417)
MAKE_LITERAL_PAIR(const_tbl+64668, const_tbl+139434)
MAKE_LITERAL_PAIR(const_tbl+64651, const_tbl+139451)
MAKE_LITERAL_PAIR(const_tbl+64634, const_tbl+139468)
MAKE_LITERAL_PAIR(const_tbl+64617, const_tbl+139485)
MAKE_LITERAL_PAIR(const_tbl+64600, const_tbl+139502)
MAKE_LITERAL_PAIR(const_tbl+64583, const_tbl+139519)
MAKE_LITERAL_PAIR(const_tbl+64566, const_tbl+139536)
MAKE_LITERAL_PAIR(const_tbl+64549, const_tbl+139553)
MAKE_LITERAL_PAIR(const_tbl+64532, const_tbl+139570)
MAKE_LITERAL_PAIR(const_tbl+64515, const_tbl+139587)
MAKE_LITERAL_PAIR(const_tbl+64498, const_tbl+139604)
MAKE_LITERAL_PAIR(const_tbl+64481, const_tbl+139621)
MAKE_LITERAL_PAIR(const_tbl+64464, const_tbl+139638)
MAKE_LITERAL_PAIR(const_tbl+64447, const_tbl+139655)
MAKE_LITERAL_PAIR(const_tbl+64430, const_tbl+139672)
MAKE_LITERAL_PAIR(const_tbl+64413, const_tbl+139689)
MAKE_LITERAL_PAIR(const_tbl+64396, const_tbl+139706)
MAKE_LITERAL_PAIR(const_tbl+64379, const_tbl+139723)
MAKE_LITERAL_PAIR(const_tbl+64362, const_tbl+139740)
MAKE_LITERAL_PAIR(const_tbl+64345, const_tbl+139757)
MAKE_LITERAL_PAIR(const_tbl+64328, const_tbl+139774)
MAKE_LITERAL_PAIR(const_tbl+64311, const_tbl+139791)
MAKE_LITERAL_PAIR(const_tbl+64294, const_tbl+139808)
MAKE_LITERAL_PAIR(const_tbl+64277, const_tbl+139825)
MAKE_LITERAL_PAIR(const_tbl+64260, const_tbl+139842)
MAKE_LITERAL_PAIR(const_tbl+64243, const_tbl+139859)
MAKE_LITERAL_PAIR(const_tbl+64226, const_tbl+139876)
MAKE_LITERAL_PAIR(const_tbl+64209, const_tbl+139893)
MAKE_LITERAL_PAIR(const_tbl+64192, const_tbl+139910)
MAKE_LITERAL_PAIR(const_tbl+64175, const_tbl+139927)
MAKE_LITERAL_PAIR(const_tbl+64158, const_tbl+139944)
MAKE_LITERAL_PAIR(const_tbl+64141, const_tbl+139961)
MAKE_LITERAL_PAIR(const_tbl+64124, const_tbl+139978)
MAKE_LITERAL_PAIR(const_tbl+64107, const_tbl+139995)
MAKE_LITERAL_PAIR(const_tbl+64090, const_tbl+140012)
MAKE_LITERAL_PAIR(const_tbl+64073, const_tbl+140029)
MAKE_LITERAL_PAIR(const_tbl+64056, const_tbl+140046)
MAKE_LITERAL_PAIR(const_tbl+64039, const_tbl+140063)
MAKE_LITERAL_PAIR(const_tbl+64022, const_tbl+140080)
MAKE_LITERAL_PAIR(const_tbl+64005, const_tbl+140097)
MAKE_LITERAL_PAIR(const_tbl+63988, const_tbl+140114)
MAKE_LITERAL_PAIR(const_tbl+63971, const_tbl+140131)
MAKE_LITERAL_PAIR(const_tbl+63954, const_tbl+140148)
MAKE_LITERAL_PAIR(const_tbl+63937, const_tbl+140165)
MAKE_LITERAL_PAIR(const_tbl+63920, const_tbl+140182)
MAKE_LITERAL_PAIR(const_tbl+63903, const_tbl+140199)
MAKE_LITERAL_PAIR(const_tbl+63886, const_tbl+140216)
MAKE_LITERAL_PAIR(const_tbl+63869, const_tbl+140233)
MAKE_LITERAL_PAIR(const_tbl+63852, const_tbl+140250)
MAKE_LITERAL_PAIR(const_tbl+63835, const_tbl+140267)
MAKE_LITERAL_PAIR(const_tbl+63818, const_tbl+140284)
MAKE_LITERAL_PAIR(const_tbl+63801, const_tbl+140301)
MAKE_LITERAL_PAIR(const_tbl+63784, const_tbl+140318)
MAKE_LITERAL_PAIR(const_tbl+63767, const_tbl+140335)
MAKE_LITERAL_PAIR(const_tbl+63750, const_tbl+140352)
MAKE_LITERAL_PAIR(const_tbl+63733, const_tbl+140369)
MAKE_LITERAL_PAIR(const_tbl+63716, const_tbl+140386)
MAKE_LITERAL_PAIR(const_tbl+63699, const_tbl+140403)
MAKE_LITERAL_PAIR(const_tbl+63682, const_tbl+140420)
MAKE_LITERAL_PAIR(const_tbl+63665, const_tbl+140437)
MAKE_LITERAL_PAIR(const_tbl+63648, const_tbl+140454)
MAKE_LITERAL_PAIR(const_tbl+63631, const_tbl+140471)
MAKE_LITERAL_PAIR(const_tbl+63614, const_tbl+140488)
MAKE_LITERAL_PAIR(const_tbl+63597, const_tbl+140505)
MAKE_LITERAL_PAIR(const_tbl+63580, const_tbl+140522)
MAKE_LITERAL_PAIR(const_tbl+63563, const_tbl+140539)
MAKE_LITERAL_PAIR(const_tbl+63546, const_tbl+140556)
MAKE_LITERAL_PAIR(const_tbl+63529, const_tbl+140573)
MAKE_LITERAL_PAIR(const_tbl+63512, const_tbl+140590)
MAKE_LITERAL_PAIR(const_tbl+63495, const_tbl+140607)
MAKE_LITERAL_PAIR(const_tbl+63478, const_tbl+140624)
MAKE_LITERAL_PAIR(const_tbl+63461, const_tbl+140641)
MAKE_LITERAL_PAIR(const_tbl+63444, const_tbl+140658)
MAKE_LITERAL_PAIR(const_tbl+63427, const_tbl+140675)
MAKE_LITERAL_PAIR(const_tbl+63410, const_tbl+140692)
MAKE_LITERAL_PAIR(const_tbl+63393, const_tbl+140709)
MAKE_LITERAL_PAIR(const_tbl+63376, const_tbl+140726)
MAKE_LITERAL_PAIR(const_tbl+63359, const_tbl+140743)
MAKE_LITERAL_PAIR(const_tbl+63342, const_tbl+140760)
MAKE_LITERAL_PAIR(const_tbl+63325, const_tbl+140777)
MAKE_LITERAL_PAIR(const_tbl+63308, const_tbl+140794)
MAKE_LITERAL_PAIR(const_tbl+63291, const_tbl+140811)
MAKE_LITERAL_PAIR(const_tbl+63274, const_tbl+140828)
MAKE_LITERAL_PAIR(const_tbl+63257, const_tbl+140845)
MAKE_LITERAL_PAIR(const_tbl+63240, const_tbl+140862)
MAKE_LITERAL_PAIR(const_tbl+63223, const_tbl+140879)
MAKE_LITERAL_PAIR(const_tbl+63206, const_tbl+140896)
MAKE_LITERAL_PAIR(const_tbl+63189, const_tbl+140913)
MAKE_LITERAL_PAIR(const_tbl+63172, const_tbl+140930)
MAKE_LITERAL_PAIR(const_tbl+63155, const_tbl+140947)
MAKE_LITERAL_PAIR(const_tbl+63138, const_tbl+140964)
MAKE_LITERAL_PAIR(const_tbl+63121, const_tbl+140981)
MAKE_LITERAL_PAIR(const_tbl+63104, const_tbl+140998)
MAKE_LITERAL_PAIR(const_tbl+63087, const_tbl+141015)
MAKE_LITERAL_PAIR(const_tbl+63070, const_tbl+141032)
MAKE_LITERAL_PAIR(const_tbl+63053, const_tbl+141049)
MAKE_LITERAL_PAIR(const_tbl+63036, const_tbl+141066)
MAKE_LITERAL_PAIR(const_tbl+63019, const_tbl+141083)
MAKE_LITERAL_PAIR(const_tbl+63002, const_tbl+141100)
MAKE_LITERAL_PAIR(const_tbl+62985, const_tbl+141117)
MAKE_LITERAL_PAIR(const_tbl+62968, const_tbl+141134)
MAKE_LITERAL_PAIR(const_tbl+62951, const_tbl+141151)
MAKE_LITERAL_PAIR(const_tbl+62934, const_tbl+141168)
MAKE_LITERAL_PAIR(const_tbl+62917, const_tbl+141185)
MAKE_LITERAL_PAIR(const_tbl+62900, const_tbl+141202)
MAKE_LITERAL_PAIR(const_tbl+62883, const_tbl+141219)
MAKE_LITERAL_PAIR(const_tbl+62866, const_tbl+141236)
MAKE_LITERAL_PAIR(const_tbl+62849, const_tbl+141253)
MAKE_LITERAL_PAIR(const_tbl+62832, const_tbl+141270)
MAKE_LITERAL_PAIR(const_tbl+62815, const_tbl+141287)
MAKE_LITERAL_PAIR(const_tbl+62798, const_tbl+141304)
MAKE_LITERAL_PAIR(const_tbl+62781, const_tbl+141321)
MAKE_LITERAL_PAIR(const_tbl+62764, const_tbl+141338)
MAKE_LITERAL_PAIR(const_tbl+62747, const_tbl+141355)
MAKE_LITERAL_PAIR(const_tbl+62730, const_tbl+141372)
MAKE_LITERAL_PAIR(const_tbl+62713, const_tbl+141389)
MAKE_LITERAL_PAIR(const_tbl+62696, const_tbl+141406)
MAKE_LITERAL_PAIR(const_tbl+62679, const_tbl+141423)
MAKE_LITERAL_PAIR(const_tbl+62662, const_tbl+141440)
MAKE_LITERAL_PAIR(const_tbl+62645, const_tbl+141457)
MAKE_LITERAL_PAIR(const_tbl+62628, const_tbl+141474)
MAKE_LITERAL_PAIR(const_tbl+62611, const_tbl+141491)
MAKE_LITERAL_PAIR(const_tbl+62594, const_tbl+141508)
MAKE_LITERAL_PAIR(const_tbl+62577, const_tbl+141525)
MAKE_LITERAL_PAIR(const_tbl+62560, const_tbl+141542)
MAKE_LITERAL_PAIR(const_tbl+62543, const_tbl+141559)
MAKE_LITERAL_PAIR(const_tbl+62526, const_tbl+141576)
MAKE_LITERAL_PAIR(const_tbl+62509, const_tbl+141593)
MAKE_LITERAL_PAIR(const_tbl+62492, const_tbl+141610)
MAKE_LITERAL_PAIR(const_tbl+62475, const_tbl+141627)
MAKE_LITERAL_PAIR(const_tbl+62458, const_tbl+141644)
MAKE_LITERAL_PAIR(const_tbl+62441, const_tbl+141661)
MAKE_LITERAL_PAIR(const_tbl+62424, const_tbl+141678)
MAKE_LITERAL_PAIR(const_tbl+62407, const_tbl+141695)
MAKE_LITERAL_PAIR(const_tbl+62390, const_tbl+141712)
MAKE_LITERAL_PAIR(const_tbl+62373, const_tbl+141729)
MAKE_LITERAL_PAIR(const_tbl+62356, const_tbl+141746)
MAKE_LITERAL_PAIR(const_tbl+62339, const_tbl+141763)
MAKE_LITERAL_PAIR(const_tbl+62322, const_tbl+141780)
MAKE_LITERAL_PAIR(const_tbl+62305, const_tbl+141797)
MAKE_LITERAL_PAIR(const_tbl+62288, const_tbl+141814)
MAKE_LITERAL_PAIR(const_tbl+62271, const_tbl+141831)
MAKE_LITERAL_PAIR(const_tbl+62254, const_tbl+141848)
MAKE_LITERAL_PAIR(const_tbl+62237, const_tbl+141865)
MAKE_LITERAL_PAIR(const_tbl+62220, const_tbl+141882)
MAKE_LITERAL_PAIR(const_tbl+62203, const_tbl+141899)
MAKE_LITERAL_PAIR(const_tbl+62186, const_tbl+141916)
MAKE_LITERAL_PAIR(const_tbl+62169, const_tbl+141933)
MAKE_LITERAL_PAIR(const_tbl+62152, const_tbl+141950)
MAKE_LITERAL_PAIR(const_tbl+62135, const_tbl+141967)
MAKE_LITERAL_PAIR(const_tbl+62118, const_tbl+141984)
MAKE_LITERAL_PAIR(const_tbl+62101, const_tbl+142001)
MAKE_LITERAL_PAIR(const_tbl+62084, const_tbl+142018)
MAKE_LITERAL_PAIR(const_tbl+62067, const_tbl+142035)
MAKE_LITERAL_PAIR(const_tbl+62050, const_tbl+142052)
MAKE_LITERAL_PAIR(const_tbl+62033, const_tbl+142069)
MAKE_LITERAL_PAIR(const_tbl+62016, const_tbl+142086)
MAKE_LITERAL_PAIR(const_tbl+61999, const_tbl+142103)
MAKE_LITERAL_PAIR(const_tbl+61982, const_tbl+142120)
MAKE_LITERAL_PAIR(const_tbl+61965, const_tbl+142137)
MAKE_LITERAL_PAIR(const_tbl+61948, const_tbl+142154)
MAKE_LITERAL_PAIR(const_tbl+61931, const_tbl+142171)
MAKE_LITERAL_PAIR(const_tbl+61914, const_tbl+142188)
MAKE_LITERAL_PAIR(const_tbl+61897, const_tbl+142205)
MAKE_LITERAL_PAIR(const_tbl+61880, const_tbl+142222)
MAKE_LITERAL_PAIR(const_tbl+61863, const_tbl+142239)
MAKE_LITERAL_PAIR(const_tbl+61846, const_tbl+142256)
MAKE_LITERAL_PAIR(const_tbl+61829, const_tbl+142273)
MAKE_LITERAL_PAIR(const_tbl+61812, const_tbl+142290)
MAKE_LITERAL_PAIR(const_tbl+61795, const_tbl+142307)
MAKE_LITERAL_PAIR(const_tbl+61778, const_tbl+142324)
MAKE_LITERAL_PAIR(const_tbl+61761, const_tbl+142341)
MAKE_LITERAL_PAIR(const_tbl+61744, const_tbl+142358)
MAKE_LITERAL_PAIR(const_tbl+61727, const_tbl+142375)
MAKE_LITERAL_PAIR(const_tbl+61710, const_tbl+142392)
MAKE_LITERAL_PAIR(const_tbl+61693, const_tbl+142409)
MAKE_LITERAL_PAIR(const_tbl+61676, const_tbl+142426)
MAKE_LITERAL_PAIR(const_tbl+61659, const_tbl+142443)
MAKE_LITERAL_PAIR(const_tbl+61642, const_tbl+142460)
MAKE_LITERAL_PAIR(const_tbl+61625, const_tbl+142477)
MAKE_LITERAL_PAIR(const_tbl+61608, const_tbl+142494)
MAKE_LITERAL_PAIR(const_tbl+61591, const_tbl+142511)
MAKE_LITERAL_PAIR(const_tbl+61574, const_tbl+142528)
MAKE_LITERAL_PAIR(const_tbl+61557, const_tbl+142545)
MAKE_LITERAL_PAIR(const_tbl+61540, const_tbl+142562)
MAKE_LITERAL_PAIR(const_tbl+61523, const_tbl+142579)
MAKE_LITERAL_PAIR(const_tbl+61506, const_tbl+142596)
MAKE_LITERAL_PAIR(const_tbl+61489, const_tbl+142613)
MAKE_LITERAL_PAIR(const_tbl+61472, const_tbl+142630)
MAKE_LITERAL_PAIR(const_tbl+61455, const_tbl+142647)
MAKE_LITERAL_PAIR(const_tbl+61438, const_tbl+142664)
MAKE_LITERAL_PAIR(const_tbl+61421, const_tbl+142681)
MAKE_LITERAL_PAIR(const_tbl+61404, const_tbl+142698)
MAKE_LITERAL_PAIR(const_tbl+61387, const_tbl+142715)
MAKE_LITERAL_PAIR(const_tbl+61370, const_tbl+142732)
MAKE_LITERAL_PAIR(const_tbl+61353, const_tbl+142749)
MAKE_LITERAL_PAIR(const_tbl+61336, const_tbl+142766)
MAKE_LITERAL_PAIR(const_tbl+61319, const_tbl+142783)
MAKE_LITERAL_PAIR(const_tbl+61302, const_tbl+142800)
MAKE_LITERAL_PAIR(const_tbl+61285, const_tbl+142817)
MAKE_LITERAL_PAIR(const_tbl+61268, const_tbl+142834)
MAKE_LITERAL_PAIR(const_tbl+61251, const_tbl+142851)
MAKE_LITERAL_PAIR(const_tbl+61234, const_tbl+142868)
MAKE_LITERAL_PAIR(const_tbl+61217, const_tbl+142885)
MAKE_LITERAL_PAIR(const_tbl+61200, const_tbl+142902)
MAKE_LITERAL_PAIR(const_tbl+61183, const_tbl+142919)
MAKE_LITERAL_PAIR(const_tbl+61166, const_tbl+142936)
MAKE_LITERAL_PAIR(const_tbl+61149, const_tbl+142953)
MAKE_LITERAL_PAIR(const_tbl+61132, const_tbl+142970)
MAKE_LITERAL_PAIR(const_tbl+61115, const_tbl+142987)
MAKE_LITERAL_PAIR(const_tbl+61098, const_tbl+143004)
MAKE_LITERAL_PAIR(const_tbl+61081, const_tbl+143021)
MAKE_LITERAL_PAIR(const_tbl+61064, const_tbl+143038)
MAKE_LITERAL_PAIR(const_tbl+61047, const_tbl+143055)
MAKE_LITERAL_PAIR(const_tbl+61030, const_tbl+143072)
MAKE_LITERAL_PAIR(const_tbl+61013, const_tbl+143089)
MAKE_LITERAL_PAIR(const_tbl+60996, const_tbl+143106)
MAKE_LITERAL_PAIR(const_tbl+60979, const_tbl+143123)
MAKE_LITERAL_PAIR(const_tbl+60962, const_tbl+143140)
MAKE_LITERAL_PAIR(const_tbl+60945, const_tbl+143157)
MAKE_LITERAL_PAIR(const_tbl+60928, const_tbl+143174)
MAKE_LITERAL_PAIR(const_tbl+60911, const_tbl+143191)
MAKE_LITERAL_PAIR(const_tbl+60894, const_tbl+143208)
MAKE_LITERAL_PAIR(const_tbl+60877, const_tbl+143225)
MAKE_LITERAL_PAIR(const_tbl+60860, const_tbl+143242)
MAKE_LITERAL_PAIR(const_tbl+60843, const_tbl+143259)
MAKE_LITERAL_PAIR(const_tbl+60826, const_tbl+143276)
MAKE_LITERAL_PAIR(const_tbl+60809, const_tbl+143293)
MAKE_LITERAL_PAIR(const_tbl+60792, const_tbl+143310)
MAKE_LITERAL_PAIR(const_tbl+60775, const_tbl+143327)
MAKE_LITERAL_PAIR(const_tbl+60758, const_tbl+143344)
MAKE_LITERAL_PAIR(const_tbl+60741, const_tbl+143361)
MAKE_LITERAL_PAIR(const_tbl+60724, const_tbl+143378)
MAKE_LITERAL_PAIR(const_tbl+60707, const_tbl+143395)
MAKE_LITERAL_PAIR(const_tbl+60690, const_tbl+143412)
MAKE_LITERAL_PAIR(const_tbl+60673, const_tbl+143429)
MAKE_LITERAL_PAIR(const_tbl+60656, const_tbl+143446)
MAKE_LITERAL_PAIR(const_tbl+60639, const_tbl+143463)
MAKE_LITERAL_PAIR(const_tbl+60622, const_tbl+143480)
MAKE_LITERAL_PAIR(const_tbl+60605, const_tbl+143497)
MAKE_LITERAL_PAIR(const_tbl+60588, const_tbl+143514)
MAKE_LITERAL_PAIR(const_tbl+60571, const_tbl+143531)
MAKE_LITERAL_PAIR(const_tbl+60554, const_tbl+143548)
MAKE_LITERAL_PAIR(const_tbl+60537, const_tbl+143565)
MAKE_LITERAL_PAIR(const_tbl+60520, const_tbl+143582)
MAKE_LITERAL_PAIR(const_tbl+60503, const_tbl+143599)
MAKE_LITERAL_PAIR(const_tbl+60486, const_tbl+143616)
MAKE_LITERAL_PAIR(const_tbl+60469, const_tbl+143633)
MAKE_LITERAL_PAIR(const_tbl+60452, const_tbl+143650)
MAKE_LITERAL_PAIR(const_tbl+60435, const_tbl+143667)
MAKE_LITERAL_PAIR(const_tbl+60418, const_tbl+143684)
MAKE_LITERAL_PAIR(const_tbl+60401, const_tbl+143701)
MAKE_LITERAL_PAIR(const_tbl+60384, const_tbl+143718)
MAKE_LITERAL_PAIR(const_tbl+60367, const_tbl+143735)
MAKE_LITERAL_PAIR(const_tbl+60350, const_tbl+143752)
MAKE_LITERAL_PAIR(const_tbl+60333, const_tbl+143769)
MAKE_LITERAL_PAIR(const_tbl+60316, const_tbl+143786)
MAKE_LITERAL_PAIR(const_tbl+60299, const_tbl+143803)
MAKE_LITERAL_PAIR(const_tbl+60282, const_tbl+143820)
MAKE_LITERAL_PAIR(const_tbl+60265, const_tbl+143837)
MAKE_LITERAL_PAIR(const_tbl+60248, const_tbl+143854)
MAKE_LITERAL_PAIR(const_tbl+60231, const_tbl+143871)
MAKE_LITERAL_PAIR(const_tbl+60214, const_tbl+143888)
MAKE_LITERAL_PAIR(const_tbl+60197, const_tbl+143905)
MAKE_LITERAL_PAIR(const_tbl+60180, const_tbl+143922)
MAKE_LITERAL_PAIR(const_tbl+60163, const_tbl+143939)
MAKE_LITERAL_PAIR(const_tbl+60146, const_tbl+143956)
MAKE_LITERAL_PAIR(const_tbl+60129, const_tbl+143973)
MAKE_LITERAL_PAIR(const_tbl+60112, const_tbl+143990)
MAKE_LITERAL_PAIR(const_tbl+60095, const_tbl+144007)
MAKE_LITERAL_PAIR(const_tbl+60078, const_tbl+144024)
MAKE_LITERAL_PAIR(const_tbl+60061, const_tbl+144041)
MAKE_LITERAL_PAIR(const_tbl+60044, const_tbl+144058)
MAKE_LITERAL_PAIR(const_tbl+60027, const_tbl+144075)
MAKE_LITERAL_PAIR(const_tbl+60010, const_tbl+144092)
MAKE_LITERAL_PAIR(const_tbl+59993, const_tbl+144109)
MAKE_LITERAL_PAIR(const_tbl+59976, const_tbl+144126)
MAKE_LITERAL_PAIR(const_tbl+59959, const_tbl+144143)
MAKE_LITERAL_PAIR(const_tbl+59942, const_tbl+144160)
MAKE_LITERAL_PAIR(const_tbl+59925, const_tbl+144177)
MAKE_LITERAL_PAIR(const_tbl+59908, const_tbl+144194)
MAKE_LITERAL_PAIR(const_tbl+59891, const_tbl+144211)
MAKE_LITERAL_PAIR(const_tbl+59874, const_tbl+144228)
MAKE_LITERAL_PAIR(const_tbl+59857, const_tbl+144245)
MAKE_LITERAL_PAIR(const_tbl+59840, const_tbl+144262)
MAKE_LITERAL_PAIR(const_tbl+59823, const_tbl+144279)
MAKE_LITERAL_PAIR(const_tbl+59806, const_tbl+144296)
MAKE_LITERAL_PAIR(const_tbl+59789, const_tbl+144313)
MAKE_LITERAL_PAIR(const_tbl+59772, const_tbl+144330)
MAKE_LITERAL_PAIR(const_tbl+59755, const_tbl+144347)
MAKE_LITERAL_PAIR(const_tbl+59738, const_tbl+144364)
MAKE_LITERAL_PAIR(const_tbl+59721, const_tbl+144381)
MAKE_LITERAL_PAIR(const_tbl+59704, const_tbl+144398)
MAKE_LITERAL_PAIR(const_tbl+59687, const_tbl+144415)
MAKE_LITERAL_PAIR(const_tbl+59670, const_tbl+144432)
MAKE_LITERAL_PAIR(const_tbl+59653, const_tbl+144449)
MAKE_LITERAL_PAIR(const_tbl+59636, const_tbl+144466)
MAKE_LITERAL_PAIR(const_tbl+59619, const_tbl+144483)
MAKE_LITERAL_PAIR(const_tbl+59602, const_tbl+144500)
MAKE_LITERAL_PAIR(const_tbl+59585, const_tbl+144517)
MAKE_LITERAL_PAIR(const_tbl+59568, const_tbl+144534)
MAKE_LITERAL_PAIR(const_tbl+59551, const_tbl+144551)
MAKE_LITERAL_PAIR(const_tbl+59534, const_tbl+144568)
MAKE_LITERAL_PAIR(const_tbl+59517, const_tbl+144585)
MAKE_LITERAL_PAIR(const_tbl+59500, const_tbl+144602)
MAKE_LITERAL_PAIR(const_tbl+59483, const_tbl+144619)
MAKE_LITERAL_PAIR(const_tbl+59466, const_tbl+144636)
MAKE_LITERAL_PAIR(const_tbl+59449, const_tbl+144653)
MAKE_LITERAL_PAIR(const_tbl+59432, const_tbl+144670)
MAKE_LITERAL_PAIR(const_tbl+59415, const_tbl+144687)
MAKE_LITERAL_PAIR(const_tbl+59398, const_tbl+144704)
MAKE_LITERAL_PAIR(const_tbl+59381, const_tbl+144721)
MAKE_LITERAL_PAIR(const_tbl+59364, const_tbl+144738)
MAKE_LITERAL_PAIR(const_tbl+59347, const_tbl+144755)
MAKE_LITERAL_PAIR(const_tbl+59330, const_tbl+144772)
MAKE_LITERAL_PAIR(const_tbl+59313, const_tbl+144789)
MAKE_LITERAL_PAIR(const_tbl+59296, const_tbl+144806)
MAKE_LITERAL_PAIR(const_tbl+59279, const_tbl+144823)
MAKE_LITERAL_PAIR(const_tbl+59262, const_tbl+144840)
MAKE_LITERAL_PAIR(const_tbl+59245, const_tbl+144857)
MAKE_LITERAL_PAIR(const_tbl+59228, const_tbl+144874)
MAKE_LITERAL_PAIR(const_tbl+59211, const_tbl+144891)
MAKE_LITERAL_PAIR(const_tbl+59194, const_tbl+144908)
MAKE_LITERAL_PAIR(const_tbl+59177, const_tbl+144925)
MAKE_LITERAL_PAIR(const_tbl+59160, const_tbl+144942)
MAKE_LITERAL_PAIR(const_tbl+59143, const_tbl+144959)
MAKE_LITERAL_PAIR(const_tbl+59126, const_tbl+144976)
MAKE_LITERAL_PAIR(const_tbl+59109, const_tbl+144993)
MAKE_LITERAL_PAIR(const_tbl+59092, const_tbl+145010)
MAKE_LITERAL_PAIR(const_tbl+59075, const_tbl+145027)
MAKE_LITERAL_PAIR(const_tbl+59058, const_tbl+145044)
MAKE_LITERAL_PAIR(const_tbl+59041, const_tbl+145061)
MAKE_LITERAL_PAIR(const_tbl+59024, const_tbl+145078)
MAKE_LITERAL_PAIR(const_tbl+59007, const_tbl+145095)
MAKE_LITERAL_PAIR(const_tbl+58990, const_tbl+145112)
MAKE_LITERAL_PAIR(const_tbl+58973, const_tbl+145129)
MAKE_LITERAL_PAIR(const_tbl+58956, const_tbl+145146)
MAKE_LITERAL_PAIR(const_tbl+58939, const_tbl+145163)
MAKE_LITERAL_PAIR(const_tbl+58922, const_tbl+145180)
MAKE_LITERAL_PAIR(const_tbl+58905, const_tbl+145197)
MAKE_LITERAL_PAIR(const_tbl+58888, const_tbl+145214)
MAKE_LITERAL_PAIR(const_tbl+58871, const_tbl+145231)
MAKE_LITERAL_PAIR(const_tbl+58854, const_tbl+145248)
MAKE_LITERAL_PAIR(const_tbl+58837, const_tbl+145265)
MAKE_LITERAL_PAIR(const_tbl+58820, const_tbl+145282)
MAKE_LITERAL_PAIR(const_tbl+58803, const_tbl+145299)
MAKE_LITERAL_PAIR(const_tbl+58786, const_tbl+145316)
MAKE_LITERAL_PAIR(const_tbl+58769, const_tbl+145333)
MAKE_LITERAL_PAIR(const_tbl+58752, const_tbl+145350)
MAKE_LITERAL_PAIR(const_tbl+58735, const_tbl+145367)
MAKE_LITERAL_PAIR(const_tbl+58718, const_tbl+145384)
MAKE_LITERAL_PAIR(const_tbl+58701, const_tbl+145401)
MAKE_LITERAL_PAIR(const_tbl+58684, const_tbl+145418)
MAKE_LITERAL_PAIR(const_tbl+58667, const_tbl+145435)
MAKE_LITERAL_PAIR(const_tbl+58650, const_tbl+145452)
MAKE_LITERAL_PAIR(const_tbl+58633, const_tbl+145469)
MAKE_LITERAL_PAIR(const_tbl+58616, const_tbl+145486)
MAKE_LITERAL_PAIR(const_tbl+58599, const_tbl+145503)
MAKE_LITERAL_PAIR(const_tbl+58582, const_tbl+145520)
MAKE_LITERAL_PAIR(const_tbl+58565, const_tbl+145537)
MAKE_LITERAL_PAIR(const_tbl+58548, const_tbl+145554)
MAKE_LITERAL_PAIR(const_tbl+58531, const_tbl+145571)
MAKE_LITERAL_PAIR(const_tbl+58514, const_tbl+145588)
MAKE_LITERAL_PAIR(const_tbl+58497, const_tbl+145605)
MAKE_LITERAL_PAIR(const_tbl+58480, const_tbl+145622)
MAKE_LITERAL_PAIR(const_tbl+58463, const_tbl+145639)
MAKE_LITERAL_PAIR(const_tbl+58446, const_tbl+145656)
MAKE_LITERAL_PAIR(const_tbl+58429, const_tbl+145673)
MAKE_LITERAL_PAIR(const_tbl+58412, const_tbl+145690)
MAKE_LITERAL_PAIR(const_tbl+58395, const_tbl+145707)
MAKE_LITERAL_PAIR(const_tbl+58378, const_tbl+145724)
MAKE_LITERAL_PAIR(const_tbl+58361, const_tbl+145741)
MAKE_LITERAL_PAIR(const_tbl+58344, const_tbl+145758)
MAKE_LITERAL_PAIR(const_tbl+58327, const_tbl+145775)
MAKE_LITERAL_PAIR(const_tbl+58310, const_tbl+145792)
MAKE_LITERAL_PAIR(const_tbl+58293, const_tbl+145809)
MAKE_LITERAL_PAIR(const_tbl+58276, const_tbl+145826)
MAKE_LITERAL_PAIR(const_tbl+58259, const_tbl+145843)
MAKE_LITERAL_PAIR(const_tbl+58242, const_tbl+145860)
MAKE_LITERAL_PAIR(const_tbl+58225, const_tbl+145877)
MAKE_LITERAL_PAIR(const_tbl+58208, const_tbl+145894)
MAKE_LITERAL_PAIR(const_tbl+58191, const_tbl+145911)
MAKE_LITERAL_PAIR(const_tbl+58174, const_tbl+145928)
MAKE_LITERAL_PAIR(const_tbl+58157, const_tbl+145945)
MAKE_LITERAL_PAIR(const_tbl+58140, const_tbl+145962)
MAKE_LITERAL_PAIR(const_tbl+58123, const_tbl+145979)
MAKE_LITERAL_PAIR(const_tbl+58106, const_tbl+145996)
MAKE_LITERAL_PAIR(const_tbl+58089, const_tbl+146013)
MAKE_LITERAL_PAIR(const_tbl+58072, const_tbl+146030)
MAKE_LITERAL_PAIR(const_tbl+58055, const_tbl+146047)
MAKE_LITERAL_PAIR(const_tbl+58038, const_tbl+146064)
MAKE_LITERAL_PAIR(const_tbl+58021, const_tbl+146081)
MAKE_LITERAL_PAIR(const_tbl+58004, const_tbl+146098)
MAKE_LITERAL_PAIR(const_tbl+57987, const_tbl+146115)
MAKE_LITERAL_PAIR(const_tbl+57970, const_tbl+146132)
MAKE_LITERAL_PAIR(const_tbl+57953, const_tbl+146149)
MAKE_LITERAL_PAIR(const_tbl+57936, const_tbl+146166)
MAKE_LITERAL_PAIR(const_tbl+57919, const_tbl+146183)
MAKE_LITERAL_PAIR(const_tbl+57902, const_tbl+146200)
MAKE_LITERAL_PAIR(const_tbl+57885, const_tbl+146217)
MAKE_LITERAL_PAIR(const_tbl+57868, const_tbl+146234)
MAKE_LITERAL_PAIR(const_tbl+57851, const_tbl+146251)
MAKE_LITERAL_PAIR(const_tbl+57834, const_tbl+146268)
MAKE_LITERAL_PAIR(const_tbl+57817, const_tbl+146285)
MAKE_LITERAL_PAIR(const_tbl+57800, const_tbl+146302)
MAKE_LITERAL_PAIR(const_tbl+57783, const_tbl+146319)
MAKE_LITERAL_PAIR(const_tbl+57766, const_tbl+146336)
MAKE_LITERAL_PAIR(const_tbl+57749, const_tbl+146353)
MAKE_LITERAL_PAIR(const_tbl+57732, const_tbl+146370)
MAKE_LITERAL_PAIR(const_tbl+57715, const_tbl+146387)
MAKE_LITERAL_PAIR(const_tbl+57698, const_tbl+146404)
MAKE_LITERAL_PAIR(const_tbl+57681, const_tbl+146421)
MAKE_LITERAL_PAIR(const_tbl+57664, const_tbl+146438)
MAKE_LITERAL_PAIR(const_tbl+57647, const_tbl+146455)
MAKE_LITERAL_PAIR(const_tbl+57630, const_tbl+146472)
MAKE_LITERAL_PAIR(const_tbl+57613, const_tbl+146489)
MAKE_LITERAL_PAIR(const_tbl+57596, const_tbl+146506)
MAKE_LITERAL_PAIR(const_tbl+57579, const_tbl+146523)
MAKE_LITERAL_PAIR(const_tbl+57562, const_tbl+146540)
MAKE_LITERAL_PAIR(const_tbl+57545, const_tbl+146557)
MAKE_LITERAL_PAIR(const_tbl+57528, const_tbl+146574)
MAKE_LITERAL_PAIR(const_tbl+57511, const_tbl+146591)
MAKE_LITERAL_PAIR(const_tbl+57494, const_tbl+146608)
MAKE_LITERAL_PAIR(const_tbl+57477, const_tbl+146625)
MAKE_LITERAL_PAIR(const_tbl+57460, const_tbl+146642)
MAKE_LITERAL_PAIR(const_tbl+57443, const_tbl+146659)
MAKE_LITERAL_PAIR(const_tbl+57426, const_tbl+146676)
MAKE_LITERAL_PAIR(const_tbl+57409, const_tbl+146693)
MAKE_LITERAL_PAIR(const_tbl+57392, const_tbl+146710)
MAKE_LITERAL_PAIR(const_tbl+57375, const_tbl+146727)
MAKE_LITERAL_PAIR(const_tbl+57358, const_tbl+146744)
MAKE_LITERAL_PAIR(const_tbl+57341, const_tbl+146761)
MAKE_LITERAL_PAIR(const_tbl+57324, const_tbl+146778)
MAKE_LITERAL_PAIR(const_tbl+57307, const_tbl+146795)
MAKE_LITERAL_PAIR(const_tbl+57290, const_tbl+146812)
MAKE_LITERAL_PAIR(const_tbl+57273, const_tbl+146829)
MAKE_LITERAL_PAIR(const_tbl+57256, const_tbl+146846)
MAKE_LITERAL_PAIR(const_tbl+57239, const_tbl+146863)
MAKE_LITERAL_PAIR(const_tbl+57222, const_tbl+146880)
MAKE_LITERAL_PAIR(const_tbl+57205, const_tbl+146897)
MAKE_LITERAL_PAIR(const_tbl+57188, const_tbl+146914)
MAKE_LITERAL_PAIR(const_tbl+57171, const_tbl+146931)
MAKE_LITERAL_PAIR(const_tbl+57154, const_tbl+146948)
MAKE_LITERAL_PAIR(const_tbl+57137, const_tbl+146965)
MAKE_LITERAL_PAIR(const_tbl+57120, const_tbl+146982)
MAKE_LITERAL_PAIR(const_tbl+57103, const_tbl+146999)
MAKE_LITERAL_PAIR(const_tbl+57086, const_tbl+147016)
MAKE_LITERAL_PAIR(const_tbl+57069, const_tbl+147033)
MAKE_LITERAL_PAIR(const_tbl+57052, const_tbl+147050)
MAKE_LITERAL_PAIR(const_tbl+57035, const_tbl+147067)
MAKE_LITERAL_PAIR(const_tbl+57018, const_tbl+147084)
MAKE_LITERAL_PAIR(const_tbl+57001, const_tbl+147101)
MAKE_LITERAL_PAIR(const_tbl+56984, const_tbl+147118)
MAKE_LITERAL_PAIR(const_tbl+56967, const_tbl+147135)
MAKE_LITERAL_PAIR(const_tbl+56950, const_tbl+147152)
MAKE_LITERAL_PAIR(const_tbl+56933, const_tbl+147169)
MAKE_LITERAL_PAIR(const_tbl+56916, const_tbl+147186)
MAKE_LITERAL_PAIR(const_tbl+56899, const_tbl+147203)
MAKE_LITERAL_PAIR(const_tbl+56882, const_tbl+147220)
MAKE_LITERAL_PAIR(const_tbl+56865, const_tbl+147237)
MAKE_LITERAL_PAIR(const_tbl+56848, const_tbl+147254)
MAKE_LITERAL_PAIR(const_tbl+56831, const_tbl+147271)
MAKE_LITERAL_PAIR(const_tbl+56814, const_tbl+147288)
MAKE_LITERAL_PAIR(const_tbl+56797, const_tbl+147305)
MAKE_LITERAL_PAIR(const_tbl+56780, const_tbl+147322)
MAKE_LITERAL_PAIR(const_tbl+56763, const_tbl+147339)
MAKE_LITERAL_PAIR(const_tbl+56746, const_tbl+147356)
MAKE_LITERAL_PAIR(const_tbl+56729, const_tbl+147373)
MAKE_LITERAL_PAIR(const_tbl+56712, const_tbl+147390)
MAKE_LITERAL_PAIR(const_tbl+56695, const_tbl+147407)
MAKE_LITERAL_PAIR(const_tbl+56678, const_tbl+147424)
MAKE_LITERAL_PAIR(const_tbl+56661, const_tbl+147441)
MAKE_LITERAL_PAIR(const_tbl+56644, const_tbl+147458)
MAKE_LITERAL_PAIR(const_tbl+56627, const_tbl+147475)
MAKE_LITERAL_PAIR(const_tbl+56610, const_tbl+147492)
MAKE_LITERAL_PAIR(const_tbl+56593, const_tbl+147509)
MAKE_LITERAL_PAIR(const_tbl+56576, const_tbl+147526)
MAKE_LITERAL_PAIR(const_tbl+56559, const_tbl+147543)
MAKE_LITERAL_PAIR(const_tbl+56542, const_tbl+147560)
MAKE_LITERAL_PAIR(const_tbl+56525, const_tbl+147577)
MAKE_LITERAL_PAIR(const_tbl+56508, const_tbl+147594)
MAKE_LITERAL_PAIR(const_tbl+56491, const_tbl+147611)
MAKE_LITERAL_PAIR(const_tbl+56474, const_tbl+147628)
MAKE_LITERAL_PAIR(const_tbl+56457, const_tbl+147645)
MAKE_LITERAL_PAIR(const_tbl+56440, const_tbl+147662)
MAKE_LITERAL_PAIR(const_tbl+56423, const_tbl+147679)
MAKE_LITERAL_PAIR(const_tbl+56406, const_tbl+147696)
MAKE_LITERAL_PAIR(const_tbl+56389, const_tbl+147713)
MAKE_LITERAL_PAIR(const_tbl+56372, const_tbl+147730)
MAKE_LITERAL_PAIR(const_tbl+56355, const_tbl+147747)
MAKE_LITERAL_PAIR(const_tbl+56338, const_tbl+147764)
MAKE_LITERAL_PAIR(const_tbl+56321, const_tbl+147781)
MAKE_LITERAL_PAIR(const_tbl+56304, const_tbl+147798)
MAKE_LITERAL_PAIR(const_tbl+56287, const_tbl+147815)
MAKE_LITERAL_PAIR(const_tbl+56270, const_tbl+147832)
MAKE_LITERAL_PAIR(const_tbl+56253, const_tbl+147849)
MAKE_LITERAL_PAIR(const_tbl+56236, const_tbl+147866)
MAKE_LITERAL_PAIR(const_tbl+56219, const_tbl+147883)
MAKE_LITERAL_PAIR(const_tbl+56202, const_tbl+147900)
MAKE_LITERAL_PAIR(const_tbl+56185, const_tbl+147917)
MAKE_LITERAL_PAIR(const_tbl+56168, const_tbl+147934)
MAKE_LITERAL_PAIR(const_tbl+56151, const_tbl+147951)
MAKE_LITERAL_PAIR(const_tbl+56134, const_tbl+147968)
MAKE_LITERAL_PAIR(const_tbl+56117, const_tbl+147985)
MAKE_LITERAL_PAIR(const_tbl+56100, const_tbl+148002)
MAKE_LITERAL_PAIR(const_tbl+56083, const_tbl+148019)
MAKE_LITERAL_PAIR(const_tbl+56066, const_tbl+148036)
MAKE_LITERAL_PAIR(const_tbl+56049, const_tbl+148053)
MAKE_LITERAL_PAIR(const_tbl+56032, const_tbl+148070)
MAKE_LITERAL_PAIR(const_tbl+56015, const_tbl+148087)
MAKE_LITERAL_PAIR(const_tbl+55998, const_tbl+148104)
MAKE_LITERAL_PAIR(const_tbl+55981, const_tbl+148121)
MAKE_LITERAL_PAIR(const_tbl+55964, const_tbl+148138)
MAKE_LITERAL_PAIR(const_tbl+55947, const_tbl+148155)
MAKE_LITERAL_PAIR(const_tbl+55930, const_tbl+148172)
MAKE_LITERAL_PAIR(const_tbl+55913, const_tbl+148189)
MAKE_LITERAL_PAIR(const_tbl+55896, const_tbl+148206)
MAKE_LITERAL_PAIR(const_tbl+55879, const_tbl+148223)
MAKE_LITERAL_PAIR(const_tbl+55862, const_tbl+148240)
MAKE_LITERAL_PAIR(const_tbl+55845, const_tbl+148257)
MAKE_LITERAL_PAIR(const_tbl+55828, const_tbl+148274)
MAKE_LITERAL_PAIR(const_tbl+55811, const_tbl+148291)
MAKE_LITERAL_PAIR(const_tbl+55794, const_tbl+148308)
MAKE_LITERAL_PAIR(const_tbl+55777, const_tbl+148325)
MAKE_LITERAL_PAIR(const_tbl+55760, const_tbl+148342)
MAKE_LITERAL_PAIR(const_tbl+55743, const_tbl+148359)
MAKE_LITERAL_PAIR(const_tbl+55726, const_tbl+148376)
MAKE_LITERAL_PAIR(const_tbl+55709, const_tbl+148393)
MAKE_LITERAL_PAIR(const_tbl+55692, const_tbl+148410)
MAKE_LITERAL_PAIR(const_tbl+55675, const_tbl+148427)
MAKE_LITERAL_PAIR(const_tbl+55658, const_tbl+148444)
MAKE_LITERAL_PAIR(const_tbl+55641, const_tbl+148461)
MAKE_LITERAL_PAIR(const_tbl+55624, const_tbl+148478)
MAKE_LITERAL_PAIR(const_tbl+55607, const_tbl+148495)
MAKE_LITERAL_PAIR(const_tbl+55590, const_tbl+148512)
MAKE_LITERAL_PAIR(const_tbl+55573, const_tbl+148529)
MAKE_LITERAL_PAIR(const_tbl+55556, const_tbl+148546)
MAKE_LITERAL_PAIR(const_tbl+55539, const_tbl+148563)
MAKE_LITERAL_PAIR(const_tbl+55522, const_tbl+148580)
MAKE_LITERAL_PAIR(const_tbl+55505, const_tbl+148597)
MAKE_LITERAL_PAIR(const_tbl+55488, const_tbl+148614)
MAKE_LITERAL_PAIR(const_tbl+55471, const_tbl+148631)
MAKE_LITERAL_PAIR(const_tbl+55454, const_tbl+148648)
MAKE_LITERAL_PAIR(const_tbl+55437, const_tbl+148665)
MAKE_LITERAL_PAIR(const_tbl+55420, const_tbl+148682)
MAKE_LITERAL_PAIR(const_tbl+55403, const_tbl+148699)
MAKE_LITERAL_PAIR(const_tbl+55386, const_tbl+148716)
MAKE_LITERAL_PAIR(const_tbl+55369, const_tbl+148733)
MAKE_LITERAL_PAIR(const_tbl+55352, const_tbl+148750)
MAKE_LITERAL_PAIR(const_tbl+55335, const_tbl+148767)
MAKE_LITERAL_PAIR(const_tbl+55318, const_tbl+148784)
MAKE_LITERAL_PAIR(const_tbl+55301, const_tbl+148801)
MAKE_LITERAL_PAIR(const_tbl+55284, const_tbl+148818)
MAKE_LITERAL_PAIR(const_tbl+55267, const_tbl+148835)
MAKE_LITERAL_PAIR(const_tbl+55250, const_tbl+148852)
MAKE_LITERAL_PAIR(const_tbl+55233, const_tbl+148869)
MAKE_LITERAL_PAIR(const_tbl+55216, const_tbl+148886)
MAKE_LITERAL_PAIR(const_tbl+55199, const_tbl+148903)
MAKE_LITERAL_PAIR(const_tbl+55182, const_tbl+148920)
MAKE_LITERAL_PAIR(const_tbl+55165, const_tbl+148937)
MAKE_LITERAL_PAIR(const_tbl+55148, const_tbl+148954)
MAKE_LITERAL_PAIR(const_tbl+55131, const_tbl+148971)
MAKE_LITERAL_PAIR(const_tbl+55114, const_tbl+148988)
MAKE_LITERAL_PAIR(const_tbl+55097, const_tbl+149005)
MAKE_LITERAL_PAIR(const_tbl+55080, const_tbl+149022)
MAKE_LITERAL_PAIR(const_tbl+55063, const_tbl+149039)
MAKE_LITERAL_PAIR(const_tbl+55046, const_tbl+149056)
MAKE_LITERAL_PAIR(const_tbl+55029, const_tbl+149073)
MAKE_LITERAL_PAIR(const_tbl+55012, const_tbl+149090)
MAKE_LITERAL_PAIR(const_tbl+54995, const_tbl+149107)
MAKE_LITERAL_PAIR(const_tbl+54978, const_tbl+149124)
MAKE_LITERAL_PAIR(const_tbl+54961, const_tbl+149141)
MAKE_LITERAL_PAIR(const_tbl+54944, const_tbl+149158)
MAKE_LITERAL_PAIR(const_tbl+54927, const_tbl+149175)
MAKE_LITERAL_PAIR(const_tbl+54910, const_tbl+149192)
MAKE_LITERAL_PAIR(const_tbl+54893, const_tbl+149209)
MAKE_LITERAL_PAIR(const_tbl+54876, const_tbl+149226)
MAKE_LITERAL_PAIR(const_tbl+54859, const_tbl+149243)
MAKE_LITERAL_PAIR(const_tbl+54842, const_tbl+149260)
MAKE_LITERAL_PAIR(const_tbl+54825, const_tbl+149277)
MAKE_LITERAL_PAIR(const_tbl+54808, const_tbl+149294)
MAKE_LITERAL_PAIR(const_tbl+54791, const_tbl+149311)
MAKE_LITERAL_PAIR(const_tbl+54774, const_tbl+149328)
MAKE_LITERAL_PAIR(const_tbl+54757, const_tbl+149345)
MAKE_LITERAL_PAIR(const_tbl+54740, const_tbl+149362)
MAKE_LITERAL_PAIR(const_tbl+54723, const_tbl+149379)
MAKE_LITERAL_PAIR(const_tbl+54706, const_tbl+149396)
MAKE_LITERAL_PAIR(const_tbl+54689, const_tbl+149413)
MAKE_LITERAL_PAIR(const_tbl+54672, const_tbl+149430)
MAKE_LITERAL_PAIR(const_tbl+54655, const_tbl+149447)
MAKE_LITERAL_PAIR(const_tbl+54638, const_tbl+149464)
MAKE_LITERAL_PAIR(const_tbl+54621, const_tbl+149481)
MAKE_LITERAL_PAIR(const_tbl+54604, const_tbl+149498)
MAKE_LITERAL_PAIR(const_tbl+54587, const_tbl+149515)
MAKE_LITERAL_PAIR(const_tbl+54570, const_tbl+149532)
MAKE_LITERAL_PAIR(const_tbl+54553, const_tbl+149549)
MAKE_LITERAL_PAIR(const_tbl+54536, const_tbl+149566)
MAKE_LITERAL_PAIR(const_tbl+54519, const_tbl+149583)
MAKE_LITERAL_PAIR(const_tbl+54502, const_tbl+149600)
MAKE_LITERAL_PAIR(const_tbl+54485, const_tbl+149617)
MAKE_LITERAL_PAIR(const_tbl+54468, const_tbl+149634)
MAKE_LITERAL_PAIR(const_tbl+54451, const_tbl+149651)
MAKE_LITERAL_PAIR(const_tbl+54434, const_tbl+149668)
MAKE_LITERAL_PAIR(const_tbl+54417, const_tbl+149685)
MAKE_LITERAL_PAIR(const_tbl+54400, const_tbl+149702)
MAKE_LITERAL_PAIR(const_tbl+54383, const_tbl+149719)
MAKE_LITERAL_PAIR(const_tbl+54366, const_tbl+149736)
MAKE_LITERAL_PAIR(const_tbl+54349, const_tbl+149753)
MAKE_LITERAL_PAIR(const_tbl+54332, const_tbl+149770)
MAKE_LITERAL_PAIR(const_tbl+54315, const_tbl+149787)
MAKE_LITERAL_PAIR(const_tbl+54298, const_tbl+149804)
MAKE_LITERAL_PAIR(const_tbl+54281, const_tbl+149821)
MAKE_LITERAL_PAIR(const_tbl+54264, const_tbl+149838)
MAKE_LITERAL_PAIR(const_tbl+54247, const_tbl+149855)
MAKE_LITERAL_PAIR(const_tbl+54230, const_tbl+149872)
MAKE_LITERAL_PAIR(const_tbl+54213, const_tbl+149889)
MAKE_LITERAL_PAIR(const_tbl+54196, const_tbl+149906)
MAKE_LITERAL_PAIR(const_tbl+54179, const_tbl+149923)
MAKE_LITERAL_PAIR(const_tbl+54162, const_tbl+149940)
MAKE_LITERAL_PAIR(const_tbl+54145, const_tbl+149957)
MAKE_LITERAL_PAIR(const_tbl+54128, const_tbl+149974)
MAKE_LITERAL_PAIR(const_tbl+54111, const_tbl+149991)
MAKE_LITERAL_PAIR(const_tbl+54094, const_tbl+150008)
MAKE_LITERAL_PAIR(const_tbl+54077, const_tbl+150025)
MAKE_LITERAL_PAIR(const_tbl+54060, const_tbl+150042)
MAKE_LITERAL_PAIR(const_tbl+54043, const_tbl+150059)
MAKE_LITERAL_PAIR(const_tbl+54026, const_tbl+150076)
MAKE_LITERAL_PAIR(const_tbl+54009, const_tbl+150093)
MAKE_LITERAL_PAIR(const_tbl+53992, const_tbl+150110)
MAKE_LITERAL_PAIR(const_tbl+53975, const_tbl+150127)
MAKE_LITERAL_PAIR(const_tbl+53958, const_tbl+150144)
MAKE_LITERAL_PAIR(const_tbl+53941, const_tbl+150161)
MAKE_LITERAL_PAIR(const_tbl+53924, const_tbl+150178)
MAKE_LITERAL_PAIR(const_tbl+53907, const_tbl+150195)
MAKE_LITERAL_PAIR(const_tbl+53890, const_tbl+150212)
MAKE_LITERAL_PAIR(const_tbl+53873, const_tbl+150229)
MAKE_LITERAL_PAIR(const_tbl+53856, const_tbl+150246)
MAKE_LITERAL_PAIR(const_tbl+53839, const_tbl+150263)
MAKE_LITERAL_PAIR(const_tbl+53822, const_tbl+150280)
MAKE_LITERAL_PAIR(const_tbl+53805, const_tbl+150297)
MAKE_LITERAL_PAIR(const_tbl+53788, const_tbl+150314)
MAKE_LITERAL_PAIR(const_tbl+53771, const_tbl+150331)
MAKE_LITERAL_PAIR(const_tbl+53754, const_tbl+150348)
MAKE_LITERAL_PAIR(const_tbl+53737, const_tbl+150365)
MAKE_LITERAL_PAIR(const_tbl+53720, const_tbl+150382)
MAKE_LITERAL_PAIR(const_tbl+53703, const_tbl+150399)
MAKE_LITERAL_PAIR(const_tbl+53686, const_tbl+150416)
MAKE_LITERAL_PAIR(const_tbl+53669, const_tbl+150433)
MAKE_LITERAL_PAIR(const_tbl+53652, const_tbl+150450)
MAKE_LITERAL_PAIR(const_tbl+53635, const_tbl+150467)
MAKE_LITERAL_PAIR(const_tbl+53618, const_tbl+150484)
MAKE_LITERAL_PAIR(const_tbl+53601, const_tbl+150501)
MAKE_LITERAL_PAIR(const_tbl+53584, const_tbl+150518)
MAKE_LITERAL_PAIR(const_tbl+53567, const_tbl+150535)
MAKE_LITERAL_PAIR(const_tbl+53550, const_tbl+150552)
MAKE_LITERAL_PAIR(const_tbl+53533, const_tbl+150569)
MAKE_LITERAL_PAIR(const_tbl+53516, const_tbl+150586)
MAKE_LITERAL_PAIR(const_tbl+53499, const_tbl+150603)
MAKE_LITERAL_PAIR(const_tbl+53482, const_tbl+150620)
MAKE_LITERAL_PAIR(const_tbl+53465, const_tbl+150637)
MAKE_LITERAL_PAIR(const_tbl+53448, const_tbl+150654)
MAKE_LITERAL_PAIR(const_tbl+53431, const_tbl+150671)
MAKE_LITERAL_PAIR(const_tbl+53414, const_tbl+150688)
MAKE_LITERAL_PAIR(const_tbl+53397, const_tbl+150705)
MAKE_LITERAL_PAIR(const_tbl+53380, const_tbl+150722)
MAKE_LITERAL_PAIR(const_tbl+53363, const_tbl+150739)
MAKE_LITERAL_PAIR(const_tbl+53346, const_tbl+150756)
MAKE_LITERAL_PAIR(const_tbl+53329, const_tbl+150773)
MAKE_LITERAL_PAIR(const_tbl+53312, const_tbl+150790)
MAKE_LITERAL_PAIR(const_tbl+53295, const_tbl+150807)
MAKE_LITERAL_PAIR(const_tbl+53278, const_tbl+150824)
MAKE_LITERAL_PAIR(const_tbl+53261, const_tbl+150841)
MAKE_LITERAL_PAIR(const_tbl+53244, const_tbl+150858)
MAKE_LITERAL_PAIR(const_tbl+53227, const_tbl+150875)
MAKE_LITERAL_PAIR(const_tbl+53210, const_tbl+150892)
MAKE_LITERAL_PAIR(const_tbl+53193, const_tbl+150909)
MAKE_LITERAL_PAIR(const_tbl+53176, const_tbl+150926)
MAKE_LITERAL_PAIR(const_tbl+53159, const_tbl+150943)
MAKE_LITERAL_PAIR(const_tbl+53142, const_tbl+150960)
MAKE_LITERAL_PAIR(const_tbl+53125, const_tbl+150977)
MAKE_LITERAL_PAIR(const_tbl+53108, const_tbl+150994)
MAKE_LITERAL_PAIR(const_tbl+53091, const_tbl+151011)
MAKE_LITERAL_PAIR(const_tbl+53074, const_tbl+151028)
MAKE_LITERAL_PAIR(const_tbl+53057, const_tbl+151045)
MAKE_LITERAL_PAIR(const_tbl+53040, const_tbl+151062)
MAKE_LITERAL_PAIR(const_tbl+53023, const_tbl+151079)
MAKE_LITERAL_PAIR(const_tbl+53006, const_tbl+151096)
MAKE_LITERAL_PAIR(const_tbl+52989, const_tbl+151113)
MAKE_LITERAL_PAIR(const_tbl+52972, const_tbl+151130)
MAKE_LITERAL_PAIR(const_tbl+52955, const_tbl+151147)
MAKE_LITERAL_PAIR(const_tbl+52938, const_tbl+151164)
MAKE_LITERAL_PAIR(const_tbl+52921, const_tbl+151181)
MAKE_LITERAL_PAIR(const_tbl+52904, const_tbl+151198)
MAKE_LITERAL_PAIR(const_tbl+52887, const_tbl+151215)
MAKE_LITERAL_PAIR(const_tbl+52870, const_tbl+151232)
MAKE_LITERAL_PAIR(const_tbl+52853, const_tbl+151249)
MAKE_LITERAL_PAIR(const_tbl+52836, const_tbl+151266)
MAKE_LITERAL_PAIR(const_tbl+52819, const_tbl+151283)
MAKE_LITERAL_PAIR(const_tbl+52802, const_tbl+151300)
MAKE_LITERAL_PAIR(const_tbl+52785, const_tbl+151317)
MAKE_LITERAL_PAIR(const_tbl+52768, const_tbl+151334)
MAKE_LITERAL_PAIR(const_tbl+52751, const_tbl+151351)
MAKE_LITERAL_PAIR(const_tbl+52734, const_tbl+151368)
MAKE_LITERAL_PAIR(const_tbl+52717, const_tbl+151385)
MAKE_LITERAL_PAIR(const_tbl+52700, const_tbl+151402)
MAKE_LITERAL_PAIR(const_tbl+52683, const_tbl+151419)
MAKE_LITERAL_PAIR(const_tbl+52666, const_tbl+151436)
MAKE_LITERAL_PAIR(const_tbl+52649, const_tbl+151453)
MAKE_LITERAL_PAIR(const_tbl+52632, const_tbl+151470)
MAKE_LITERAL_PAIR(const_tbl+52615, const_tbl+151487)
MAKE_LITERAL_PAIR(const_tbl+52598, const_tbl+151504)
MAKE_LITERAL_PAIR(const_tbl+52581, const_tbl+151521)
MAKE_LITERAL_PAIR(const_tbl+52564, const_tbl+151538)
MAKE_LITERAL_PAIR(const_tbl+52547, const_tbl+151555)
MAKE_LITERAL_PAIR(const_tbl+52530, const_tbl+151572)
MAKE_LITERAL_PAIR(const_tbl+52513, const_tbl+151589)
MAKE_LITERAL_PAIR(const_tbl+52496, const_tbl+151606)
MAKE_LITERAL_PAIR(const_tbl+52479, const_tbl+151623)
MAKE_LITERAL_PAIR(const_tbl+52462, const_tbl+151640)
MAKE_LITERAL_PAIR(const_tbl+52445, const_tbl+151657)
MAKE_LITERAL_PAIR(const_tbl+52428, const_tbl+151674)
MAKE_LITERAL_PAIR(const_tbl+52411, const_tbl+151691)
MAKE_LITERAL_PAIR(const_tbl+52394, const_tbl+151708)
MAKE_LITERAL_PAIR(const_tbl+52377, const_tbl+151725)
MAKE_LITERAL_PAIR(const_tbl+52360, const_tbl+151742)
MAKE_LITERAL_PAIR(const_tbl+52343, const_tbl+151759)
MAKE_LITERAL_PAIR(const_tbl+52326, const_tbl+151776)
MAKE_LITERAL_PAIR(const_tbl+52309, const_tbl+151793)
MAKE_LITERAL_PAIR(const_tbl+52292, const_tbl+151810)
MAKE_LITERAL_PAIR(const_tbl+52275, const_tbl+151827)
MAKE_LITERAL_PAIR(const_tbl+52258, const_tbl+151844)
MAKE_LITERAL_PAIR(const_tbl+52241, const_tbl+151861)
MAKE_LITERAL_PAIR(const_tbl+52224, const_tbl+151878)
MAKE_LITERAL_PAIR(const_tbl+52207, const_tbl+151895)
MAKE_LITERAL_PAIR(const_tbl+52190, const_tbl+151912)
MAKE_LITERAL_PAIR(const_tbl+52173, const_tbl+151929)
MAKE_LITERAL_PAIR(const_tbl+52156, const_tbl+151946)
MAKE_LITERAL_PAIR(const_tbl+52139, const_tbl+151963)
MAKE_LITERAL_PAIR(const_tbl+52122, const_tbl+151980)
MAKE_LITERAL_PAIR(const_tbl+52105, const_tbl+151997)
MAKE_LITERAL_PAIR(const_tbl+52088, const_tbl+152014)
MAKE_LITERAL_PAIR(const_tbl+52071, const_tbl+152031)
MAKE_LITERAL_PAIR(const_tbl+52054, const_tbl+152048)
MAKE_LITERAL_PAIR(const_tbl+52037, const_tbl+152065)
MAKE_LITERAL_PAIR(const_tbl+52020, const_tbl+152082)
MAKE_LITERAL_PAIR(const_tbl+52003, const_tbl+152099)
MAKE_LITERAL_PAIR(const_tbl+51986, const_tbl+152116)
MAKE_LITERAL_PAIR(const_tbl+51969, const_tbl+152133)
MAKE_LITERAL_PAIR(const_tbl+51952, const_tbl+152150)
MAKE_LITERAL_PAIR(const_tbl+51935, const_tbl+152167)
MAKE_LITERAL_PAIR(const_tbl+51918, const_tbl+152184)
MAKE_LITERAL_PAIR(const_tbl+51901, const_tbl+152201)
MAKE_LITERAL_PAIR(const_tbl+51884, const_tbl+152218)
MAKE_LITERAL_PAIR(const_tbl+51867, const_tbl+152235)
MAKE_LITERAL_PAIR(const_tbl+51850, const_tbl+152252)
MAKE_LITERAL_PAIR(const_tbl+51833, const_tbl+152269)
MAKE_LITERAL_PAIR(const_tbl+51816, const_tbl+152286)
MAKE_LITERAL_PAIR(const_tbl+51799, const_tbl+152303)
MAKE_LITERAL_PAIR(const_tbl+51782, const_tbl+152320)
MAKE_LITERAL_PAIR(const_tbl+51765, const_tbl+152337)
MAKE_LITERAL_PAIR(const_tbl+51748, const_tbl+152354)
MAKE_LITERAL_PAIR(const_tbl+51731, const_tbl+152371)
MAKE_LITERAL_PAIR(const_tbl+51714, const_tbl+152388)
MAKE_LITERAL_PAIR(const_tbl+51697, const_tbl+152405)
MAKE_LITERAL_PAIR(const_tbl+51680, const_tbl+152422)
MAKE_LITERAL_PAIR(const_tbl+51663, const_tbl+152439)
MAKE_LITERAL_PAIR(const_tbl+51646, const_tbl+152456)
MAKE_LITERAL_PAIR(const_tbl+51629, const_tbl+152473)
MAKE_LITERAL_PAIR(const_tbl+51612, const_tbl+152490)
MAKE_LITERAL_PAIR(const_tbl+51595, const_tbl+152507)
MAKE_LITERAL_PAIR(const_tbl+51578, const_tbl+152524)
MAKE_LITERAL_PAIR(const_tbl+51561, const_tbl+152541)
MAKE_LITERAL_PAIR(const_tbl+51544, const_tbl+152558)
MAKE_LITERAL_PAIR(const_tbl+51527, const_tbl+152575)
MAKE_LITERAL_PAIR(const_tbl+51510, const_tbl+152592)
MAKE_LITERAL_PAIR(const_tbl+51493, const_tbl+152609)
MAKE_LITERAL_PAIR(const_tbl+51476, const_tbl+152626)
MAKE_LITERAL_PAIR(const_tbl+51459, const_tbl+152643)
MAKE_LITERAL_PAIR(const_tbl+51442, const_tbl+152660)
MAKE_LITERAL_PAIR(const_tbl+51425, const_tbl+152677)
MAKE_LITERAL_PAIR(const_tbl+51408, const_tbl+152694)
MAKE_LITERAL_PAIR(const_tbl+51391, const_tbl+152711)
MAKE_LITERAL_PAIR(const_tbl+51374, const_tbl+152728)
MAKE_LITERAL_PAIR(const_tbl+51357, const_tbl+152745)
MAKE_LITERAL_PAIR(const_tbl+51340, const_tbl+152762)
MAKE_LITERAL_PAIR(const_tbl+51323, const_tbl+152779)
MAKE_LITERAL_PAIR(const_tbl+51306, const_tbl+152796)
MAKE_LITERAL_PAIR(const_tbl+51289, const_tbl+152813)
MAKE_LITERAL_PAIR(const_tbl+51272, const_tbl+152830)
MAKE_LITERAL_PAIR(const_tbl+51255, const_tbl+152847)
MAKE_LITERAL_PAIR(const_tbl+51238, const_tbl+152864)
MAKE_LITERAL_PAIR(const_tbl+51221, const_tbl+152881)
MAKE_LITERAL_PAIR(const_tbl+51204, const_tbl+152898)
MAKE_LITERAL_PAIR(const_tbl+51187, const_tbl+152915)
MAKE_LITERAL_PAIR(const_tbl+51170, const_tbl+152932)
MAKE_LITERAL_PAIR(const_tbl+51153, const_tbl+152949)
MAKE_LITERAL_PAIR(const_tbl+51136, const_tbl+152966)
MAKE_LITERAL_PAIR(const_tbl+51119, const_tbl+152983)
MAKE_LITERAL_PAIR(const_tbl+51102, const_tbl+153000)
MAKE_LITERAL_PAIR(const_tbl+51085, const_tbl+153017)
MAKE_LITERAL_PAIR(const_tbl+51068, const_tbl+153034)
MAKE_LITERAL_PAIR(const_tbl+51051, const_tbl+153051)
MAKE_LITERAL_PAIR(const_tbl+51034, const_tbl+153068)
MAKE_LITERAL_PAIR(const_tbl+51017, const_tbl+153085)
MAKE_LITERAL_PAIR(const_tbl+51000, const_tbl+153102)
MAKE_LITERAL_PAIR(const_tbl+50983, const_tbl+153119)
MAKE_LITERAL_PAIR(const_tbl+50966, const_tbl+153136)
MAKE_LITERAL_PAIR(const_tbl+50949, const_tbl+153153)
MAKE_LITERAL_PAIR(const_tbl+50932, const_tbl+153170)
MAKE_LITERAL_PAIR(const_tbl+50915, const_tbl+153187)
MAKE_LITERAL_PAIR(const_tbl+50898, const_tbl+153204)
MAKE_LITERAL_PAIR(const_tbl+50881, const_tbl+153221)
MAKE_LITERAL_PAIR(const_tbl+50864, const_tbl+153238)
MAKE_LITERAL_PAIR(const_tbl+50847, const_tbl+153255)
MAKE_LITERAL_PAIR(const_tbl+50830, const_tbl+153272)
MAKE_LITERAL_PAIR(const_tbl+50813, const_tbl+153289)
MAKE_LITERAL_PAIR(const_tbl+50796, const_tbl+153306)
MAKE_LITERAL_PAIR(const_tbl+50779, const_tbl+153323)
MAKE_LITERAL_PAIR(const_tbl+50762, const_tbl+153340)
MAKE_LITERAL_PAIR(const_tbl+50745, const_tbl+153357)
MAKE_LITERAL_PAIR(const_tbl+50728, const_tbl+153374)
MAKE_LITERAL_PAIR(const_tbl+50711, const_tbl+153391)
MAKE_LITERAL_PAIR(const_tbl+50694, const_tbl+153408)
MAKE_LITERAL_PAIR(const_tbl+50677, const_tbl+153425)
MAKE_LITERAL_PAIR(const_tbl+50660, const_tbl+153442)
MAKE_LITERAL_PAIR(const_tbl+50643, const_tbl+153459)
MAKE_LITERAL_PAIR(const_tbl+50626, const_tbl+153476)
MAKE_LITERAL_PAIR(const_tbl+50609, const_tbl+153493)
MAKE_LITERAL_PAIR(const_tbl+50592, const_tbl+153510)
MAKE_LITERAL_PAIR(const_tbl+50575, const_tbl+153527)
MAKE_LITERAL_PAIR(const_tbl+50558, const_tbl+153544)
MAKE_LITERAL_PAIR(const_tbl+50541, const_tbl+153561)
MAKE_LITERAL_PAIR(const_tbl+50524, const_tbl+153578)
MAKE_LITERAL_PAIR(const_tbl+50507, const_tbl+153595)
MAKE_LITERAL_PAIR(const_tbl+50490, const_tbl+153612)
MAKE_LITERAL_PAIR(const_tbl+50473, const_tbl+153629)
MAKE_LITERAL_PAIR(const_tbl+50456, const_tbl+153646)
MAKE_LITERAL_PAIR(const_tbl+50439, const_tbl+153663)
MAKE_LITERAL_PAIR(const_tbl+50422, const_tbl+153680)
MAKE_LITERAL_PAIR(const_tbl+50405, const_tbl+153697)
MAKE_LITERAL_PAIR(const_tbl+50388, const_tbl+153714)
MAKE_LITERAL_PAIR(const_tbl+50371, const_tbl+153731)
MAKE_LITERAL_PAIR(const_tbl+50354, const_tbl+153748)
MAKE_LITERAL_PAIR(const_tbl+50337, const_tbl+153765)
MAKE_LITERAL_PAIR(const_tbl+50320, const_tbl+153782)
MAKE_LITERAL_PAIR(const_tbl+50303, const_tbl+153799)
MAKE_LITERAL_PAIR(const_tbl+50286, const_tbl+153816)
MAKE_LITERAL_PAIR(const_tbl+50269, const_tbl+153833)
MAKE_LITERAL_PAIR(const_tbl+50252, const_tbl+153850)
MAKE_LITERAL_PAIR(const_tbl+50235, const_tbl+153867)
MAKE_LITERAL_PAIR(const_tbl+50218, const_tbl+153884)
MAKE_LITERAL_PAIR(const_tbl+50201, const_tbl+153901)
MAKE_LITERAL_PAIR(const_tbl+50184, const_tbl+153918)
MAKE_LITERAL_PAIR(const_tbl+50167, const_tbl+153935)
MAKE_LITERAL_PAIR(const_tbl+50150, const_tbl+153952)
MAKE_LITERAL_PAIR(const_tbl+50133, const_tbl+153969)
MAKE_LITERAL_PAIR(const_tbl+50116, const_tbl+153986)
MAKE_LITERAL_PAIR(const_tbl+50099, const_tbl+154003)
MAKE_LITERAL_PAIR(const_tbl+50082, const_tbl+154020)
MAKE_LITERAL_PAIR(const_tbl+50065, const_tbl+154037)
MAKE_LITERAL_PAIR(const_tbl+50048, const_tbl+154054)
MAKE_LITERAL_PAIR(const_tbl+50031, const_tbl+154071)
MAKE_LITERAL_PAIR(const_tbl+50014, const_tbl+154088)
MAKE_LITERAL_PAIR(const_tbl+49997, const_tbl+154105)
MAKE_LITERAL_PAIR(const_tbl+49980, const_tbl+154122)
MAKE_LITERAL_PAIR(const_tbl+49963, const_tbl+154139)
MAKE_LITERAL_PAIR(const_tbl+49946, const_tbl+154156)
MAKE_LITERAL_PAIR(const_tbl+49929, const_tbl+154173)
MAKE_LITERAL_PAIR(const_tbl+49912, const_tbl+154190)
MAKE_LITERAL_PAIR(const_tbl+49895, const_tbl+154207)
MAKE_LITERAL_PAIR(const_tbl+49878, const_tbl+154224)
MAKE_LITERAL_PAIR(const_tbl+49861, const_tbl+154241)
MAKE_LITERAL_PAIR(const_tbl+49844, const_tbl+154258)
MAKE_LITERAL_PAIR(const_tbl+49827, const_tbl+154275)
MAKE_LITERAL_PAIR(const_tbl+49810, const_tbl+154292)
MAKE_LITERAL_PAIR(const_tbl+49793, const_tbl+154309)
MAKE_LITERAL_PAIR(const_tbl+49776, const_tbl+154326)
MAKE_LITERAL_PAIR(const_tbl+49759, const_tbl+154343)
MAKE_LITERAL_PAIR(const_tbl+49742, const_tbl+154360)
MAKE_LITERAL_PAIR(const_tbl+49725, const_tbl+154377)
MAKE_LITERAL_PAIR(const_tbl+49708, const_tbl+154394)
MAKE_LITERAL_PAIR(const_tbl+49691, const_tbl+154411)
MAKE_LITERAL_PAIR(const_tbl+49674, const_tbl+154428)
MAKE_LITERAL_PAIR(const_tbl+49657, const_tbl+154445)
MAKE_LITERAL_PAIR(const_tbl+49640, const_tbl+154462)
MAKE_LITERAL_PAIR(const_tbl+49623, const_tbl+154479)
MAKE_LITERAL_PAIR(const_tbl+49606, const_tbl+154496)
MAKE_LITERAL_PAIR(const_tbl+49589, const_tbl+154513)
MAKE_LITERAL_PAIR(const_tbl+49572, const_tbl+154530)
MAKE_LITERAL_PAIR(const_tbl+49555, const_tbl+154547)
MAKE_LITERAL_PAIR(const_tbl+49538, const_tbl+154564)
MAKE_LITERAL_PAIR(const_tbl+49521, const_tbl+154581)
MAKE_LITERAL_PAIR(const_tbl+49504, const_tbl+154598)
MAKE_LITERAL_PAIR(const_tbl+49487, const_tbl+154615)
MAKE_LITERAL_PAIR(const_tbl+49470, const_tbl+154632)
MAKE_LITERAL_PAIR(const_tbl+49453, const_tbl+154649)
MAKE_LITERAL_PAIR(const_tbl+49436, const_tbl+154666)
MAKE_LITERAL_PAIR(const_tbl+49419, const_tbl+154683)
MAKE_LITERAL_PAIR(const_tbl+49402, const_tbl+154700)
MAKE_LITERAL_PAIR(const_tbl+49385, const_tbl+154717)
MAKE_LITERAL_PAIR(const_tbl+49368, const_tbl+154734)
MAKE_LITERAL_PAIR(const_tbl+49351, const_tbl+154751)
MAKE_LITERAL_PAIR(const_tbl+49334, const_tbl+154768)
MAKE_LITERAL_PAIR(const_tbl+49317, const_tbl+154785)
MAKE_LITERAL_PAIR(const_tbl+49300, const_tbl+154802)
MAKE_LITERAL_PAIR(const_tbl+49283, const_tbl+154819)
MAKE_LITERAL_PAIR(const_tbl+49266, const_tbl+154836)
MAKE_LITERAL_PAIR(const_tbl+49249, const_tbl+154853)
MAKE_LITERAL_PAIR(const_tbl+49232, const_tbl+154870)
MAKE_LITERAL_PAIR(const_tbl+49215, const_tbl+154887)
MAKE_LITERAL_PAIR(const_tbl+49198, const_tbl+154904)
MAKE_LITERAL_PAIR(const_tbl+49181, const_tbl+154921)
MAKE_LITERAL_PAIR(const_tbl+49164, const_tbl+154938)
MAKE_LITERAL_PAIR(const_tbl+49147, const_tbl+154955)
MAKE_LITERAL_PAIR(const_tbl+49130, const_tbl+154972)
MAKE_LITERAL_PAIR(const_tbl+49113, const_tbl+154989)
MAKE_LITERAL_PAIR(const_tbl+49096, const_tbl+155006)
MAKE_LITERAL_PAIR(const_tbl+49079, const_tbl+155023)
MAKE_LITERAL_PAIR(const_tbl+49062, const_tbl+155040)
MAKE_LITERAL_PAIR(const_tbl+49045, const_tbl+155057)
MAKE_LITERAL_PAIR(const_tbl+49028, const_tbl+155074)
MAKE_LITERAL_PAIR(const_tbl+49011, const_tbl+155091)
MAKE_LITERAL_PAIR(const_tbl+48994, const_tbl+155108)
MAKE_LITERAL_PAIR(const_tbl+48977, const_tbl+155125)
MAKE_LITERAL_PAIR(const_tbl+48960, const_tbl+155142)
MAKE_LITERAL_PAIR(const_tbl+48943, const_tbl+155159)
MAKE_LITERAL_PAIR(const_tbl+48926, const_tbl+155176)
MAKE_LITERAL_PAIR(const_tbl+48909, const_tbl+155193)
MAKE_LITERAL_PAIR(const_tbl+48892, const_tbl+155210)
MAKE_LITERAL_PAIR(const_tbl+48875, const_tbl+155227)
MAKE_LITERAL_PAIR(const_tbl+48858, const_tbl+155244)
MAKE_LITERAL_PAIR(const_tbl+48841, const_tbl+155261)
MAKE_LITERAL_PAIR(const_tbl+48824, const_tbl+155278)
MAKE_LITERAL_PAIR(const_tbl+48807, const_tbl+155295)
MAKE_LITERAL_PAIR(const_tbl+48790, const_tbl+155312)
MAKE_LITERAL_PAIR(const_tbl+48773, const_tbl+155329)
MAKE_LITERAL_PAIR(const_tbl+48756, const_tbl+155346)
MAKE_LITERAL_PAIR(const_tbl+48739, const_tbl+155363)
MAKE_LITERAL_PAIR(const_tbl+48722, const_tbl+155380)
MAKE_LITERAL_PAIR(const_tbl+48705, const_tbl+155397)
MAKE_LITERAL_PAIR(const_tbl+48688, const_tbl+155414)
MAKE_LITERAL_PAIR(const_tbl+48671, const_tbl+155431)
MAKE_LITERAL_PAIR(const_tbl+48654, const_tbl+155448)
MAKE_LITERAL_PAIR(const_tbl+48637, const_tbl+155465)
MAKE_LITERAL_PAIR(const_tbl+48620, const_tbl+155482)
MAKE_LITERAL_PAIR(const_tbl+48603, const_tbl+155499)
MAKE_LITERAL_PAIR(const_tbl+48586, const_tbl+155516)
MAKE_LITERAL_PAIR(const_tbl+48569, const_tbl+155533)
MAKE_LITERAL_PAIR(const_tbl+48552, const_tbl+155550)
MAKE_LITERAL_PAIR(const_tbl+48535, const_tbl+155567)
MAKE_LITERAL_PAIR(const_tbl+48518, const_tbl+155584)
MAKE_LITERAL_PAIR(const_tbl+48501, const_tbl+155601)
MAKE_LITERAL_PAIR(const_tbl+48484, const_tbl+155618)
MAKE_LITERAL_PAIR(const_tbl+48467, const_tbl+155635)
MAKE_LITERAL_PAIR(const_tbl+48450, const_tbl+155652)
MAKE_LITERAL_PAIR(const_tbl+48433, const_tbl+155669)
MAKE_LITERAL_PAIR(const_tbl+48416, const_tbl+155686)
MAKE_LITERAL_PAIR(const_tbl+48399, const_tbl+155703)
MAKE_LITERAL_PAIR(const_tbl+48382, const_tbl+155720)
MAKE_LITERAL_PAIR(const_tbl+48365, const_tbl+155737)
MAKE_LITERAL_PAIR(const_tbl+48348, const_tbl+155754)
MAKE_LITERAL_PAIR(const_tbl+48331, const_tbl+155771)
MAKE_LITERAL_PAIR(const_tbl+48314, const_tbl+155788)
MAKE_LITERAL_PAIR(const_tbl+48297, const_tbl+155805)
MAKE_LITERAL_PAIR(const_tbl+48280, const_tbl+155822)
MAKE_LITERAL_PAIR(const_tbl+48263, const_tbl+155839)
MAKE_LITERAL_PAIR(const_tbl+48246, const_tbl+155856)
MAKE_LITERAL_PAIR(const_tbl+48229, const_tbl+155873)
MAKE_LITERAL_PAIR(const_tbl+48212, const_tbl+155890)
MAKE_LITERAL_PAIR(const_tbl+48195, const_tbl+155907)
MAKE_LITERAL_PAIR(const_tbl+48178, const_tbl+155924)
MAKE_LITERAL_PAIR(const_tbl+48161, const_tbl+155941)
MAKE_LITERAL_PAIR(const_tbl+48144, const_tbl+155958)
MAKE_LITERAL_PAIR(const_tbl+48127, const_tbl+155975)
MAKE_LITERAL_PAIR(const_tbl+48110, const_tbl+155992)
MAKE_LITERAL_PAIR(const_tbl+48093, const_tbl+156009)
MAKE_LITERAL_PAIR(const_tbl+48076, const_tbl+156026)
MAKE_LITERAL_PAIR(const_tbl+48059, const_tbl+156043)
MAKE_LITERAL_PAIR(const_tbl+48042, const_tbl+156060)
MAKE_LITERAL_PAIR(const_tbl+48025, const_tbl+156077)
MAKE_LITERAL_PAIR(const_tbl+48008, const_tbl+156094)
MAKE_LITERAL_PAIR(const_tbl+47991, const_tbl+156111)
MAKE_LITERAL_PAIR(const_tbl+47974, const_tbl+156128)
MAKE_LITERAL_PAIR(const_tbl+47957, const_tbl+156145)
MAKE_LITERAL_PAIR(const_tbl+47940, const_tbl+156162)
MAKE_LITERAL_PAIR(const_tbl+47923, const_tbl+156179)
MAKE_LITERAL_PAIR(const_tbl+47906, const_tbl+156196)
MAKE_LITERAL_PAIR(const_tbl+47889, const_tbl+156213)
MAKE_LITERAL_PAIR(const_tbl+47872, const_tbl+156230)
MAKE_LITERAL_PAIR(const_tbl+47855, const_tbl+156247)
MAKE_LITERAL_PAIR(const_tbl+47838, const_tbl+156264)
MAKE_LITERAL_PAIR(const_tbl+47821, const_tbl+156281)
MAKE_LITERAL_PAIR(const_tbl+47804, const_tbl+156298)
MAKE_LITERAL_PAIR(const_tbl+47787, const_tbl+156315)
MAKE_LITERAL_PAIR(const_tbl+47770, const_tbl+156332)
MAKE_LITERAL_PAIR(const_tbl+47753, const_tbl+156349)
MAKE_LITERAL_PAIR(const_tbl+47736, const_tbl+156366)
MAKE_LITERAL_PAIR(const_tbl+47719, const_tbl+156383)
MAKE_LITERAL_PAIR(const_tbl+47702, const_tbl+156400)
MAKE_LITERAL_PAIR(const_tbl+47685, const_tbl+156417)
MAKE_LITERAL_PAIR(const_tbl+47668, const_tbl+156434)
MAKE_LITERAL_PAIR(const_tbl+47651, const_tbl+156451)
MAKE_LITERAL_PAIR(const_tbl+47634, const_tbl+156468)
MAKE_LITERAL_PAIR(const_tbl+47617, const_tbl+156485)
MAKE_LITERAL_PAIR(const_tbl+47600, const_tbl+156502)
MAKE_LITERAL_PAIR(const_tbl+47583, const_tbl+156519)
MAKE_LITERAL_PAIR(const_tbl+47566, const_tbl+156536)
MAKE_LITERAL_PAIR(const_tbl+47549, const_tbl+156553)
MAKE_LITERAL_PAIR(const_tbl+47532, const_tbl+156570)
MAKE_LITERAL_PAIR(const_tbl+47515, const_tbl+156587)
MAKE_LITERAL_PAIR(const_tbl+47498, const_tbl+156604)
MAKE_LITERAL_PAIR(const_tbl+47481, const_tbl+156621)
MAKE_LITERAL_PAIR(const_tbl+47464, const_tbl+156638)
MAKE_LITERAL_PAIR(const_tbl+47447, const_tbl+156655)
MAKE_LITERAL_PAIR(const_tbl+47430, const_tbl+156672)
MAKE_LITERAL_PAIR(const_tbl+47413, const_tbl+156689)
MAKE_LITERAL_PAIR(const_tbl+47396, const_tbl+156706)
MAKE_LITERAL_PAIR(const_tbl+47379, const_tbl+156723)
MAKE_LITERAL_PAIR(const_tbl+47362, const_tbl+156740)
MAKE_LITERAL_PAIR(const_tbl+47345, const_tbl+156757)
MAKE_LITERAL_PAIR(const_tbl+47328, const_tbl+156774)
MAKE_LITERAL_PAIR(const_tbl+47311, const_tbl+156791)
MAKE_LITERAL_PAIR(const_tbl+47294, const_tbl+156808)
MAKE_LITERAL_PAIR(const_tbl+47277, const_tbl+156825)
MAKE_LITERAL_PAIR(const_tbl+47260, const_tbl+156842)
MAKE_LITERAL_PAIR(const_tbl+47243, const_tbl+156859)
MAKE_LITERAL_PAIR(const_tbl+47226, const_tbl+156876)
MAKE_LITERAL_PAIR(const_tbl+47209, const_tbl+156893)
MAKE_LITERAL_PAIR(const_tbl+47192, const_tbl+156910)
MAKE_LITERAL_PAIR(const_tbl+47175, const_tbl+156927)
MAKE_LITERAL_PAIR(const_tbl+47158, const_tbl+156944)
MAKE_LITERAL_PAIR(const_tbl+47141, const_tbl+156961)
MAKE_LITERAL_PAIR(const_tbl+47124, const_tbl+156978)
MAKE_LITERAL_PAIR(const_tbl+47107, const_tbl+156995)
MAKE_LITERAL_PAIR(const_tbl+47090, const_tbl+157012)
MAKE_LITERAL_PAIR(const_tbl+47073, const_tbl+157029)
MAKE_LITERAL_PAIR(const_tbl+47056, const_tbl+157046)
MAKE_LITERAL_PAIR(const_tbl+47039, const_tbl+157063)
MAKE_LITERAL_PAIR(const_tbl+47022, const_tbl+157080)
MAKE_LITERAL_PAIR(const_tbl+47005, const_tbl+157097)
MAKE_LITERAL_PAIR(const_tbl+46988, const_tbl+157114)
MAKE_LITERAL_PAIR(const_tbl+46971, const_tbl+157131)
MAKE_LITERAL_PAIR(const_tbl+46954, const_tbl+157148)
MAKE_LITERAL_PAIR(const_tbl+46937, const_tbl+157165)
MAKE_LITERAL_PAIR(const_tbl+46920, const_tbl+157182)
MAKE_LITERAL_PAIR(const_tbl+46903, const_tbl+157199)
MAKE_LITERAL_PAIR(const_tbl+46886, const_tbl+157216)
MAKE_LITERAL_PAIR(const_tbl+46869, const_tbl+157233)
MAKE_LITERAL_PAIR(const_tbl+46852, const_tbl+157250)
MAKE_LITERAL_PAIR(const_tbl+46835, const_tbl+157267)
MAKE_LITERAL_PAIR(const_tbl+46818, const_tbl+157284)
MAKE_LITERAL_PAIR(const_tbl+46801, const_tbl+157301)
MAKE_LITERAL_PAIR(const_tbl+46784, const_tbl+157318)
MAKE_LITERAL_PAIR(const_tbl+46767, const_tbl+157335)
MAKE_LITERAL_PAIR(const_tbl+46750, const_tbl+157352)
MAKE_LITERAL_PAIR(const_tbl+46733, const_tbl+157369)
MAKE_LITERAL_PAIR(const_tbl+46716, const_tbl+157386)
MAKE_LITERAL_PAIR(const_tbl+46699, const_tbl+157403)
MAKE_LITERAL_PAIR(const_tbl+46682, const_tbl+157420)
MAKE_LITERAL_PAIR(const_tbl+46665, const_tbl+157437)
MAKE_LITERAL_PAIR(const_tbl+46648, const_tbl+157454)
MAKE_LITERAL_PAIR(const_tbl+46631, const_tbl+157471)
MAKE_LITERAL_PAIR(const_tbl+46614, const_tbl+157488)
MAKE_LITERAL_PAIR(const_tbl+46597, const_tbl+157505)
MAKE_LITERAL_PAIR(const_tbl+46580, const_tbl+157522)
MAKE_LITERAL_PAIR(const_tbl+46563, const_tbl+157539)
MAKE_LITERAL_PAIR(const_tbl+46546, const_tbl+157556)
MAKE_LITERAL_PAIR(const_tbl+46529, const_tbl+157573)
MAKE_LITERAL_PAIR(const_tbl+46512, const_tbl+157590)
MAKE_LITERAL_PAIR(const_tbl+46495, const_tbl+157607)
MAKE_LITERAL_PAIR(const_tbl+46478, const_tbl+157624)
MAKE_LITERAL_PAIR(const_tbl+46461, const_tbl+157641)
MAKE_LITERAL_PAIR(const_tbl+46444, const_tbl+157658)
MAKE_LITERAL_PAIR(const_tbl+46427, const_tbl+157675)
MAKE_LITERAL_PAIR(const_tbl+46410, const_tbl+157692)
MAKE_LITERAL_PAIR(const_tbl+46393, const_tbl+157709)
MAKE_LITERAL_PAIR(const_tbl+46376, const_tbl+157726)
MAKE_LITERAL_PAIR(const_tbl+46359, const_tbl+157743)
MAKE_LITERAL_PAIR(const_tbl+46342, const_tbl+157760)
MAKE_LITERAL_PAIR(const_tbl+46325, const_tbl+157777)
MAKE_LITERAL_PAIR(const_tbl+46308, const_tbl+157794)
MAKE_LITERAL_PAIR(const_tbl+46291, const_tbl+157811)
MAKE_LITERAL_PAIR(const_tbl+46274, const_tbl+157828)
MAKE_LITERAL_PAIR(const_tbl+46257, const_tbl+157845)
MAKE_LITERAL_PAIR(const_tbl+46240, const_tbl+157862)
MAKE_LITERAL_PAIR(const_tbl+46223, const_tbl+157879)
MAKE_LITERAL_PAIR(const_tbl+46206, const_tbl+157896)
MAKE_LITERAL_PAIR(const_tbl+46189, const_tbl+157913)
MAKE_LITERAL_PAIR(const_tbl+46172, const_tbl+157930)
MAKE_LITERAL_PAIR(const_tbl+46155, const_tbl+157947)
MAKE_LITERAL_PAIR(const_tbl+46138, const_tbl+157964)
MAKE_LITERAL_PAIR(const_tbl+46121, const_tbl+157981)
MAKE_LITERAL_PAIR(const_tbl+46104, const_tbl+157998)
MAKE_LITERAL_PAIR(const_tbl+46087, const_tbl+158015)
MAKE_LITERAL_PAIR(const_tbl+46070, const_tbl+158032)
MAKE_LITERAL_PAIR(const_tbl+46053, const_tbl+158049)
MAKE_LITERAL_PAIR(const_tbl+46036, const_tbl+158066)
MAKE_LITERAL_PAIR(const_tbl+46019, const_tbl+158083)
MAKE_LITERAL_PAIR(const_tbl+46002, const_tbl+158100)
MAKE_LITERAL_PAIR(const_tbl+45985, const_tbl+158117)
MAKE_LITERAL_PAIR(const_tbl+45968, const_tbl+158134)
MAKE_LITERAL_PAIR(const_tbl+45951, const_tbl+158151)
MAKE_LITERAL_PAIR(const_tbl+45934, const_tbl+158168)
MAKE_LITERAL_PAIR(const_tbl+45917, const_tbl+158185)
MAKE_LITERAL_PAIR(const_tbl+45900, const_tbl+158202)
MAKE_LITERAL_PAIR(const_tbl+45883, const_tbl+158219)
MAKE_LITERAL_PAIR(const_tbl+45866, const_tbl+158236)
MAKE_LITERAL_PAIR(const_tbl+45849, const_tbl+158253)
MAKE_LITERAL_PAIR(const_tbl+45832, const_tbl+158270)
MAKE_LITERAL_PAIR(const_tbl+45815, const_tbl+158287)
MAKE_LITERAL_PAIR(const_tbl+45798, const_tbl+158304)
MAKE_LITERAL_PAIR(const_tbl+45781, const_tbl+158321)
MAKE_LITERAL_PAIR(const_tbl+45764, const_tbl+158338)
MAKE_LITERAL_PAIR(const_tbl+45747, const_tbl+158355)
MAKE_LITERAL_PAIR(const_tbl+45730, const_tbl+158372)
MAKE_LITERAL_PAIR(const_tbl+45713, const_tbl+158389)
MAKE_LITERAL_PAIR(const_tbl+45696, const_tbl+158406)
MAKE_LITERAL_PAIR(const_tbl+45679, const_tbl+158423)
MAKE_LITERAL_PAIR(const_tbl+45662, const_tbl+158440)
MAKE_LITERAL_PAIR(const_tbl+45645, const_tbl+158457)
MAKE_LITERAL_PAIR(const_tbl+45628, const_tbl+158474)
MAKE_LITERAL_PAIR(const_tbl+45611, const_tbl+158491)
MAKE_LITERAL_PAIR(const_tbl+45594, const_tbl+158508)
MAKE_LITERAL_PAIR(const_tbl+45577, const_tbl+158525)
MAKE_LITERAL_PAIR(const_tbl+45560, const_tbl+158542)
MAKE_LITERAL_PAIR(const_tbl+45543, const_tbl+158559)
MAKE_LITERAL_PAIR(const_tbl+45526, const_tbl+158576)
MAKE_LITERAL_PAIR(const_tbl+45509, const_tbl+158593)
MAKE_LITERAL_PAIR(const_tbl+45492, const_tbl+158610)
MAKE_LITERAL_PAIR(const_tbl+45475, const_tbl+158627)
MAKE_LITERAL_PAIR(const_tbl+45458, const_tbl+158644)
MAKE_LITERAL_PAIR(const_tbl+45441, const_tbl+158661)
MAKE_LITERAL_PAIR(const_tbl+45424, const_tbl+158678)
MAKE_LITERAL_PAIR(const_tbl+45407, const_tbl+158695)
MAKE_LITERAL_PAIR(const_tbl+45390, const_tbl+158712)
MAKE_LITERAL_PAIR(const_tbl+45373, const_tbl+158729)
MAKE_LITERAL_PAIR(const_tbl+45356, const_tbl+158746)
MAKE_LITERAL_PAIR(const_tbl+45339, const_tbl+158763)
MAKE_LITERAL_PAIR(const_tbl+45322, const_tbl+158780)
MAKE_LITERAL_PAIR(const_tbl+45305, const_tbl+158797)
MAKE_LITERAL_PAIR(const_tbl+45288, const_tbl+158814)
MAKE_LITERAL_PAIR(const_tbl+45271, const_tbl+158831)
MAKE_LITERAL_PAIR(const_tbl+45254, const_tbl+158848)
MAKE_LITERAL_PAIR(const_tbl+45237, const_tbl+158865)
MAKE_LITERAL_PAIR(const_tbl+45220, const_tbl+158882)
MAKE_LITERAL_PAIR(const_tbl+45203, const_tbl+158899)
MAKE_LITERAL_PAIR(const_tbl+45186, const_tbl+158916)
MAKE_LITERAL_PAIR(const_tbl+45169, const_tbl+158933)
MAKE_LITERAL_PAIR(const_tbl+45152, const_tbl+158950)
MAKE_LITERAL_PAIR(const_tbl+45135, const_tbl+158967)
MAKE_LITERAL_PAIR(const_tbl+45118, const_tbl+158984)
MAKE_LITERAL_PAIR(const_tbl+45101, const_tbl+159001)
MAKE_LITERAL_PAIR(const_tbl+45084, const_tbl+159018)
MAKE_LITERAL_PAIR(const_tbl+45067, const_tbl+159035)
MAKE_LITERAL_PAIR(const_tbl+45050, const_tbl+159052)
MAKE_LITERAL_PAIR(const_tbl+45033, const_tbl+159069)
MAKE_LITERAL_PAIR(const_tbl+45016, const_tbl+159086)
MAKE_LITERAL_PAIR(const_tbl+44999, const_tbl+159103)
MAKE_LITERAL_PAIR(const_tbl+44982, const_tbl+159120)
MAKE_LITERAL_PAIR(const_tbl+44965, const_tbl+159137)
MAKE_LITERAL_PAIR(const_tbl+44948, const_tbl+159154)
MAKE_LITERAL_PAIR(const_tbl+44931, const_tbl+159171)
MAKE_LITERAL_PAIR(const_tbl+44914, const_tbl+159188)
MAKE_LITERAL_PAIR(const_tbl+44897, const_tbl+159205)
MAKE_LITERAL_PAIR(const_tbl+44880, const_tbl+159222)
MAKE_LITERAL_PAIR(const_tbl+44863, const_tbl+159239)
MAKE_LITERAL_PAIR(const_tbl+44846, const_tbl+159256)
MAKE_LITERAL_PAIR(const_tbl+44829, const_tbl+159273)
MAKE_LITERAL_PAIR(const_tbl+44812, const_tbl+159290)
MAKE_LITERAL_PAIR(const_tbl+44795, const_tbl+159307)
MAKE_LITERAL_PAIR(const_tbl+44778, const_tbl+159324)
MAKE_LITERAL_PAIR(const_tbl+44761, const_tbl+159341)
MAKE_LITERAL_PAIR(const_tbl+44744, const_tbl+159358)
MAKE_LITERAL_PAIR(const_tbl+44727, const_tbl+159375)
MAKE_LITERAL_PAIR(const_tbl+44710, const_tbl+159392)
MAKE_LITERAL_PAIR(const_tbl+44693, const_tbl+159409)
MAKE_LITERAL_PAIR(const_tbl+44676, const_tbl+159426)
MAKE_LITERAL_PAIR(const_tbl+44659, const_tbl+159443)
MAKE_LITERAL_PAIR(const_tbl+44642, const_tbl+159460)
MAKE_LITERAL_PAIR(const_tbl+44625, const_tbl+159477)
MAKE_LITERAL_PAIR(const_tbl+44608, const_tbl+159494)
MAKE_LITERAL_PAIR(const_tbl+44591, const_tbl+159511)
MAKE_LITERAL_PAIR(const_tbl+44574, const_tbl+159528)
MAKE_LITERAL_PAIR(const_tbl+44557, const_tbl+159545)
MAKE_LITERAL_PAIR(const_tbl+44540, const_tbl+159562)
MAKE_LITERAL_PAIR(const_tbl+44523, const_tbl+159579)
MAKE_LITERAL_PAIR(const_tbl+44506, const_tbl+159596)
MAKE_LITERAL_PAIR(const_tbl+44489, const_tbl+159613)
MAKE_LITERAL_PAIR(const_tbl+44472, const_tbl+159630)
MAKE_LITERAL_PAIR(const_tbl+44455, const_tbl+159647)
MAKE_LITERAL_PAIR(const_tbl+44438, const_tbl+159664)
MAKE_LITERAL_PAIR(const_tbl+44421, const_tbl+159681)
MAKE_LITERAL_PAIR(const_tbl+44404, const_tbl+159698)
MAKE_LITERAL_PAIR(const_tbl+44387, const_tbl+159715)
MAKE_LITERAL_PAIR(const_tbl+44370, const_tbl+159732)
MAKE_LITERAL_PAIR(const_tbl+44353, const_tbl+159749)
MAKE_LITERAL_PAIR(const_tbl+44336, const_tbl+159766)
MAKE_LITERAL_PAIR(const_tbl+44319, const_tbl+159783)
MAKE_LITERAL_PAIR(const_tbl+44302, const_tbl+159800)
MAKE_LITERAL_PAIR(const_tbl+44285, const_tbl+159817)
MAKE_LITERAL_PAIR(const_tbl+44268, const_tbl+159834)
MAKE_LITERAL_PAIR(const_tbl+44251, const_tbl+159851)
MAKE_LITERAL_PAIR(const_tbl+44234, const_tbl+159868)
MAKE_LITERAL_PAIR(const_tbl+44217, const_tbl+159885)
MAKE_LITERAL_PAIR(const_tbl+44200, const_tbl+159902)
MAKE_LITERAL_PAIR(const_tbl+44183, const_tbl+159919)
MAKE_LITERAL_PAIR(const_tbl+44166, const_tbl+159936)
MAKE_LITERAL_PAIR(const_tbl+44149, const_tbl+159953)
MAKE_LITERAL_PAIR(const_tbl+44132, const_tbl+159970)
MAKE_LITERAL_PAIR(const_tbl+44115, const_tbl+159987)
MAKE_LITERAL_PAIR(const_tbl+44098, const_tbl+160004)
MAKE_LITERAL_PAIR(const_tbl+44081, const_tbl+160021)
MAKE_LITERAL_PAIR(const_tbl+44064, const_tbl+160038)
MAKE_LITERAL_PAIR(const_tbl+44047, const_tbl+160055)
MAKE_LITERAL_PAIR(const_tbl+44030, const_tbl+160072)
MAKE_LITERAL_PAIR(const_tbl+44013, const_tbl+160089)
MAKE_LITERAL_PAIR(const_tbl+43996, const_tbl+160106)
MAKE_LITERAL_PAIR(const_tbl+43979, const_tbl+160123)
MAKE_LITERAL_PAIR(const_tbl+43962, const_tbl+160140)
MAKE_LITERAL_PAIR(const_tbl+43945, const_tbl+160157)
MAKE_LITERAL_PAIR(const_tbl+43928, const_tbl+160174)
MAKE_LITERAL_PAIR(const_tbl+43911, const_tbl+160191)
MAKE_LITERAL_PAIR(const_tbl+43894, const_tbl+160208)
MAKE_LITERAL_PAIR(const_tbl+43877, const_tbl+160225)
MAKE_LITERAL_PAIR(const_tbl+43860, const_tbl+160242)
MAKE_LITERAL_PAIR(const_tbl+43843, const_tbl+160259)
MAKE_LITERAL_PAIR(const_tbl+43826, const_tbl+160276)
MAKE_LITERAL_PAIR(const_tbl+43809, const_tbl+160293)
MAKE_LITERAL_PAIR(const_tbl+43792, const_tbl+160310)
MAKE_LITERAL_PAIR(const_tbl+43775, const_tbl+160327)
MAKE_LITERAL_PAIR(const_tbl+43758, const_tbl+160344)
MAKE_LITERAL_PAIR(const_tbl+43741, const_tbl+160361)
MAKE_LITERAL_PAIR(const_tbl+43724, const_tbl+160378)
MAKE_LITERAL_PAIR(const_tbl+43707, const_tbl+160395)
MAKE_LITERAL_PAIR(const_tbl+43690, const_tbl+160412)
MAKE_LITERAL_PAIR(const_tbl+43673, const_tbl+160429)
MAKE_LITERAL_PAIR(const_tbl+43656, const_tbl+160446)
MAKE_LITERAL_PAIR(const_tbl+43639, const_tbl+160463)
MAKE_LITERAL_PAIR(const_tbl+43622, const_tbl+160480)
MAKE_LITERAL_PAIR(const_tbl+43605, const_tbl+160497)
MAKE_LITERAL_PAIR(const_tbl+43588, const_tbl+160514)
MAKE_LITERAL_PAIR(const_tbl+43571, const_tbl+160531)
MAKE_LITERAL_PAIR(const_tbl+43554, const_tbl+160548)
MAKE_LITERAL_PAIR(const_tbl+43537, const_tbl+160565)
MAKE_LITERAL_PAIR(const_tbl+43520, const_tbl+160582)
MAKE_LITERAL_PAIR(const_tbl+43503, const_tbl+160599)
MAKE_LITERAL_PAIR(const_tbl+43486, const_tbl+160616)
MAKE_LITERAL_PAIR(const_tbl+43469, const_tbl+160633)
MAKE_LITERAL_PAIR(const_tbl+43452, const_tbl+160650)
MAKE_LITERAL_PAIR(const_tbl+43435, const_tbl+160667)
MAKE_LITERAL_PAIR(const_tbl+43418, const_tbl+160684)
MAKE_LITERAL_PAIR(const_tbl+43401, const_tbl+160701)
MAKE_LITERAL_PAIR(const_tbl+43384, const_tbl+160718)
MAKE_LITERAL_PAIR(const_tbl+43367, const_tbl+160735)
MAKE_LITERAL_PAIR(const_tbl+43350, const_tbl+160752)
MAKE_LITERAL_PAIR(const_tbl+43333, const_tbl+160769)
MAKE_LITERAL_PAIR(const_tbl+43316, const_tbl+160786)
MAKE_LITERAL_PAIR(const_tbl+43299, const_tbl+160803)
MAKE_LITERAL_PAIR(const_tbl+43282, const_tbl+160820)
MAKE_LITERAL_PAIR(const_tbl+43265, const_tbl+160837)
MAKE_LITERAL_PAIR(const_tbl+43248, const_tbl+160854)
MAKE_LITERAL_PAIR(const_tbl+43231, const_tbl+160871)
MAKE_LITERAL_PAIR(const_tbl+43214, const_tbl+160888)
MAKE_LITERAL_PAIR(const_tbl+43197, const_tbl+160905)
MAKE_LITERAL_PAIR(const_tbl+43180, const_tbl+160922)
MAKE_LITERAL_PAIR(const_tbl+43163, const_tbl+160939)
MAKE_LITERAL_PAIR(const_tbl+43146, const_tbl+160956)
MAKE_LITERAL_PAIR(const_tbl+43129, const_tbl+160973)
MAKE_LITERAL_PAIR(const_tbl+43112, const_tbl+160990)
MAKE_LITERAL_PAIR(const_tbl+43095, const_tbl+161007)
MAKE_LITERAL_PAIR(const_tbl+43078, const_tbl+161024)
MAKE_LITERAL_PAIR(const_tbl+43061, const_tbl+161041)
MAKE_LITERAL_PAIR(const_tbl+43044, const_tbl+161058)
MAKE_LITERAL_PAIR(const_tbl+43027, const_tbl+161075)
MAKE_LITERAL_PAIR(const_tbl+43010, const_tbl+161092)
MAKE_LITERAL_PAIR(const_tbl+42993, const_tbl+161109)
MAKE_LITERAL_PAIR(const_tbl+42976, const_tbl+161126)
MAKE_LITERAL_PAIR(const_tbl+42959, const_tbl+161143)
MAKE_LITERAL_PAIR(const_tbl+42942, const_tbl+161160)
MAKE_LITERAL_PAIR(const_tbl+42925, const_tbl+161177)
MAKE_LITERAL_PAIR(const_tbl+42908, const_tbl+161194)
MAKE_LITERAL_PAIR(const_tbl+42891, const_tbl+161211)
MAKE_LITERAL_PAIR(const_tbl+42874, const_tbl+161228)
MAKE_LITERAL_PAIR(const_tbl+42857, const_tbl+161245)
MAKE_LITERAL_PAIR(const_tbl+42840, const_tbl+161262)
MAKE_LITERAL_PAIR(const_tbl+42823, const_tbl+161279)
MAKE_LITERAL_PAIR(const_tbl+42806, const_tbl+161296)
MAKE_LITERAL_PAIR(const_tbl+42789, const_tbl+161313)
MAKE_LITERAL_PAIR(const_tbl+42772, const_tbl+161330)
MAKE_LITERAL_PAIR(const_tbl+42755, const_tbl+161347)
MAKE_LITERAL_PAIR(const_tbl+42738, const_tbl+161364)
MAKE_LITERAL_PAIR(const_tbl+42721, const_tbl+161381)
MAKE_LITERAL_PAIR(const_tbl+42704, const_tbl+161398)
MAKE_LITERAL_PAIR(const_tbl+42687, const_tbl+161415)
MAKE_LITERAL_PAIR(const_tbl+42670, const_tbl+161432)
MAKE_LITERAL_PAIR(const_tbl+42653, const_tbl+161449)
MAKE_LITERAL_PAIR(const_tbl+42636, const_tbl+161466)
MAKE_LITERAL_PAIR(const_tbl+42619, const_tbl+161483)
MAKE_LITERAL_PAIR(const_tbl+42602, const_tbl+161500)
MAKE_LITERAL_PAIR(const_tbl+42585, const_tbl+161517)
MAKE_LITERAL_PAIR(const_tbl+42568, const_tbl+161534)
MAKE_LITERAL_PAIR(const_tbl+42551, const_tbl+161551)
MAKE_LITERAL_PAIR(const_tbl+42534, const_tbl+161568)
MAKE_LITERAL_PAIR(const_tbl+42517, const_tbl+161585)
MAKE_LITERAL_PAIR(const_tbl+42500, const_tbl+161602)
MAKE_LITERAL_PAIR(const_tbl+42483, const_tbl+161619)
MAKE_LITERAL_PAIR(const_tbl+42466, const_tbl+161636)
MAKE_LITERAL_PAIR(const_tbl+42449, const_tbl+161653)
MAKE_LITERAL_PAIR(const_tbl+42432, const_tbl+161670)
MAKE_LITERAL_PAIR(const_tbl+42415, const_tbl+161687)
MAKE_LITERAL_PAIR(const_tbl+42398, const_tbl+161704)
MAKE_LITERAL_PAIR(const_tbl+42381, const_tbl+161721)
MAKE_LITERAL_PAIR(const_tbl+42364, const_tbl+161738)
MAKE_LITERAL_PAIR(const_tbl+42347, const_tbl+161755)
MAKE_LITERAL_PAIR(const_tbl+42330, const_tbl+161772)
MAKE_LITERAL_PAIR(const_tbl+42313, const_tbl+161789)
MAKE_LITERAL_PAIR(const_tbl+42296, const_tbl+161806)
MAKE_LITERAL_PAIR(const_tbl+42279, const_tbl+161823)
MAKE_LITERAL_PAIR(const_tbl+42262, const_tbl+161840)
MAKE_LITERAL_PAIR(const_tbl+42245, const_tbl+161857)
MAKE_LITERAL_PAIR(const_tbl+42228, const_tbl+161874)
MAKE_LITERAL_PAIR(const_tbl+42211, const_tbl+161891)
MAKE_LITERAL_PAIR(const_tbl+42194, const_tbl+161908)
MAKE_LITERAL_PAIR(const_tbl+42177, const_tbl+161925)
MAKE_LITERAL_PAIR(const_tbl+42160, const_tbl+161942)
MAKE_LITERAL_PAIR(const_tbl+42143, const_tbl+161959)
MAKE_LITERAL_PAIR(const_tbl+42126, const_tbl+161976)
MAKE_LITERAL_PAIR(const_tbl+42109, const_tbl+161993)
MAKE_LITERAL_PAIR(const_tbl+42092, const_tbl+162010)
MAKE_LITERAL_PAIR(const_tbl+42075, const_tbl+162027)
MAKE_LITERAL_PAIR(const_tbl+42058, const_tbl+162044)
MAKE_LITERAL_PAIR(const_tbl+42041, const_tbl+162061)
MAKE_LITERAL_PAIR(const_tbl+42024, const_tbl+162078)
MAKE_LITERAL_PAIR(const_tbl+42007, const_tbl+162095)
MAKE_LITERAL_PAIR(const_tbl+41990, const_tbl+162112)
MAKE_LITERAL_PAIR(const_tbl+41973, const_tbl+162129)
MAKE_LITERAL_PAIR(const_tbl+41956, const_tbl+162146)
MAKE_LITERAL_PAIR(const_tbl+41939, const_tbl+162163)
MAKE_LITERAL_PAIR(const_tbl+41922, const_tbl+162180)
MAKE_LITERAL_PAIR(const_tbl+41905, const_tbl+162197)
MAKE_LITERAL_PAIR(const_tbl+41888, const_tbl+162214)
MAKE_LITERAL_PAIR(const_tbl+41871, const_tbl+162231)
MAKE_LITERAL_PAIR(const_tbl+41854, const_tbl+162248)
MAKE_LITERAL_PAIR(const_tbl+41837, const_tbl+162265)
MAKE_LITERAL_PAIR(const_tbl+41820, const_tbl+162282)
MAKE_LITERAL_PAIR(const_tbl+41803, const_tbl+162299)
MAKE_LITERAL_PAIR(const_tbl+41786, const_tbl+162316)
MAKE_LITERAL_PAIR(const_tbl+41769, const_tbl+162333)
MAKE_LITERAL_PAIR(const_tbl+41752, const_tbl+162350)
MAKE_LITERAL_PAIR(const_tbl+41735, const_tbl+162367)
MAKE_LITERAL_PAIR(const_tbl+41718, const_tbl+162384)
MAKE_LITERAL_PAIR(const_tbl+41701, const_tbl+162401)
MAKE_LITERAL_PAIR(const_tbl+41684, const_tbl+162418)
MAKE_LITERAL_PAIR(const_tbl+41667, const_tbl+162435)
MAKE_LITERAL_PAIR(const_tbl+41650, const_tbl+162452)
MAKE_LITERAL_PAIR(const_tbl+41633, const_tbl+162469)
MAKE_LITERAL_PAIR(const_tbl+41616, const_tbl+162486)
MAKE_LITERAL_PAIR(const_tbl+41599, const_tbl+162503)
MAKE_LITERAL_PAIR(const_tbl+41582, const_tbl+162520)
MAKE_LITERAL_PAIR(const_tbl+41565, const_tbl+162537)
MAKE_LITERAL_PAIR(const_tbl+41548, const_tbl+162554)
MAKE_LITERAL_PAIR(const_tbl+41531, const_tbl+162571)
MAKE_LITERAL_PAIR(const_tbl+41514, const_tbl+162588)
MAKE_LITERAL_PAIR(const_tbl+41497, const_tbl+162605)
MAKE_LITERAL_PAIR(const_tbl+41480, const_tbl+162622)
MAKE_LITERAL_PAIR(const_tbl+41463, const_tbl+162639)
MAKE_LITERAL_PAIR(const_tbl+41446, const_tbl+162656)
MAKE_LITERAL_PAIR(const_tbl+41429, const_tbl+162673)
MAKE_LITERAL_PAIR(const_tbl+41412, const_tbl+162690)
MAKE_LITERAL_PAIR(const_tbl+41395, const_tbl+162707)
MAKE_LITERAL_PAIR(const_tbl+41378, const_tbl+162724)
MAKE_LITERAL_PAIR(const_tbl+41361, const_tbl+162741)
MAKE_LITERAL_PAIR(const_tbl+41344, const_tbl+162758)
MAKE_LITERAL_PAIR(const_tbl+41327, const_tbl+162775)
MAKE_LITERAL_PAIR(const_tbl+41310, const_tbl+162792)
MAKE_LITERAL_PAIR(const_tbl+41293, const_tbl+162809)
MAKE_LITERAL_PAIR(const_tbl+41276, const_tbl+162826)
MAKE_LITERAL_PAIR(const_tbl+41259, const_tbl+162843)
MAKE_LITERAL_PAIR(const_tbl+41242, const_tbl+162860)
MAKE_LITERAL_PAIR(const_tbl+41225, const_tbl+162877)
MAKE_LITERAL_PAIR(const_tbl+41208, const_tbl+162894)
MAKE_LITERAL_PAIR(const_tbl+41191, const_tbl+162911)
MAKE_LITERAL_PAIR(const_tbl+41174, const_tbl+162928)
MAKE_LITERAL_PAIR(const_tbl+41157, const_tbl+162945)
MAKE_LITERAL_PAIR(const_tbl+41140, const_tbl+162962)
MAKE_LITERAL_PAIR(const_tbl+41123, const_tbl+162979)
MAKE_LITERAL_PAIR(const_tbl+41106, const_tbl+162996)
MAKE_LITERAL_PAIR(const_tbl+41089, const_tbl+163013)
MAKE_LITERAL_PAIR(const_tbl+41072, const_tbl+163030)
MAKE_LITERAL_PAIR(const_tbl+41055, const_tbl+163047)
MAKE_LITERAL_PAIR(const_tbl+41038, const_tbl+163064)
MAKE_LITERAL_PAIR(const_tbl+41021, const_tbl+163081)
MAKE_LITERAL_PAIR(const_tbl+41004, const_tbl+163098)
MAKE_LITERAL_PAIR(const_tbl+40987, const_tbl+163115)
MAKE_LITERAL_PAIR(const_tbl+40970, const_tbl+163132)
MAKE_LITERAL_PAIR(const_tbl+40953, const_tbl+163149)
MAKE_LITERAL_PAIR(const_tbl+40936, const_tbl+163166)
MAKE_LITERAL_PAIR(const_tbl+40919, const_tbl+163183)
MAKE_LITERAL_PAIR(const_tbl+40902, const_tbl+163200)
MAKE_LITERAL_PAIR(const_tbl+40885, const_tbl+163217)
MAKE_LITERAL_PAIR(const_tbl+40868, const_tbl+163234)
MAKE_LITERAL_PAIR(const_tbl+40851, const_tbl+163251)
MAKE_LITERAL_PAIR(const_tbl+40834, const_tbl+163268)
MAKE_LITERAL_PAIR(const_tbl+40817, const_tbl+163285)
MAKE_LITERAL_PAIR(const_tbl+40800, const_tbl+163302)
MAKE_LITERAL_PAIR(const_tbl+40783, const_tbl+163319)
MAKE_LITERAL_PAIR(const_tbl+40766, const_tbl+163336)
MAKE_LITERAL_PAIR(const_tbl+40749, const_tbl+163353)
MAKE_LITERAL_PAIR(const_tbl+40732, const_tbl+163370)
MAKE_LITERAL_PAIR(const_tbl+40715, const_tbl+163387)
MAKE_LITERAL_PAIR(const_tbl+40698, const_tbl+163404)
MAKE_LITERAL_PAIR(const_tbl+40681, const_tbl+163421)
MAKE_LITERAL_PAIR(const_tbl+40664, const_tbl+163438)
MAKE_LITERAL_PAIR(const_tbl+40647, const_tbl+163455)
MAKE_LITERAL_PAIR(const_tbl+40630, const_tbl+163472)
MAKE_LITERAL_PAIR(const_tbl+40613, const_tbl+163489)
MAKE_LITERAL_PAIR(const_tbl+40596, const_tbl+163506)
MAKE_LITERAL_PAIR(const_tbl+40579, const_tbl+163523)
MAKE_LITERAL_PAIR(const_tbl+40562, const_tbl+163540)
MAKE_LITERAL_PAIR(const_tbl+40545, const_tbl+163557)
MAKE_LITERAL_PAIR(const_tbl+40528, const_tbl+163574)
MAKE_LITERAL_PAIR(const_tbl+40511, const_tbl+163591)
MAKE_LITERAL_PAIR(const_tbl+40494, const_tbl+163608)
MAKE_LITERAL_PAIR(const_tbl+40477, const_tbl+163625)
MAKE_LITERAL_PAIR(const_tbl+40460, const_tbl+163642)
MAKE_LITERAL_PAIR(const_tbl+40443, const_tbl+163659)
MAKE_LITERAL_PAIR(const_tbl+40426, const_tbl+163676)
MAKE_LITERAL_PAIR(const_tbl+40409, const_tbl+163693)
MAKE_LITERAL_PAIR(const_tbl+40392, const_tbl+163710)
MAKE_LITERAL_PAIR(const_tbl+40375, const_tbl+163727)
MAKE_LITERAL_PAIR(const_tbl+40358, const_tbl+163744)
MAKE_LITERAL_PAIR(const_tbl+40341, const_tbl+163761)
MAKE_LITERAL_PAIR(const_tbl+40324, const_tbl+163778)
MAKE_LITERAL_PAIR(const_tbl+40307, const_tbl+163795)
MAKE_LITERAL_PAIR(const_tbl+40290, const_tbl+163812)
MAKE_LITERAL_PAIR(const_tbl+40273, const_tbl+163829)
MAKE_LITERAL_PAIR(const_tbl+40256, const_tbl+163846)
MAKE_LITERAL_PAIR(const_tbl+40239, const_tbl+163863)
MAKE_LITERAL_PAIR(const_tbl+40222, const_tbl+163880)
MAKE_LITERAL_PAIR(const_tbl+40205, const_tbl+163897)
MAKE_LITERAL_PAIR(const_tbl+40188, const_tbl+163914)
MAKE_LITERAL_PAIR(const_tbl+40171, const_tbl+163931)
MAKE_LITERAL_PAIR(const_tbl+40154, const_tbl+163948)
MAKE_LITERAL_PAIR(const_tbl+40137, const_tbl+163965)
MAKE_LITERAL_PAIR(const_tbl+40120, const_tbl+163982)
MAKE_LITERAL_PAIR(const_tbl+40103, const_tbl+163999)
MAKE_LITERAL_PAIR(const_tbl+40086, const_tbl+164016)
MAKE_LITERAL_PAIR(const_tbl+40069, const_tbl+164033)
MAKE_LITERAL_PAIR(const_tbl+40052, const_tbl+164050)
MAKE_LITERAL_PAIR(const_tbl+40035, const_tbl+164067)
MAKE_LITERAL_PAIR(const_tbl+40018, const_tbl+164084)
MAKE_LITERAL_PAIR(const_tbl+40001, const_tbl+164101)
MAKE_LITERAL_PAIR(const_tbl+39984, const_tbl+164118)
MAKE_LITERAL_PAIR(const_tbl+39967, const_tbl+164135)
MAKE_LITERAL_PAIR(const_tbl+39950, const_tbl+164152)
MAKE_LITERAL_PAIR(const_tbl+39933, const_tbl+164169)
MAKE_LITERAL_PAIR(const_tbl+39916, const_tbl+164186)
MAKE_LITERAL_PAIR(const_tbl+39899, const_tbl+164203)
MAKE_LITERAL_PAIR(const_tbl+39882, const_tbl+164220)
MAKE_LITERAL_PAIR(const_tbl+39865, const_tbl+164237)
MAKE_LITERAL_PAIR(const_tbl+39848, const_tbl+164254)
MAKE_LITERAL_PAIR(const_tbl+39831, const_tbl+164271)
MAKE_LITERAL_PAIR(const_tbl+39814, const_tbl+164288)
MAKE_LITERAL_PAIR(const_tbl+39797, const_tbl+164305)
MAKE_LITERAL_PAIR(const_tbl+39780, const_tbl+164322)
MAKE_LITERAL_PAIR(const_tbl+39763, const_tbl+164339)
MAKE_LITERAL_PAIR(const_tbl+39746, const_tbl+164356)
MAKE_LITERAL_PAIR(const_tbl+39729, const_tbl+164373)
MAKE_LITERAL_PAIR(const_tbl+39712, const_tbl+164390)
MAKE_LITERAL_PAIR(const_tbl+39695, const_tbl+164407)
MAKE_LITERAL_PAIR(const_tbl+39678, const_tbl+164424)
MAKE_LITERAL_PAIR(const_tbl+39661, const_tbl+164441)
MAKE_LITERAL_PAIR(const_tbl+39644, const_tbl+164458)
MAKE_LITERAL_PAIR(const_tbl+39627, const_tbl+164475)
MAKE_LITERAL_PAIR(const_tbl+39610, const_tbl+164492)
MAKE_LITERAL_PAIR(const_tbl+39593, const_tbl+164509)
MAKE_LITERAL_PAIR(const_tbl+39576, const_tbl+164526)
MAKE_LITERAL_PAIR(const_tbl+39559, const_tbl+164543)
MAKE_LITERAL_PAIR(const_tbl+39542, const_tbl+164560)
MAKE_LITERAL_PAIR(const_tbl+39525, const_tbl+164577)
MAKE_LITERAL_PAIR(const_tbl+39508, const_tbl+164594)
MAKE_LITERAL_PAIR(const_tbl+39491, const_tbl+164611)
MAKE_LITERAL_PAIR(const_tbl+39474, const_tbl+164628)
MAKE_LITERAL_PAIR(const_tbl+39457, const_tbl+164645)
MAKE_LITERAL_PAIR(const_tbl+39440, const_tbl+164662)
MAKE_LITERAL_PAIR(const_tbl+39423, const_tbl+164679)
MAKE_LITERAL_PAIR(const_tbl+39406, const_tbl+164696)
MAKE_LITERAL_PAIR(const_tbl+39389, const_tbl+164713)
MAKE_LITERAL_PAIR(const_tbl+39372, const_tbl+164730)
MAKE_LITERAL_PAIR(const_tbl+39355, const_tbl+164747)
MAKE_LITERAL_PAIR(const_tbl+39338, const_tbl+164764)
MAKE_LITERAL_PAIR(const_tbl+39321, const_tbl+164781)
MAKE_LITERAL_PAIR(const_tbl+39304, const_tbl+164798)
MAKE_LITERAL_PAIR(const_tbl+39287, const_tbl+164815)
MAKE_LITERAL_PAIR(const_tbl+39270, const_tbl+164832)
MAKE_LITERAL_PAIR(const_tbl+39253, const_tbl+164849)
MAKE_LITERAL_PAIR(const_tbl+39236, const_tbl+164866)
MAKE_LITERAL_PAIR(const_tbl+39219, const_tbl+164883)
MAKE_LITERAL_PAIR(const_tbl+39202, const_tbl+164900)
MAKE_LITERAL_PAIR(const_tbl+39185, const_tbl+164917)
MAKE_LITERAL_PAIR(const_tbl+39168, const_tbl+164934)
MAKE_LITERAL_PAIR(const_tbl+39151, const_tbl+164951)
MAKE_LITERAL_PAIR(const_tbl+39134, const_tbl+164968)
MAKE_LITERAL_PAIR(const_tbl+39117, const_tbl+164985)
MAKE_LITERAL_PAIR(const_tbl+39100, const_tbl+165002)
MAKE_LITERAL_PAIR(const_tbl+39083, const_tbl+165019)
MAKE_LITERAL_PAIR(const_tbl+39066, const_tbl+165036)
MAKE_LITERAL_PAIR(const_tbl+39049, const_tbl+165053)
MAKE_LITERAL_PAIR(const_tbl+39032, const_tbl+165070)
MAKE_LITERAL_PAIR(const_tbl+39015, const_tbl+165087)
MAKE_LITERAL_PAIR(const_tbl+38998, const_tbl+165104)
MAKE_LITERAL_PAIR(const_tbl+38981, const_tbl+165121)
MAKE_LITERAL_PAIR(const_tbl+38964, const_tbl+165138)
MAKE_LITERAL_PAIR(const_tbl+38947, const_tbl+165155)
MAKE_LITERAL_PAIR(const_tbl+38930, const_tbl+165172)
MAKE_LITERAL_PAIR(const_tbl+38913, const_tbl+165189)
MAKE_LITERAL_PAIR(const_tbl+38896, const_tbl+165206)
MAKE_LITERAL_PAIR(const_tbl+38879, const_tbl+165223)
MAKE_LITERAL_PAIR(const_tbl+38862, const_tbl+165240)
MAKE_LITERAL_PAIR(const_tbl+38845, const_tbl+165257)
MAKE_LITERAL_PAIR(const_tbl+38828, const_tbl+165274)
MAKE_LITERAL_PAIR(const_tbl+38811, const_tbl+165291)
MAKE_LITERAL_PAIR(const_tbl+38794, const_tbl+165308)
MAKE_LITERAL_PAIR(const_tbl+38777, const_tbl+165325)
MAKE_LITERAL_PAIR(const_tbl+38760, const_tbl+165342)
MAKE_LITERAL_PAIR(const_tbl+38743, const_tbl+165359)
MAKE_LITERAL_PAIR(const_tbl+38726, const_tbl+165376)
MAKE_LITERAL_PAIR(const_tbl+38709, const_tbl+165393)
MAKE_LITERAL_PAIR(const_tbl+38692, const_tbl+165410)
MAKE_LITERAL_PAIR(const_tbl+38675, const_tbl+165427)
MAKE_LITERAL_PAIR(const_tbl+38658, const_tbl+165444)
MAKE_LITERAL_PAIR(const_tbl+38641, const_tbl+165461)
MAKE_LITERAL_PAIR(const_tbl+38624, const_tbl+165478)
MAKE_LITERAL_PAIR(const_tbl+38607, const_tbl+165495)
MAKE_LITERAL_PAIR(const_tbl+38590, const_tbl+165512)
MAKE_LITERAL_PAIR(const_tbl+38573, const_tbl+165529)
MAKE_LITERAL_PAIR(const_tbl+38556, const_tbl+165546)
MAKE_LITERAL_PAIR(const_tbl+38539, const_tbl+165563)
MAKE_LITERAL_PAIR(const_tbl+38522, const_tbl+165580)
MAKE_LITERAL_PAIR(const_tbl+38505, const_tbl+165597)
MAKE_LITERAL_PAIR(const_tbl+38488, const_tbl+165614)
MAKE_LITERAL_PAIR(const_tbl+38471, const_tbl+165631)
MAKE_LITERAL_PAIR(const_tbl+38454, const_tbl+165648)
MAKE_LITERAL_PAIR(const_tbl+38437, const_tbl+165665)
MAKE_LITERAL_PAIR(const_tbl+38420, const_tbl+165682)
MAKE_LITERAL_PAIR(const_tbl+38403, const_tbl+165699)
MAKE_LITERAL_PAIR(const_tbl+38386, const_tbl+165716)
MAKE_LITERAL_PAIR(const_tbl+38369, const_tbl+165733)
MAKE_LITERAL_PAIR(const_tbl+38352, const_tbl+165750)
MAKE_LITERAL_PAIR(const_tbl+38335, const_tbl+165767)
MAKE_LITERAL_PAIR(const_tbl+38318, const_tbl+165784)
MAKE_LITERAL_PAIR(const_tbl+38301, const_tbl+165801)
MAKE_LITERAL_PAIR(const_tbl+38284, const_tbl+165818)
MAKE_LITERAL_PAIR(const_tbl+38267, const_tbl+165835)
MAKE_LITERAL_PAIR(const_tbl+38250, const_tbl+165852)
MAKE_LITERAL_PAIR(const_tbl+38233, const_tbl+165869)
MAKE_LITERAL_PAIR(const_tbl+38216, const_tbl+165886)
MAKE_LITERAL_PAIR(const_tbl+38199, const_tbl+165903)
MAKE_LITERAL_PAIR(const_tbl+38182, const_tbl+165920)
MAKE_LITERAL_PAIR(const_tbl+38165, const_tbl+165937)
MAKE_LITERAL_PAIR(const_tbl+38148, const_tbl+165954)
MAKE_LITERAL_PAIR(const_tbl+38131, const_tbl+165971)
MAKE_LITERAL_PAIR(const_tbl+38114, const_tbl+165988)
MAKE_LITERAL_PAIR(const_tbl+38097, const_tbl+166005)
MAKE_LITERAL_PAIR(const_tbl+38080, const_tbl+166022)
MAKE_LITERAL_PAIR(const_tbl+38063, const_tbl+166039)
MAKE_LITERAL_PAIR(const_tbl+38046, const_tbl+166056)
MAKE_LITERAL_PAIR(const_tbl+38029, const_tbl+166073)
MAKE_LITERAL_PAIR(const_tbl+38012, const_tbl+166090)
MAKE_LITERAL_PAIR(const_tbl+37995, const_tbl+166107)
MAKE_LITERAL_PAIR(const_tbl+37978, const_tbl+166124)
MAKE_LITERAL_PAIR(const_tbl+37961, const_tbl+166141)
MAKE_LITERAL_PAIR(const_tbl+37944, const_tbl+166158)
MAKE_LITERAL_PAIR(const_tbl+37927, const_tbl+166175)
MAKE_LITERAL_PAIR(const_tbl+37910, const_tbl+166192)
MAKE_LITERAL_PAIR(const_tbl+37893, const_tbl+166209)
MAKE_LITERAL_PAIR(const_tbl+37876, const_tbl+166226)
MAKE_LITERAL_PAIR(const_tbl+37859, const_tbl+166243)
MAKE_LITERAL_PAIR(const_tbl+37842, const_tbl+166260)
MAKE_LITERAL_PAIR(const_tbl+37825, const_tbl+166277)
MAKE_LITERAL_PAIR(const_tbl+37808, const_tbl+166294)
MAKE_LITERAL_PAIR(const_tbl+37791, const_tbl+166311)
MAKE_LITERAL_PAIR(const_tbl+37774, const_tbl+166328)
MAKE_LITERAL_PAIR(const_tbl+37757, const_tbl+166345)
MAKE_LITERAL_PAIR(const_tbl+37740, const_tbl+166362)
MAKE_LITERAL_PAIR(const_tbl+37723, const_tbl+166379)
MAKE_LITERAL_PAIR(const_tbl+37706, const_tbl+166396)
MAKE_LITERAL_PAIR(const_tbl+37689, const_tbl+166413)
MAKE_LITERAL_PAIR(const_tbl+37672, const_tbl+166430)
MAKE_LITERAL_PAIR(const_tbl+37655, const_tbl+166447)
MAKE_LITERAL_PAIR(const_tbl+37638, const_tbl+166464)
MAKE_LITERAL_PAIR(const_tbl+37621, const_tbl+166481)
MAKE_LITERAL_PAIR(const_tbl+37604, const_tbl+166498)
MAKE_LITERAL_PAIR(const_tbl+37587, const_tbl+166515)
MAKE_LITERAL_PAIR(const_tbl+37570, const_tbl+166532)
MAKE_LITERAL_PAIR(const_tbl+37553, const_tbl+166549)
MAKE_LITERAL_PAIR(const_tbl+37536, const_tbl+166566)
MAKE_LITERAL_PAIR(const_tbl+37519, const_tbl+166583)
MAKE_LITERAL_PAIR(const_tbl+37502, const_tbl+166600)
MAKE_LITERAL_PAIR(const_tbl+37485, const_tbl+166617)
MAKE_LITERAL_PAIR(const_tbl+37468, const_tbl+166634)
MAKE_LITERAL_PAIR(const_tbl+37451, const_tbl+166651)
MAKE_LITERAL_PAIR(const_tbl+37434, const_tbl+166668)
MAKE_LITERAL_PAIR(const_tbl+37417, const_tbl+166685)
MAKE_LITERAL_PAIR(const_tbl+37400, const_tbl+166702)
MAKE_LITERAL_PAIR(const_tbl+37383, const_tbl+166719)
MAKE_LITERAL_PAIR(const_tbl+37366, const_tbl+166736)
MAKE_LITERAL_PAIR(const_tbl+37349, const_tbl+166753)
MAKE_LITERAL_PAIR(const_tbl+37332, const_tbl+166770)
MAKE_LITERAL_PAIR(const_tbl+37315, const_tbl+166787)
MAKE_LITERAL_PAIR(const_tbl+37298, const_tbl+166804)
MAKE_LITERAL_PAIR(const_tbl+37281, const_tbl+166821)
MAKE_LITERAL_PAIR(const_tbl+37264, const_tbl+166838)
MAKE_LITERAL_PAIR(const_tbl+37247, const_tbl+166855)
MAKE_LITERAL_PAIR(const_tbl+37230, const_tbl+166872)
MAKE_LITERAL_PAIR(const_tbl+37213, const_tbl+166889)
MAKE_LITERAL_PAIR(const_tbl+37196, const_tbl+166906)
MAKE_LITERAL_PAIR(const_tbl+37179, const_tbl+166923)
MAKE_LITERAL_PAIR(const_tbl+37162, const_tbl+166940)
MAKE_LITERAL_PAIR(const_tbl+37145, const_tbl+166957)
MAKE_LITERAL_PAIR(const_tbl+37128, const_tbl+166974)
MAKE_LITERAL_PAIR(const_tbl+37111, const_tbl+166991)
MAKE_LITERAL_PAIR(const_tbl+37094, const_tbl+167008)
MAKE_LITERAL_PAIR(const_tbl+37077, const_tbl+167025)
MAKE_LITERAL_PAIR(const_tbl+37060, const_tbl+167042)
MAKE_LITERAL_PAIR(const_tbl+37043, const_tbl+167059)
MAKE_LITERAL_PAIR(const_tbl+37026, const_tbl+167076)
MAKE_LITERAL_PAIR(const_tbl+37009, const_tbl+167093)
MAKE_LITERAL_PAIR(const_tbl+36992, const_tbl+167110)
MAKE_LITERAL_PAIR(const_tbl+36975, const_tbl+167127)
MAKE_LITERAL_PAIR(const_tbl+36958, const_tbl+167144)
MAKE_LITERAL_PAIR(const_tbl+36941, const_tbl+167161)
MAKE_LITERAL_PAIR(const_tbl+36924, const_tbl+167178)
MAKE_LITERAL_PAIR(const_tbl+36907, const_tbl+167195)
MAKE_LITERAL_PAIR(const_tbl+36890, const_tbl+167212)
MAKE_LITERAL_PAIR(const_tbl+36873, const_tbl+167229)
MAKE_LITERAL_PAIR(const_tbl+36856, const_tbl+167246)
MAKE_LITERAL_PAIR(const_tbl+36839, const_tbl+167263)
MAKE_LITERAL_PAIR(const_tbl+36822, const_tbl+167280)
MAKE_LITERAL_PAIR(const_tbl+36805, const_tbl+167297)
MAKE_LITERAL_PAIR(const_tbl+36788, const_tbl+167314)
MAKE_LITERAL_PAIR(const_tbl+36771, const_tbl+167331)
MAKE_LITERAL_PAIR(const_tbl+36754, const_tbl+167348)
MAKE_LITERAL_PAIR(const_tbl+36737, const_tbl+167365)
MAKE_LITERAL_PAIR(const_tbl+36720, const_tbl+167382)
MAKE_LITERAL_PAIR(const_tbl+36703, const_tbl+167399)
MAKE_LITERAL_PAIR(const_tbl+36686, const_tbl+167416)
MAKE_LITERAL_PAIR(const_tbl+36669, const_tbl+167433)
MAKE_LITERAL_PAIR(const_tbl+36652, const_tbl+167450)
MAKE_LITERAL_PAIR(const_tbl+36635, const_tbl+167467)
MAKE_LITERAL_PAIR(const_tbl+36618, const_tbl+167484)
MAKE_LITERAL_PAIR(const_tbl+36601, const_tbl+167501)
MAKE_LITERAL_PAIR(const_tbl+36584, const_tbl+167518)
MAKE_LITERAL_PAIR(const_tbl+36567, const_tbl+167535)
MAKE_LITERAL_PAIR(const_tbl+36550, const_tbl+167552)
MAKE_LITERAL_PAIR(const_tbl+36533, const_tbl+167569)
MAKE_LITERAL_PAIR(const_tbl+36516, const_tbl+167586)
MAKE_LITERAL_PAIR(const_tbl+36499, const_tbl+167603)
MAKE_LITERAL_PAIR(const_tbl+36482, const_tbl+167620)
MAKE_LITERAL_PAIR(const_tbl+36465, const_tbl+167637)
MAKE_LITERAL_PAIR(const_tbl+36448, const_tbl+167654)
MAKE_LITERAL_PAIR(const_tbl+36431, const_tbl+167671)
MAKE_LITERAL_PAIR(const_tbl+36414, const_tbl+167688)
MAKE_LITERAL_PAIR(const_tbl+36397, const_tbl+167705)
MAKE_LITERAL_PAIR(const_tbl+36380, const_tbl+167722)
MAKE_LITERAL_PAIR(const_tbl+36363, const_tbl+167739)
MAKE_LITERAL_PAIR(const_tbl+36346, const_tbl+167756)
MAKE_LITERAL_PAIR(const_tbl+36329, const_tbl+167773)
MAKE_LITERAL_PAIR(const_tbl+36312, const_tbl+167790)
MAKE_LITERAL_PAIR(const_tbl+36295, const_tbl+167807)
MAKE_LITERAL_PAIR(const_tbl+36278, const_tbl+167824)
MAKE_LITERAL_PAIR(const_tbl+36261, const_tbl+167841)
MAKE_LITERAL_PAIR(const_tbl+36244, const_tbl+167858)
MAKE_LITERAL_PAIR(const_tbl+36227, const_tbl+167875)
MAKE_LITERAL_PAIR(const_tbl+36210, const_tbl+167892)
MAKE_LITERAL_PAIR(const_tbl+36193, const_tbl+167909)
MAKE_LITERAL_PAIR(const_tbl+36176, const_tbl+167926)
MAKE_LITERAL_PAIR(const_tbl+36159, const_tbl+167943)
MAKE_LITERAL_PAIR(const_tbl+36142, const_tbl+167960)
MAKE_LITERAL_PAIR(const_tbl+36125, const_tbl+167977)
MAKE_LITERAL_PAIR(const_tbl+36108, const_tbl+167994)
MAKE_LITERAL_PAIR(const_tbl+36091, const_tbl+168011)
MAKE_LITERAL_PAIR(const_tbl+36074, const_tbl+168028)
MAKE_LITERAL_PAIR(const_tbl+36057, const_tbl+168045)
MAKE_LITERAL_PAIR(const_tbl+36040, const_tbl+168062)
MAKE_LITERAL_PAIR(const_tbl+36023, const_tbl+168079)
MAKE_LITERAL_PAIR(const_tbl+36006, const_tbl+168096)
MAKE_LITERAL_PAIR(const_tbl+35989, const_tbl+168113)
MAKE_LITERAL_PAIR(const_tbl+35972, const_tbl+168130)
MAKE_LITERAL_PAIR(const_tbl+35955, const_tbl+168147)
MAKE_LITERAL_PAIR(const_tbl+35938, const_tbl+168164)
MAKE_LITERAL_PAIR(const_tbl+35921, const_tbl+168181)
MAKE_LITERAL_PAIR(const_tbl+35904, const_tbl+168198)
MAKE_LITERAL_PAIR(const_tbl+35887, const_tbl+168215)
MAKE_LITERAL_PAIR(const_tbl+35870, const_tbl+168232)
MAKE_LITERAL_PAIR(const_tbl+35853, const_tbl+168249)
MAKE_LITERAL_PAIR(const_tbl+35836, const_tbl+168266)
MAKE_LITERAL_PAIR(const_tbl+35819, const_tbl+168283)
MAKE_LITERAL_PAIR(const_tbl+35802, const_tbl+168300)
MAKE_LITERAL_PAIR(const_tbl+35785, const_tbl+168317)
MAKE_LITERAL_PAIR(const_tbl+35768, const_tbl+168334)
MAKE_LITERAL_PAIR(const_tbl+35751, const_tbl+168351)
MAKE_LITERAL_PAIR(const_tbl+35734, const_tbl+168368)
MAKE_LITERAL_PAIR(const_tbl+35717, const_tbl+168385)
MAKE_LITERAL_PAIR(const_tbl+35700, const_tbl+168402)
MAKE_LITERAL_PAIR(const_tbl+35683, const_tbl+168419)
MAKE_LITERAL_PAIR(const_tbl+35666, const_tbl+168436)
MAKE_LITERAL_PAIR(const_tbl+35649, const_tbl+168453)
MAKE_LITERAL_PAIR(const_tbl+35632, const_tbl+168470)
MAKE_LITERAL_PAIR(const_tbl+35615, const_tbl+168487)
MAKE_LITERAL_PAIR(const_tbl+35598, const_tbl+168504)
MAKE_LITERAL_PAIR(const_tbl+35581, const_tbl+168521)
MAKE_LITERAL_PAIR(const_tbl+35564, const_tbl+168538)
MAKE_LITERAL_PAIR(const_tbl+35547, const_tbl+168555)
MAKE_LITERAL_PAIR(const_tbl+35530, const_tbl+168572)
MAKE_LITERAL_PAIR(const_tbl+35513, const_tbl+168589)
MAKE_LITERAL_PAIR(const_tbl+35496, const_tbl+168606)
MAKE_LITERAL_PAIR(const_tbl+35479, const_tbl+168623)
MAKE_LITERAL_PAIR(const_tbl+35462, const_tbl+168640)
MAKE_LITERAL_PAIR(const_tbl+35445, const_tbl+168657)
MAKE_LITERAL_PAIR(const_tbl+35428, const_tbl+168674)
MAKE_LITERAL_PAIR(const_tbl+35411, const_tbl+168691)
MAKE_LITERAL_PAIR(const_tbl+35394, const_tbl+168708)
MAKE_LITERAL_PAIR(const_tbl+35377, const_tbl+168725)
MAKE_LITERAL_PAIR(const_tbl+35360, const_tbl+168742)
MAKE_LITERAL_PAIR(const_tbl+35343, const_tbl+168759)
MAKE_LITERAL_PAIR(const_tbl+35326, const_tbl+168776)
MAKE_LITERAL_PAIR(const_tbl+35309, const_tbl+168793)
MAKE_LITERAL_PAIR(const_tbl+35292, const_tbl+168810)
MAKE_LITERAL_PAIR(const_tbl+35275, const_tbl+168827)
MAKE_LITERAL_PAIR(const_tbl+35258, const_tbl+168844)
MAKE_LITERAL_PAIR(const_tbl+35241, const_tbl+168861)
MAKE_LITERAL_PAIR(const_tbl+35224, const_tbl+168878)
MAKE_LITERAL_PAIR(const_tbl+35207, const_tbl+168895)
MAKE_LITERAL_PAIR(const_tbl+35190, const_tbl+168912)
MAKE_LITERAL_PAIR(const_tbl+35173, const_tbl+168929)
MAKE_LITERAL_PAIR(const_tbl+35156, const_tbl+168946)
MAKE_LITERAL_PAIR(const_tbl+35139, const_tbl+168963)
MAKE_LITERAL_PAIR(const_tbl+35122, const_tbl+168980)
MAKE_LITERAL_PAIR(const_tbl+35105, const_tbl+168997)
MAKE_LITERAL_PAIR(const_tbl+35088, const_tbl+169014)
MAKE_LITERAL_PAIR(const_tbl+35071, const_tbl+169031)
MAKE_LITERAL_PAIR(const_tbl+35054, const_tbl+169048)
MAKE_LITERAL_PAIR(const_tbl+35037, const_tbl+169065)
MAKE_LITERAL_PAIR(const_tbl+35020, const_tbl+169082)
MAKE_LITERAL_PAIR(const_tbl+35003, const_tbl+169099)
MAKE_LITERAL_PAIR(const_tbl+34986, const_tbl+169116)
MAKE_LITERAL_PAIR(const_tbl+34969, const_tbl+169133)
MAKE_LITERAL_PAIR(const_tbl+34952, const_tbl+169150)
MAKE_LITERAL_PAIR(const_tbl+34935, const_tbl+169167)
MAKE_LITERAL_PAIR(const_tbl+34918, const_tbl+169184)
MAKE_LITERAL_PAIR(const_tbl+34901, const_tbl+169201)
MAKE_LITERAL_PAIR(const_tbl+34884, const_tbl+169218)
MAKE_LITERAL_PAIR(const_tbl+34867, const_tbl+169235)
MAKE_LITERAL_PAIR(const_tbl+34850, const_tbl+169252)
MAKE_LITERAL_PAIR(const_tbl+34833, const_tbl+169269)
MAKE_LITERAL_PAIR(const_tbl+34816, const_tbl+169286)
MAKE_LITERAL_PAIR(const_tbl+34799, const_tbl+169303)
MAKE_LITERAL_PAIR(const_tbl+34782, const_tbl+169320)
MAKE_LITERAL_PAIR(const_tbl+34765, const_tbl+169337)
MAKE_LITERAL_PAIR(const_tbl+34748, const_tbl+169354)
MAKE_LITERAL_PAIR(const_tbl+34731, const_tbl+169371)
MAKE_LITERAL_PAIR(const_tbl+34714, const_tbl+169388)
MAKE_LITERAL_PAIR(const_tbl+34697, const_tbl+169405)
MAKE_LITERAL_PAIR(const_tbl+34680, const_tbl+169422)
MAKE_LITERAL_PAIR(const_tbl+34663, const_tbl+169439)
MAKE_LITERAL_PAIR(const_tbl+34646, const_tbl+169456)
MAKE_LITERAL_PAIR(const_tbl+34629, const_tbl+169473)
MAKE_LITERAL_PAIR(const_tbl+34612, const_tbl+169490)
MAKE_LITERAL_PAIR(const_tbl+34595, const_tbl+169507)
MAKE_LITERAL_PAIR(const_tbl+34578, const_tbl+169524)
MAKE_LITERAL_PAIR(const_tbl+34561, const_tbl+169541)
MAKE_LITERAL_PAIR(const_tbl+34544, const_tbl+169558)
MAKE_LITERAL_PAIR(const_tbl+34527, const_tbl+169575)
MAKE_LITERAL_PAIR(const_tbl+34510, const_tbl+169592)
MAKE_LITERAL_PAIR(const_tbl+34493, const_tbl+169609)
MAKE_LITERAL_PAIR(const_tbl+34476, const_tbl+169626)
MAKE_LITERAL_PAIR(const_tbl+34459, const_tbl+169643)
MAKE_LITERAL_PAIR(const_tbl+34442, const_tbl+169660)
MAKE_LITERAL_PAIR(const_tbl+34425, const_tbl+169677)
MAKE_LITERAL_PAIR(const_tbl+34408, const_tbl+169694)
MAKE_LITERAL_PAIR(const_tbl+34391, const_tbl+169711)
MAKE_LITERAL_PAIR(const_tbl+34374, const_tbl+169728)
MAKE_LITERAL_PAIR(const_tbl+34357, const_tbl+169745)
MAKE_LITERAL_PAIR(const_tbl+34340, const_tbl+169762)
MAKE_LITERAL_PAIR(const_tbl+34323, const_tbl+169779)
MAKE_LITERAL_PAIR(const_tbl+34306, const_tbl+169796)
MAKE_LITERAL_PAIR(const_tbl+34289, const_tbl+169813)
MAKE_LITERAL_PAIR(const_tbl+34272, const_tbl+169830)
MAKE_LITERAL_PAIR(const_tbl+34255, const_tbl+169847)
MAKE_LITERAL_PAIR(const_tbl+34238, const_tbl+169864)
MAKE_LITERAL_PAIR(const_tbl+34221, const_tbl+169881)
MAKE_LITERAL_PAIR(const_tbl+34204, const_tbl+169898)
MAKE_LITERAL_PAIR(const_tbl+34187, const_tbl+169915)
MAKE_LITERAL_PAIR(const_tbl+34170, const_tbl+169932)
MAKE_LITERAL_PAIR(const_tbl+34153, const_tbl+169949)
MAKE_LITERAL_PAIR(const_tbl+34136, const_tbl+169966)
MAKE_LITERAL_PAIR(const_tbl+34119, const_tbl+169983)
MAKE_LITERAL_PAIR(const_tbl+34102, const_tbl+170000)
MAKE_LITERAL_PAIR(const_tbl+34085, const_tbl+170017)
MAKE_LITERAL_PAIR(const_tbl+34068, const_tbl+170034)
MAKE_LITERAL_PAIR(const_tbl+34051, const_tbl+170051)
MAKE_LITERAL_PAIR(const_tbl+34034, const_tbl+170068)
MAKE_LITERAL_PAIR(const_tbl+34017, const_tbl+170085)
MAKE_LITERAL_PAIR(const_tbl+34000, const_tbl+170102)
MAKE_LITERAL_PAIR(const_tbl+33983, const_tbl+170119)
MAKE_LITERAL_PAIR(const_tbl+33966, const_tbl+170136)
MAKE_LITERAL_PAIR(const_tbl+33949, const_tbl+170153)
MAKE_LITERAL_PAIR(const_tbl+33932, const_tbl+170170)
MAKE_LITERAL_PAIR(const_tbl+33915, const_tbl+170187)
MAKE_LITERAL_PAIR(const_tbl+33898, const_tbl+170204)
MAKE_LITERAL_PAIR(const_tbl+33881, const_tbl+170221)
MAKE_LITERAL_PAIR(const_tbl+33864, const_tbl+170238)
MAKE_LITERAL_PAIR(const_tbl+33847, const_tbl+170255)
MAKE_LITERAL_PAIR(const_tbl+33830, const_tbl+170272)
MAKE_LITERAL_PAIR(const_tbl+33813, const_tbl+170289)
MAKE_LITERAL_PAIR(const_tbl+33796, const_tbl+170306)
MAKE_LITERAL_PAIR(const_tbl+33779, const_tbl+170323)
MAKE_LITERAL_PAIR(const_tbl+33762, const_tbl+170340)
MAKE_LITERAL_PAIR(const_tbl+33745, const_tbl+170357)
MAKE_LITERAL_PAIR(const_tbl+33728, const_tbl+170374)
MAKE_LITERAL_PAIR(const_tbl+33711, const_tbl+170391)
MAKE_LITERAL_PAIR(const_tbl+33694, const_tbl+170408)
MAKE_LITERAL_PAIR(const_tbl+33677, const_tbl+170425)
MAKE_LITERAL_PAIR(const_tbl+33660, const_tbl+170442)
MAKE_LITERAL_PAIR(const_tbl+33643, const_tbl+170459)
MAKE_LITERAL_PAIR(const_tbl+33626, const_tbl+170476)
MAKE_LITERAL_PAIR(const_tbl+33609, const_tbl+170493)
MAKE_LITERAL_PAIR(const_tbl+33592, const_tbl+170510)
MAKE_LITERAL_PAIR(const_tbl+33575, const_tbl+170527)
MAKE_LITERAL_PAIR(const_tbl+33558, const_tbl+170544)
MAKE_LITERAL_PAIR(const_tbl+33541, const_tbl+170561)
MAKE_LITERAL_PAIR(const_tbl+33524, const_tbl+170578)
MAKE_LITERAL_PAIR(const_tbl+33507, const_tbl+170595)
MAKE_LITERAL_PAIR(const_tbl+33490, const_tbl+170612)
MAKE_LITERAL_PAIR(const_tbl+33473, const_tbl+170629)
MAKE_LITERAL_PAIR(const_tbl+33456, const_tbl+170646)
MAKE_LITERAL_PAIR(const_tbl+33439, const_tbl+170663)
MAKE_LITERAL_PAIR(const_tbl+33422, const_tbl+170680)
MAKE_LITERAL_PAIR(const_tbl+33405, const_tbl+170697)
MAKE_LITERAL_PAIR(const_tbl+33388, const_tbl+170714)
MAKE_LITERAL_PAIR(const_tbl+33371, const_tbl+170731)
MAKE_LITERAL_PAIR(const_tbl+33354, const_tbl+170748)
MAKE_LITERAL_PAIR(const_tbl+33337, const_tbl+170765)
MAKE_LITERAL_PAIR(const_tbl+33320, const_tbl+170782)
MAKE_LITERAL_PAIR(const_tbl+33303, const_tbl+170799)
MAKE_LITERAL_PAIR(const_tbl+33286, const_tbl+170816)
MAKE_LITERAL_PAIR(const_tbl+33269, const_tbl+170833)
MAKE_LITERAL_PAIR(const_tbl+33252, const_tbl+170850)
MAKE_LITERAL_PAIR(const_tbl+33235, const_tbl+170867)
MAKE_LITERAL_PAIR(const_tbl+33218, const_tbl+170884)
MAKE_LITERAL_PAIR(const_tbl+33201, const_tbl+170901)
MAKE_LITERAL_PAIR(const_tbl+33184, const_tbl+170918)
MAKE_LITERAL_PAIR(const_tbl+33167, const_tbl+170935)
MAKE_LITERAL_PAIR(const_tbl+33150, const_tbl+170952)
MAKE_LITERAL_PAIR(const_tbl+33133, const_tbl+170969)
MAKE_LITERAL_PAIR(const_tbl+33116, const_tbl+170986)
MAKE_LITERAL_PAIR(const_tbl+33099, const_tbl+171003)
MAKE_LITERAL_PAIR(const_tbl+33082, const_tbl+171020)
MAKE_LITERAL_PAIR(const_tbl+33065, const_tbl+171037)
MAKE_LITERAL_PAIR(const_tbl+33048, const_tbl+171054)
MAKE_LITERAL_PAIR(const_tbl+33031, const_tbl+171071)
MAKE_LITERAL_PAIR(const_tbl+33014, const_tbl+171088)
MAKE_LITERAL_PAIR(const_tbl+32997, const_tbl+171105)
MAKE_LITERAL_PAIR(const_tbl+32980, const_tbl+171122)
MAKE_LITERAL_PAIR(const_tbl+32963, const_tbl+171139)
MAKE_LITERAL_PAIR(const_tbl+32946, const_tbl+171156)
MAKE_LITERAL_PAIR(const_tbl+32929, const_tbl+171173)
MAKE_LITERAL_PAIR(const_tbl+32912, const_tbl+171190)
MAKE_LITERAL_PAIR(const_tbl+32895, const_tbl+171207)
MAKE_LITERAL_PAIR(const_tbl+32878, const_tbl+171224)
MAKE_LITERAL_PAIR(const_tbl+32861, const_tbl+171241)
MAKE_LITERAL_PAIR(const_tbl+32844, const_tbl+171258)
MAKE_LITERAL_PAIR(const_tbl+32827, const_tbl+171275)
MAKE_LITERAL_PAIR(const_tbl+32810, const_tbl+171292)
MAKE_LITERAL_PAIR(const_tbl+32793, const_tbl+171309)
MAKE_LITERAL_PAIR(const_tbl+32776, const_tbl+171326)
MAKE_LITERAL_PAIR(const_tbl+32759, const_tbl+171343)
MAKE_LITERAL_PAIR(const_tbl+32742, const_tbl+171360)
MAKE_LITERAL_PAIR(const_tbl+32725, const_tbl+171377)
MAKE_LITERAL_PAIR(const_tbl+32708, const_tbl+171394)
MAKE_LITERAL_PAIR(const_tbl+32691, const_tbl+171411)
MAKE_LITERAL_PAIR(const_tbl+32674, const_tbl+171428)
MAKE_LITERAL_PAIR(const_tbl+32657, const_tbl+171445)
MAKE_LITERAL_PAIR(const_tbl+32640, const_tbl+171462)
MAKE_LITERAL_PAIR(const_tbl+32623, const_tbl+171479)
MAKE_LITERAL_PAIR(const_tbl+32606, const_tbl+171496)
MAKE_LITERAL_PAIR(const_tbl+32589, const_tbl+171513)
MAKE_LITERAL_PAIR(const_tbl+32572, const_tbl+171530)
MAKE_LITERAL_PAIR(const_tbl+32555, const_tbl+171547)
MAKE_LITERAL_PAIR(const_tbl+32538, const_tbl+171564)
MAKE_LITERAL_PAIR(const_tbl+32521, const_tbl+171581)
MAKE_LITERAL_PAIR(const_tbl+32504, const_tbl+171598)
MAKE_LITERAL_PAIR(const_tbl+32487, const_tbl+171615)
MAKE_LITERAL_PAIR(const_tbl+32470, const_tbl+171632)
MAKE_LITERAL_PAIR(const_tbl+32453, const_tbl+171649)
MAKE_LITERAL_PAIR(const_tbl+32436, const_tbl+171666)
MAKE_LITERAL_PAIR(const_tbl+32419, const_tbl+171683)
MAKE_LITERAL_PAIR(const_tbl+32402, const_tbl+171700)
MAKE_LITERAL_PAIR(const_tbl+32385, const_tbl+171717)
MAKE_LITERAL_PAIR(const_tbl+32368, const_tbl+171734)
MAKE_LITERAL_PAIR(const_tbl+32351, const_tbl+171751)
MAKE_LITERAL_PAIR(const_tbl+32334, const_tbl+171768)
MAKE_LITERAL_PAIR(const_tbl+32317, const_tbl+171785)
MAKE_LITERAL_PAIR(const_tbl+32300, const_tbl+171802)
MAKE_LITERAL_PAIR(const_tbl+32283, const_tbl+171819)
MAKE_LITERAL_PAIR(const_tbl+32266, const_tbl+171836)
MAKE_LITERAL_PAIR(const_tbl+32249, const_tbl+171853)
MAKE_LITERAL_PAIR(const_tbl+32232, const_tbl+171870)
MAKE_LITERAL_PAIR(const_tbl+32215, const_tbl+171887)
MAKE_LITERAL_PAIR(const_tbl+32198, const_tbl+171904)
MAKE_LITERAL_PAIR(const_tbl+32181, const_tbl+171921)
MAKE_LITERAL_PAIR(const_tbl+32164, const_tbl+171938)
MAKE_LITERAL_PAIR(const_tbl+32147, const_tbl+171955)
MAKE_LITERAL_PAIR(const_tbl+32130, const_tbl+171972)
MAKE_LITERAL_PAIR(const_tbl+32113, const_tbl+171989)
MAKE_LITERAL_PAIR(const_tbl+32096, const_tbl+172006)
MAKE_LITERAL_PAIR(const_tbl+32079, const_tbl+172023)
MAKE_LITERAL_PAIR(const_tbl+32062, const_tbl+172040)
MAKE_LITERAL_PAIR(const_tbl+32045, const_tbl+172057)
MAKE_LITERAL_PAIR(const_tbl+32028, const_tbl+172074)
MAKE_LITERAL_PAIR(const_tbl+32011, const_tbl+172091)
MAKE_LITERAL_PAIR(const_tbl+31994, const_tbl+172108)
MAKE_LITERAL_PAIR(const_tbl+31977, const_tbl+172125)
MAKE_LITERAL_PAIR(const_tbl+31960, const_tbl+172142)
MAKE_LITERAL_PAIR(const_tbl+31943, const_tbl+172159)
MAKE_LITERAL_PAIR(const_tbl+31926, const_tbl+172176)
MAKE_LITERAL_PAIR(const_tbl+31909, const_tbl+172193)
MAKE_LITERAL_PAIR(const_tbl+31892, const_tbl+172210)
MAKE_LITERAL_PAIR(const_tbl+31875, const_tbl+172227)
MAKE_LITERAL_PAIR(const_tbl+31858, const_tbl+172244)
MAKE_LITERAL_PAIR(const_tbl+31841, const_tbl+172261)
MAKE_LITERAL_PAIR(const_tbl+31824, const_tbl+172278)
MAKE_LITERAL_PAIR(const_tbl+31807, const_tbl+172295)
MAKE_LITERAL_PAIR(const_tbl+31790, const_tbl+172312)
MAKE_LITERAL_PAIR(const_tbl+31773, const_tbl+172329)
MAKE_LITERAL_PAIR(const_tbl+31756, const_tbl+172346)
MAKE_LITERAL_PAIR(const_tbl+31739, const_tbl+172363)
MAKE_LITERAL_PAIR(const_tbl+31722, const_tbl+172380)
MAKE_LITERAL_PAIR(const_tbl+31705, const_tbl+172397)
MAKE_LITERAL_PAIR(const_tbl+31688, const_tbl+172414)
MAKE_LITERAL_PAIR(const_tbl+31671, const_tbl+172431)
MAKE_LITERAL_PAIR(const_tbl+31654, const_tbl+172448)
MAKE_LITERAL_PAIR(const_tbl+31637, const_tbl+172465)
MAKE_LITERAL_PAIR(const_tbl+31620, const_tbl+172482)
MAKE_LITERAL_PAIR(const_tbl+31603, const_tbl+172499)
MAKE_LITERAL_PAIR(const_tbl+31586, const_tbl+172516)
MAKE_LITERAL_PAIR(const_tbl+31569, const_tbl+172533)
MAKE_LITERAL_PAIR(const_tbl+31552, const_tbl+172550)
MAKE_LITERAL_PAIR(const_tbl+31535, const_tbl+172567)
MAKE_LITERAL_PAIR(const_tbl+31518, const_tbl+172584)
MAKE_LITERAL_PAIR(const_tbl+31501, const_tbl+172601)
MAKE_LITERAL_PAIR(const_tbl+31484, const_tbl+172618)
MAKE_LITERAL_PAIR(const_tbl+31467, const_tbl+172635)
MAKE_LITERAL_PAIR(const_tbl+31450, const_tbl+172652)
MAKE_LITERAL_PAIR(const_tbl+31433, const_tbl+172669)
MAKE_LITERAL_PAIR(const_tbl+31416, const_tbl+172686)
MAKE_LITERAL_PAIR(const_tbl+31399, const_tbl+172703)
MAKE_LITERAL_PAIR(const_tbl+31382, const_tbl+172720)
MAKE_LITERAL_PAIR(const_tbl+31365, const_tbl+172737)
MAKE_LITERAL_PAIR(const_tbl+31348, const_tbl+172754)
MAKE_LITERAL_PAIR(const_tbl+31331, const_tbl+172771)
MAKE_LITERAL_PAIR(const_tbl+31314, const_tbl+172788)
MAKE_LITERAL_PAIR(const_tbl+31297, const_tbl+172805)
MAKE_LITERAL_PAIR(const_tbl+31280, const_tbl+172822)
MAKE_LITERAL_PAIR(const_tbl+31263, const_tbl+172839)
MAKE_LITERAL_PAIR(const_tbl+31246, const_tbl+172856)
MAKE_LITERAL_PAIR(const_tbl+31229, const_tbl+172873)
MAKE_LITERAL_PAIR(const_tbl+31212, const_tbl+172890)
MAKE_LITERAL_PAIR(const_tbl+31195, const_tbl+172907)
MAKE_LITERAL_PAIR(const_tbl+31178, const_tbl+172924)
MAKE_LITERAL_PAIR(const_tbl+31161, const_tbl+172941)
MAKE_LITERAL_PAIR(const_tbl+31144, const_tbl+172958)
MAKE_LITERAL_PAIR(const_tbl+31127, const_tbl+172975)
MAKE_LITERAL_PAIR(const_tbl+31110, const_tbl+172992)
MAKE_LITERAL_PAIR(const_tbl+31093, const_tbl+173009)
MAKE_LITERAL_PAIR(const_tbl+31076, const_tbl+173026)
MAKE_LITERAL_PAIR(const_tbl+31059, const_tbl+173043)
MAKE_LITERAL_PAIR(const_tbl+31042, const_tbl+173060)
MAKE_LITERAL_PAIR(const_tbl+31025, const_tbl+173077)
MAKE_LITERAL_PAIR(const_tbl+31008, const_tbl+173094)
MAKE_LITERAL_PAIR(const_tbl+30991, const_tbl+173111)
MAKE_LITERAL_PAIR(const_tbl+30974, const_tbl+173128)
MAKE_LITERAL_PAIR(const_tbl+30957, const_tbl+173145)
MAKE_LITERAL_PAIR(const_tbl+30940, const_tbl+173162)
MAKE_LITERAL_PAIR(const_tbl+30923, const_tbl+173179)
MAKE_LITERAL_PAIR(const_tbl+30906, const_tbl+173196)
MAKE_LITERAL_PAIR(const_tbl+30889, const_tbl+173213)
MAKE_LITERAL_PAIR(const_tbl+30872, const_tbl+173230)
MAKE_LITERAL_PAIR(const_tbl+30855, const_tbl+173247)
MAKE_LITERAL_PAIR(const_tbl+30838, const_tbl+173264)
MAKE_LITERAL_PAIR(const_tbl+30821, const_tbl+173281)
MAKE_LITERAL_PAIR(const_tbl+30804, const_tbl+173298)
MAKE_LITERAL_PAIR(const_tbl+30787, const_tbl+173315)
MAKE_LITERAL_PAIR(const_tbl+30770, const_tbl+173332)
MAKE_LITERAL_PAIR(const_tbl+30753, const_tbl+173349)
MAKE_LITERAL_PAIR(const_tbl+30736, const_tbl+173366)
MAKE_LITERAL_PAIR(const_tbl+30719, const_tbl+173383)
MAKE_LITERAL_PAIR(const_tbl+30702, const_tbl+173400)
MAKE_LITERAL_PAIR(const_tbl+30685, const_tbl+173417)
MAKE_LITERAL_PAIR(const_tbl+30668, const_tbl+173434)
MAKE_LITERAL_PAIR(const_tbl+30651, const_tbl+173451)
MAKE_LITERAL_PAIR(const_tbl+30634, const_tbl+173468)
MAKE_LITERAL_PAIR(const_tbl+30617, const_tbl+173485)
MAKE_LITERAL_PAIR(const_tbl+30600, const_tbl+173502)
MAKE_LITERAL_PAIR(const_tbl+30583, const_tbl+173519)
MAKE_LITERAL_PAIR(const_tbl+30566, const_tbl+173536)
MAKE_LITERAL_PAIR(const_tbl+30549, const_tbl+173553)
MAKE_LITERAL_PAIR(const_tbl+30532, const_tbl+173570)
MAKE_LITERAL_PAIR(const_tbl+30515, const_tbl+173587)
MAKE_LITERAL_PAIR(const_tbl+30498, const_tbl+173604)
MAKE_LITERAL_PAIR(const_tbl+30481, const_tbl+173621)
MAKE_LITERAL_PAIR(const_tbl+30464, const_tbl+173638)
MAKE_LITERAL_PAIR(const_tbl+30447, const_tbl+173655)
MAKE_LITERAL_PAIR(const_tbl+30430, const_tbl+173672)
MAKE_LITERAL_PAIR(const_tbl+30413, const_tbl+173689)
MAKE_LITERAL_PAIR(const_tbl+30396, const_tbl+173706)
MAKE_LITERAL_PAIR(const_tbl+30379, const_tbl+173723)
MAKE_LITERAL_PAIR(const_tbl+30362, const_tbl+173740)
MAKE_LITERAL_PAIR(const_tbl+30345, const_tbl+173757)
MAKE_LITERAL_PAIR(const_tbl+30328, const_tbl+173774)
MAKE_LITERAL_PAIR(const_tbl+30311, const_tbl+173791)
MAKE_LITERAL_PAIR(const_tbl+30294, const_tbl+173808)
MAKE_LITERAL_PAIR(const_tbl+30277, const_tbl+173825)
MAKE_LITERAL_PAIR(const_tbl+30260, const_tbl+173842)
MAKE_LITERAL_PAIR(const_tbl+30243, const_tbl+173859)
MAKE_LITERAL_PAIR(const_tbl+30226, const_tbl+173876)
MAKE_LITERAL_PAIR(const_tbl+30209, const_tbl+173893)
MAKE_LITERAL_PAIR(const_tbl+30192, const_tbl+173910)
MAKE_LITERAL_PAIR(const_tbl+30175, const_tbl+173927)
MAKE_LITERAL_PAIR(const_tbl+30158, const_tbl+173944)
MAKE_LITERAL_PAIR(const_tbl+30141, const_tbl+173961)
MAKE_LITERAL_PAIR(const_tbl+30124, const_tbl+173978)
MAKE_LITERAL_PAIR(const_tbl+30107, const_tbl+173995)
MAKE_LITERAL_PAIR(const_tbl+30090, const_tbl+174012)
MAKE_LITERAL_PAIR(const_tbl+30073, const_tbl+174029)
MAKE_LITERAL_PAIR(const_tbl+30056, const_tbl+174046)
MAKE_LITERAL_PAIR(const_tbl+30039, const_tbl+174063)
MAKE_LITERAL_PAIR(const_tbl+30022, const_tbl+174080)
MAKE_LITERAL_PAIR(const_tbl+30005, const_tbl+174097)
MAKE_LITERAL_PAIR(const_tbl+29988, const_tbl+174114)
MAKE_LITERAL_PAIR(const_tbl+29971, const_tbl+174131)
MAKE_LITERAL_PAIR(const_tbl+29954, const_tbl+174148)
MAKE_LITERAL_PAIR(const_tbl+29937, const_tbl+174165)
MAKE_LITERAL_PAIR(const_tbl+29920, const_tbl+174182)
MAKE_LITERAL_PAIR(const_tbl+29903, const_tbl+174199)
MAKE_LITERAL_PAIR(const_tbl+29886, const_tbl+174216)
MAKE_LITERAL_PAIR(const_tbl+29869, const_tbl+174233)
MAKE_LITERAL_PAIR(const_tbl+29852, const_tbl+174250)
MAKE_LITERAL_PAIR(const_tbl+29835, const_tbl+174267)
MAKE_LITERAL_PAIR(const_tbl+29818, const_tbl+174284)
MAKE_LITERAL_PAIR(const_tbl+29801, const_tbl+174301)
MAKE_LITERAL_PAIR(const_tbl+29784, const_tbl+174318)
MAKE_LITERAL_PAIR(const_tbl+29767, const_tbl+174335)
MAKE_LITERAL_PAIR(const_tbl+29750, const_tbl+174352)
MAKE_LITERAL_PAIR(const_tbl+29733, const_tbl+174369)
MAKE_LITERAL_PAIR(const_tbl+29716, const_tbl+174386)
MAKE_LITERAL_PAIR(const_tbl+29699, const_tbl+174403)
MAKE_LITERAL_PAIR(const_tbl+29682, const_tbl+174420)
MAKE_LITERAL_PAIR(const_tbl+29665, const_tbl+174437)
MAKE_LITERAL_PAIR(const_tbl+29648, const_tbl+174454)
MAKE_LITERAL_PAIR(const_tbl+29631, const_tbl+174471)
MAKE_LITERAL_PAIR(const_tbl+29614, const_tbl+174488)
MAKE_LITERAL_PAIR(const_tbl+29597, const_tbl+174505)
MAKE_LITERAL_PAIR(const_tbl+29580, const_tbl+174522)
MAKE_LITERAL_PAIR(const_tbl+29563, const_tbl+174539)
MAKE_LITERAL_PAIR(const_tbl+29546, const_tbl+174556)
MAKE_LITERAL_PAIR(const_tbl+29529, const_tbl+174573)
MAKE_LITERAL_PAIR(const_tbl+29512, const_tbl+174590)
MAKE_LITERAL_PAIR(const_tbl+29495, const_tbl+174607)
MAKE_LITERAL_PAIR(const_tbl+29478, const_tbl+174624)
MAKE_LITERAL_PAIR(const_tbl+29461, const_tbl+174641)
MAKE_LITERAL_PAIR(const_tbl+29444, const_tbl+174658)
MAKE_LITERAL_PAIR(const_tbl+29427, const_tbl+174675)
MAKE_LITERAL_PAIR(const_tbl+29410, const_tbl+174692)
MAKE_LITERAL_PAIR(const_tbl+29393, const_tbl+174709)
MAKE_LITERAL_PAIR(const_tbl+29376, const_tbl+174726)
MAKE_LITERAL_PAIR(const_tbl+29359, const_tbl+174743)
MAKE_LITERAL_PAIR(const_tbl+29342, const_tbl+174760)
MAKE_LITERAL_PAIR(const_tbl+29325, const_tbl+174777)
MAKE_LITERAL_PAIR(const_tbl+29308, const_tbl+174794)
MAKE_LITERAL_PAIR(const_tbl+29291, const_tbl+174811)
MAKE_LITERAL_PAIR(const_tbl+29274, const_tbl+174828)
MAKE_LITERAL_PAIR(const_tbl+29257, const_tbl+174845)
MAKE_LITERAL_PAIR(const_tbl+29240, const_tbl+174862)
MAKE_LITERAL_PAIR(const_tbl+29223, const_tbl+174879)
MAKE_LITERAL_PAIR(const_tbl+29206, const_tbl+174896)
MAKE_LITERAL_PAIR(const_tbl+29189, const_tbl+174913)
MAKE_LITERAL_PAIR(const_tbl+29172, const_tbl+174930)
MAKE_LITERAL_PAIR(const_tbl+29155, const_tbl+174947)
MAKE_LITERAL_PAIR(const_tbl+29138, const_tbl+174964)
MAKE_LITERAL_PAIR(const_tbl+29121, const_tbl+174981)
MAKE_LITERAL_PAIR(const_tbl+29104, const_tbl+174998)
MAKE_LITERAL_PAIR(const_tbl+29087, const_tbl+175015)
MAKE_LITERAL_PAIR(const_tbl+29070, const_tbl+175032)
MAKE_LITERAL_PAIR(const_tbl+29053, const_tbl+175049)
MAKE_LITERAL_PAIR(const_tbl+29036, const_tbl+175066)
MAKE_LITERAL_PAIR(const_tbl+29019, const_tbl+175083)
MAKE_LITERAL_PAIR(const_tbl+29002, const_tbl+175100)
MAKE_LITERAL_PAIR(const_tbl+28985, const_tbl+175117)
MAKE_LITERAL_PAIR(const_tbl+28968, const_tbl+175134)
MAKE_LITERAL_PAIR(const_tbl+28951, const_tbl+175151)
MAKE_LITERAL_PAIR(const_tbl+28934, const_tbl+175168)
MAKE_LITERAL_PAIR(const_tbl+28917, const_tbl+175185)
MAKE_LITERAL_PAIR(const_tbl+28900, const_tbl+175202)
MAKE_LITERAL_PAIR(const_tbl+28883, const_tbl+175219)
MAKE_LITERAL_PAIR(const_tbl+28866, const_tbl+175236)
MAKE_LITERAL_PAIR(const_tbl+28849, const_tbl+175253)
MAKE_LITERAL_PAIR(const_tbl+28832, const_tbl+175270)
MAKE_LITERAL_PAIR(const_tbl+28815, const_tbl+175287)
MAKE_LITERAL_PAIR(const_tbl+28798, const_tbl+175304)
MAKE_LITERAL_PAIR(const_tbl+28781, const_tbl+175321)
MAKE_LITERAL_PAIR(const_tbl+28764, const_tbl+175338)
MAKE_LITERAL_PAIR(const_tbl+28747, const_tbl+175355)
MAKE_LITERAL_PAIR(const_tbl+28730, const_tbl+175372)
MAKE_LITERAL_PAIR(const_tbl+28713, const_tbl+175389)
MAKE_LITERAL_PAIR(const_tbl+28696, const_tbl+175406)
MAKE_LITERAL_PAIR(const_tbl+28679, const_tbl+175423)
MAKE_LITERAL_PAIR(const_tbl+28662, const_tbl+175440)
MAKE_LITERAL_PAIR(const_tbl+28645, const_tbl+175457)
MAKE_LITERAL_PAIR(const_tbl+28628, const_tbl+175474)
MAKE_LITERAL_PAIR(const_tbl+28611, const_tbl+175491)
MAKE_LITERAL_PAIR(const_tbl+28594, const_tbl+175508)
MAKE_LITERAL_PAIR(const_tbl+28577, const_tbl+175525)
MAKE_LITERAL_PAIR(const_tbl+28560, const_tbl+175542)
MAKE_LITERAL_PAIR(const_tbl+28543, const_tbl+175559)
MAKE_LITERAL_PAIR(const_tbl+28526, const_tbl+175576)
MAKE_LITERAL_PAIR(const_tbl+28509, const_tbl+175593)
MAKE_LITERAL_PAIR(const_tbl+28492, const_tbl+175610)
MAKE_LITERAL_PAIR(const_tbl+28475, const_tbl+175627)
MAKE_LITERAL_PAIR(const_tbl+28458, const_tbl+175644)
MAKE_LITERAL_PAIR(const_tbl+28441, const_tbl+175661)
MAKE_LITERAL_PAIR(const_tbl+28424, const_tbl+175678)
MAKE_LITERAL_PAIR(const_tbl+28407, const_tbl+175695)
MAKE_LITERAL_PAIR(const_tbl+28390, const_tbl+175712)
MAKE_LITERAL_PAIR(const_tbl+28373, const_tbl+175729)
MAKE_LITERAL_PAIR(const_tbl+28356, const_tbl+175746)
MAKE_LITERAL_PAIR(const_tbl+28339, const_tbl+175763)
MAKE_LITERAL_PAIR(const_tbl+28322, const_tbl+175780)
MAKE_LITERAL_PAIR(const_tbl+28305, const_tbl+175797)
MAKE_LITERAL_PAIR(const_tbl+28288, const_tbl+175814)
MAKE_LITERAL_PAIR(const_tbl+28271, const_tbl+175831)
MAKE_LITERAL_PAIR(const_tbl+28254, const_tbl+175848)
MAKE_LITERAL_PAIR(const_tbl+28237, const_tbl+175865)
MAKE_LITERAL_PAIR(const_tbl+28220, const_tbl+175882)
MAKE_LITERAL_PAIR(const_tbl+28203, const_tbl+175899)
MAKE_LITERAL_PAIR(const_tbl+28186, const_tbl+175916)
MAKE_LITERAL_PAIR(const_tbl+28169, const_tbl+175933)
MAKE_LITERAL_PAIR(const_tbl+28152, const_tbl+175950)
MAKE_LITERAL_PAIR(const_tbl+28135, const_tbl+175967)
MAKE_LITERAL_PAIR(const_tbl+28118, const_tbl+175984)
MAKE_LITERAL_PAIR(const_tbl+28101, const_tbl+176001)
MAKE_LITERAL_PAIR(const_tbl+28084, const_tbl+176018)
MAKE_LITERAL_PAIR(const_tbl+28067, const_tbl+176035)
MAKE_LITERAL_PAIR(const_tbl+28050, const_tbl+176052)
MAKE_LITERAL_PAIR(const_tbl+28033, const_tbl+176069)
MAKE_LITERAL_PAIR(const_tbl+28016, const_tbl+176086)
MAKE_LITERAL_PAIR(const_tbl+27999, const_tbl+176103)
MAKE_LITERAL_PAIR(const_tbl+27982, const_tbl+176120)
MAKE_LITERAL_PAIR(const_tbl+27965, const_tbl+176137)
MAKE_LITERAL_PAIR(const_tbl+27948, const_tbl+176154)
MAKE_LITERAL_PAIR(const_tbl+27931, const_tbl+176171)
MAKE_LITERAL_PAIR(const_tbl+27914, const_tbl+176188)
MAKE_LITERAL_PAIR(const_tbl+27897, const_tbl+176205)
MAKE_LITERAL_PAIR(const_tbl+27880, const_tbl+176222)
MAKE_LITERAL_PAIR(const_tbl+27863, const_tbl+176239)
MAKE_LITERAL_PAIR(const_tbl+27846, const_tbl+176256)
MAKE_LITERAL_PAIR(const_tbl+27829, const_tbl+176273)
MAKE_LITERAL_PAIR(const_tbl+27812, const_tbl+176290)
MAKE_LITERAL_PAIR(const_tbl+27795, const_tbl+176307)
MAKE_LITERAL_PAIR(const_tbl+27778, const_tbl+176324)
MAKE_LITERAL_PAIR(const_tbl+27761, const_tbl+176341)
MAKE_LITERAL_PAIR(const_tbl+27744, const_tbl+176358)
MAKE_LITERAL_PAIR(const_tbl+27727, const_tbl+176375)
MAKE_LITERAL_PAIR(const_tbl+27710, const_tbl+176392)
MAKE_LITERAL_PAIR(const_tbl+27693, const_tbl+176409)
MAKE_LITERAL_PAIR(const_tbl+27676, const_tbl+176426)
MAKE_LITERAL_PAIR(const_tbl+27659, const_tbl+176443)
MAKE_LITERAL_PAIR(const_tbl+27642, const_tbl+176460)
MAKE_LITERAL_PAIR(const_tbl+27625, const_tbl+176477)
MAKE_LITERAL_PAIR(const_tbl+27608, const_tbl+176494)
MAKE_LITERAL_PAIR(const_tbl+27591, const_tbl+176511)
MAKE_LITERAL_PAIR(const_tbl+27574, const_tbl+176528)
MAKE_LITERAL_PAIR(const_tbl+27557, const_tbl+176545)
MAKE_LITERAL_PAIR(const_tbl+27540, const_tbl+176562)
MAKE_LITERAL_PAIR(const_tbl+27523, const_tbl+176579)
MAKE_LITERAL_PAIR(const_tbl+27506, const_tbl+176596)
MAKE_LITERAL_PAIR(const_tbl+27489, const_tbl+176613)
MAKE_LITERAL_PAIR(const_tbl+27472, const_tbl+176630)
MAKE_LITERAL_PAIR(const_tbl+27455, const_tbl+176647)
MAKE_LITERAL_PAIR(const_tbl+27438, const_tbl+176664)
MAKE_LITERAL_PAIR(const_tbl+27421, const_tbl+176681)
MAKE_LITERAL_PAIR(const_tbl+27404, const_tbl+176698)
MAKE_LITERAL_PAIR(const_tbl+27387, const_tbl+176715)
MAKE_LITERAL_PAIR(const_tbl+27370, const_tbl+176732)
MAKE_LITERAL_PAIR(const_tbl+27353, const_tbl+176749)
MAKE_LITERAL_PAIR(const_tbl+27336, const_tbl+176766)
MAKE_LITERAL_PAIR(const_tbl+27319, const_tbl+176783)
MAKE_LITERAL_PAIR(const_tbl+27302, const_tbl+176800)
MAKE_LITERAL_PAIR(const_tbl+27285, const_tbl+176817)
MAKE_LITERAL_PAIR(const_tbl+27268, const_tbl+176834)
MAKE_LITERAL_PAIR(const_tbl+27251, const_tbl+176851)
MAKE_LITERAL_PAIR(const_tbl+27234, const_tbl+176868)
MAKE_LITERAL_PAIR(const_tbl+27217, const_tbl+176885)
MAKE_LITERAL_PAIR(const_tbl+27200, const_tbl+176902)
MAKE_LITERAL_PAIR(const_tbl+27183, const_tbl+176919)
MAKE_LITERAL_PAIR(const_tbl+27166, const_tbl+176936)
MAKE_LITERAL_PAIR(const_tbl+27149, const_tbl+176953)
MAKE_LITERAL_PAIR(const_tbl+27132, const_tbl+176970)
MAKE_LITERAL_PAIR(const_tbl+27115, const_tbl+176987)
MAKE_LITERAL_PAIR(const_tbl+27098, const_tbl+177004)
MAKE_LITERAL_PAIR(const_tbl+27081, const_tbl+177021)
MAKE_LITERAL_PAIR(const_tbl+27064, const_tbl+177038)
MAKE_LITERAL_PAIR(const_tbl+27047, const_tbl+177055)
MAKE_LITERAL_PAIR(const_tbl+27030, const_tbl+177072)
MAKE_LITERAL_PAIR(const_tbl+27013, const_tbl+177089)
MAKE_LITERAL_PAIR(const_tbl+26996, const_tbl+177106)
MAKE_LITERAL_PAIR(const_tbl+26979, const_tbl+177123)
MAKE_LITERAL_PAIR(const_tbl+26962, const_tbl+177140)
MAKE_LITERAL_PAIR(const_tbl+26945, const_tbl+177157)
MAKE_LITERAL_PAIR(const_tbl+26928, const_tbl+177174)
MAKE_LITERAL_PAIR(const_tbl+26911, const_tbl+177191)
MAKE_LITERAL_PAIR(const_tbl+26894, const_tbl+177208)
MAKE_LITERAL_PAIR(const_tbl+26877, const_tbl+177225)
MAKE_LITERAL_PAIR(const_tbl+26860, const_tbl+177242)
MAKE_LITERAL_PAIR(const_tbl+26843, const_tbl+177259)
MAKE_LITERAL_PAIR(const_tbl+26826, const_tbl+177276)
MAKE_LITERAL_PAIR(const_tbl+26809, const_tbl+177293)
MAKE_LITERAL_PAIR(const_tbl+26792, const_tbl+177310)
MAKE_LITERAL_PAIR(const_tbl+26775, const_tbl+177327)
MAKE_LITERAL_PAIR(const_tbl+26758, const_tbl+177344)
MAKE_LITERAL_PAIR(const_tbl+26741, const_tbl+177361)
MAKE_LITERAL_PAIR(const_tbl+26724, const_tbl+177378)
MAKE_LITERAL_PAIR(const_tbl+26707, const_tbl+177395)
MAKE_LITERAL_PAIR(const_tbl+26690, const_tbl+177412)
MAKE_LITERAL_PAIR(const_tbl+26673, const_tbl+177429)
MAKE_LITERAL_PAIR(const_tbl+26656, const_tbl+177446)
MAKE_LITERAL_PAIR(const_tbl+26639, const_tbl+177463)
MAKE_LITERAL_PAIR(const_tbl+26622, const_tbl+177480)
MAKE_LITERAL_PAIR(const_tbl+26605, const_tbl+177497)
MAKE_LITERAL_PAIR(const_tbl+26588, const_tbl+177514)
MAKE_LITERAL_PAIR(const_tbl+26571, const_tbl+177531)
MAKE_LITERAL_PAIR(const_tbl+26554, const_tbl+177548)
MAKE_LITERAL_PAIR(const_tbl+26537, const_tbl+177565)
MAKE_LITERAL_PAIR(const_tbl+26520, const_tbl+177582)
MAKE_LITERAL_PAIR(const_tbl+26503, const_tbl+177599)
MAKE_LITERAL_PAIR(const_tbl+26486, const_tbl+177616)
MAKE_LITERAL_PAIR(const_tbl+26469, const_tbl+177633)
MAKE_LITERAL_PAIR(const_tbl+26452, const_tbl+177650)
MAKE_LITERAL_PAIR(const_tbl+26435, const_tbl+177667)
MAKE_LITERAL_PAIR(const_tbl+26418, const_tbl+177684)
MAKE_LITERAL_PAIR(const_tbl+26401, const_tbl+177701)
MAKE_LITERAL_PAIR(const_tbl+26384, const_tbl+177718)
MAKE_LITERAL_PAIR(const_tbl+26367, const_tbl+177735)
MAKE_LITERAL_PAIR(const_tbl+26350, const_tbl+177752)
MAKE_LITERAL_PAIR(const_tbl+26333, const_tbl+177769)
MAKE_LITERAL_PAIR(const_tbl+26316, const_tbl+177786)
MAKE_LITERAL_PAIR(const_tbl+26299, const_tbl+177803)
MAKE_LITERAL_PAIR(const_tbl+26282, const_tbl+177820)
MAKE_LITERAL_PAIR(const_tbl+26265, const_tbl+177837)
MAKE_LITERAL_PAIR(const_tbl+26248, const_tbl+177854)
MAKE_LITERAL_PAIR(const_tbl+26231, const_tbl+177871)
MAKE_LITERAL_PAIR(const_tbl+26214, const_tbl+177888)
MAKE_LITERAL_PAIR(const_tbl+26197, const_tbl+177905)
MAKE_LITERAL_PAIR(const_tbl+26180, const_tbl+177922)
MAKE_LITERAL_PAIR(const_tbl+26163, const_tbl+177939)
MAKE_LITERAL_PAIR(const_tbl+26146, const_tbl+177956)
MAKE_LITERAL_PAIR(const_tbl+26129, const_tbl+177973)
MAKE_LITERAL_PAIR(const_tbl+26112, const_tbl+177990)
MAKE_LITERAL_PAIR(const_tbl+26095, const_tbl+178007)
MAKE_LITERAL_PAIR(const_tbl+26078, const_tbl+178024)
MAKE_LITERAL_PAIR(const_tbl+26061, const_tbl+178041)
MAKE_LITERAL_PAIR(const_tbl+26044, const_tbl+178058)
MAKE_LITERAL_PAIR(const_tbl+26027, const_tbl+178075)
MAKE_LITERAL_PAIR(const_tbl+26010, const_tbl+178092)
MAKE_LITERAL_PAIR(const_tbl+25993, const_tbl+178109)
MAKE_LITERAL_PAIR(const_tbl+25976, const_tbl+178126)
MAKE_LITERAL_PAIR(const_tbl+25959, const_tbl+178143)
MAKE_LITERAL_PAIR(const_tbl+25942, const_tbl+178160)
MAKE_LITERAL_PAIR(const_tbl+25925, const_tbl+178177)
MAKE_LITERAL_PAIR(const_tbl+25908, const_tbl+178194)
MAKE_LITERAL_PAIR(const_tbl+25891, const_tbl+178211)
MAKE_LITERAL_PAIR(const_tbl+25874, const_tbl+178228)
MAKE_LITERAL_PAIR(const_tbl+25857, const_tbl+178245)
MAKE_LITERAL_PAIR(const_tbl+25840, const_tbl+178262)
MAKE_LITERAL_PAIR(const_tbl+25823, const_tbl+178279)
MAKE_LITERAL_PAIR(const_tbl+25806, const_tbl+178296)
MAKE_LITERAL_PAIR(const_tbl+25789, const_tbl+178313)
MAKE_LITERAL_PAIR(const_tbl+25772, const_tbl+178330)
MAKE_LITERAL_PAIR(const_tbl+25755, const_tbl+178347)
MAKE_LITERAL_PAIR(const_tbl+25738, const_tbl+178364)
MAKE_LITERAL_PAIR(const_tbl+25721, const_tbl+178381)
MAKE_LITERAL_PAIR(const_tbl+25704, const_tbl+178398)
MAKE_LITERAL_PAIR(const_tbl+25687, const_tbl+178415)
MAKE_LITERAL_PAIR(const_tbl+25670, const_tbl+178432)
MAKE_LITERAL_PAIR(const_tbl+25653, const_tbl+178449)
MAKE_LITERAL_PAIR(const_tbl+25636, const_tbl+178466)
MAKE_LITERAL_PAIR(const_tbl+25619, const_tbl+178483)
MAKE_LITERAL_PAIR(const_tbl+25602, const_tbl+178500)
MAKE_LITERAL_PAIR(const_tbl+25585, const_tbl+178517)
MAKE_LITERAL_PAIR(const_tbl+25568, const_tbl+178534)
MAKE_LITERAL_PAIR(const_tbl+25551, const_tbl+178551)
MAKE_LITERAL_PAIR(const_tbl+25534, const_tbl+178568)
MAKE_LITERAL_PAIR(const_tbl+25517, const_tbl+178585)
MAKE_LITERAL_PAIR(const_tbl+25500, const_tbl+178602)
MAKE_LITERAL_PAIR(const_tbl+25483, const_tbl+178619)
MAKE_LITERAL_PAIR(const_tbl+25466, const_tbl+178636)
MAKE_LITERAL_PAIR(const_tbl+25449, const_tbl+178653)
MAKE_LITERAL_PAIR(const_tbl+25432, const_tbl+178670)
MAKE_LITERAL_PAIR(const_tbl+25415, const_tbl+178687)
MAKE_LITERAL_PAIR(const_tbl+25398, const_tbl+178704)
MAKE_LITERAL_PAIR(const_tbl+25381, const_tbl+178721)
MAKE_LITERAL_PAIR(const_tbl+25364, const_tbl+178738)
MAKE_LITERAL_PAIR(const_tbl+25347, const_tbl+178755)
MAKE_LITERAL_PAIR(const_tbl+25330, const_tbl+178772)
MAKE_LITERAL_PAIR(const_tbl+25313, const_tbl+178789)
MAKE_LITERAL_PAIR(const_tbl+25296, const_tbl+178806)
MAKE_LITERAL_PAIR(const_tbl+25279, const_tbl+178823)
MAKE_LITERAL_PAIR(const_tbl+25262, const_tbl+178840)
MAKE_LITERAL_PAIR(const_tbl+25245, const_tbl+178857)
MAKE_LITERAL_PAIR(const_tbl+25228, const_tbl+178874)
MAKE_LITERAL_PAIR(const_tbl+25211, const_tbl+178891)
MAKE_LITERAL_PAIR(const_tbl+25194, const_tbl+178908)
MAKE_LITERAL_PAIR(const_tbl+25177, const_tbl+178925)
MAKE_LITERAL_PAIR(const_tbl+25160, const_tbl+178942)
MAKE_LITERAL_PAIR(const_tbl+25143, const_tbl+178959)
MAKE_LITERAL_PAIR(const_tbl+25126, const_tbl+178976)
MAKE_LITERAL_PAIR(const_tbl+25109, const_tbl+178993)
MAKE_LITERAL_PAIR(const_tbl+25092, const_tbl+179010)
MAKE_LITERAL_PAIR(const_tbl+25075, const_tbl+179027)
MAKE_LITERAL_PAIR(const_tbl+25058, const_tbl+179044)
MAKE_LITERAL_PAIR(const_tbl+25041, const_tbl+179061)
MAKE_LITERAL_PAIR(const_tbl+25024, const_tbl+179078)
MAKE_LITERAL_PAIR(const_tbl+25007, const_tbl+179095)
MAKE_LITERAL_PAIR(const_tbl+24990, const_tbl+179112)
MAKE_LITERAL_PAIR(const_tbl+24973, const_tbl+179129)
MAKE_LITERAL_PAIR(const_tbl+24956, const_tbl+179146)
MAKE_LITERAL_PAIR(const_tbl+24939, const_tbl+179163)
MAKE_LITERAL_PAIR(const_tbl+24922, const_tbl+179180)
MAKE_LITERAL_PAIR(const_tbl+24905, const_tbl+179197)
MAKE_LITERAL_PAIR(const_tbl+24888, const_tbl+179214)
MAKE_LITERAL_PAIR(const_tbl+24871, const_tbl+179231)
MAKE_LITERAL_PAIR(const_tbl+24854, const_tbl+179248)
MAKE_LITERAL_PAIR(const_tbl+24837, const_tbl+179265)
MAKE_LITERAL_PAIR(const_tbl+24820, const_tbl+179282)
MAKE_LITERAL_PAIR(const_tbl+24803, const_tbl+179299)
MAKE_LITERAL_PAIR(const_tbl+24786, const_tbl+179316)
MAKE_LITERAL_PAIR(const_tbl+24769, const_tbl+179333)
MAKE_LITERAL_PAIR(const_tbl+24752, const_tbl+179350)
MAKE_LITERAL_PAIR(const_tbl+24735, const_tbl+179367)
MAKE_LITERAL_PAIR(const_tbl+24718, const_tbl+179384)
MAKE_LITERAL_PAIR(const_tbl+24701, const_tbl+179401)
MAKE_LITERAL_PAIR(const_tbl+24684, const_tbl+179418)
MAKE_LITERAL_PAIR(const_tbl+24667, const_tbl+179435)
MAKE_LITERAL_PAIR(const_tbl+24650, const_tbl+179452)
MAKE_LITERAL_PAIR(const_tbl+24633, const_tbl+179469)
MAKE_LITERAL_PAIR(const_tbl+24616, const_tbl+179486)
MAKE_LITERAL_PAIR(const_tbl+24599, const_tbl+179503)
MAKE_LITERAL_PAIR(const_tbl+24582, const_tbl+179520)
MAKE_LITERAL_PAIR(const_tbl+24565, const_tbl+179537)
MAKE_LITERAL_PAIR(const_tbl+24548, const_tbl+179554)
MAKE_LITERAL_PAIR(const_tbl+24531, const_tbl+179571)
MAKE_LITERAL_PAIR(const_tbl+24514, const_tbl+179588)
MAKE_LITERAL_PAIR(const_tbl+24497, const_tbl+179605)
MAKE_LITERAL_PAIR(const_tbl+24480, const_tbl+179622)
MAKE_LITERAL_PAIR(const_tbl+24463, const_tbl+179639)
MAKE_LITERAL_PAIR(const_tbl+24446, const_tbl+179656)
MAKE_LITERAL_PAIR(const_tbl+24429, const_tbl+179673)
MAKE_LITERAL_PAIR(const_tbl+24412, const_tbl+179690)
MAKE_LITERAL_PAIR(const_tbl+24395, const_tbl+179707)
MAKE_LITERAL_PAIR(const_tbl+24378, const_tbl+179724)
MAKE_LITERAL_PAIR(const_tbl+24361, const_tbl+179741)
MAKE_LITERAL_PAIR(const_tbl+24344, const_tbl+179758)
MAKE_LITERAL_PAIR(const_tbl+24327, const_tbl+179775)
MAKE_LITERAL_PAIR(const_tbl+24310, const_tbl+179792)
MAKE_LITERAL_PAIR(const_tbl+24293, const_tbl+179809)
MAKE_LITERAL_PAIR(const_tbl+24276, const_tbl+179826)
MAKE_LITERAL_PAIR(const_tbl+24259, const_tbl+179843)
MAKE_LITERAL_PAIR(const_tbl+24242, const_tbl+179860)
MAKE_LITERAL_PAIR(const_tbl+24225, const_tbl+179877)
MAKE_LITERAL_PAIR(const_tbl+24208, const_tbl+179894)
MAKE_LITERAL_PAIR(const_tbl+24191, const_tbl+179911)
MAKE_LITERAL_PAIR(const_tbl+24174, const_tbl+179928)
MAKE_LITERAL_PAIR(const_tbl+24157, const_tbl+179945)
MAKE_LITERAL_PAIR(const_tbl+24140, const_tbl+179962)
MAKE_LITERAL_PAIR(const_tbl+24123, const_tbl+179979)
MAKE_LITERAL_PAIR(const_tbl+24106, const_tbl+179996)
MAKE_LITERAL_PAIR(const_tbl+24089, const_tbl+180013)
MAKE_LITERAL_PAIR(const_tbl+24072, const_tbl+180030)
MAKE_LITERAL_PAIR(const_tbl+24055, const_tbl+180047)
MAKE_LITERAL_PAIR(const_tbl+24038, const_tbl+180064)
MAKE_LITERAL_PAIR(const_tbl+24021, const_tbl+180081)
MAKE_LITERAL_PAIR(const_tbl+24004, const_tbl+180098)
MAKE_LITERAL_PAIR(const_tbl+23987, const_tbl+180115)
MAKE_LITERAL_PAIR(const_tbl+23970, const_tbl+180132)
MAKE_LITERAL_PAIR(const_tbl+23953, const_tbl+180149)
MAKE_LITERAL_PAIR(const_tbl+23936, const_tbl+180166)
MAKE_LITERAL_PAIR(const_tbl+23919, const_tbl+180183)
MAKE_LITERAL_PAIR(const_tbl+23902, const_tbl+180200)
MAKE_LITERAL_PAIR(const_tbl+23885, const_tbl+180217)
MAKE_LITERAL_PAIR(const_tbl+23868, const_tbl+180234)
MAKE_LITERAL_PAIR(const_tbl+23851, const_tbl+180251)
MAKE_LITERAL_PAIR(const_tbl+23834, const_tbl+180268)
MAKE_LITERAL_PAIR(const_tbl+23817, const_tbl+180285)
MAKE_LITERAL_PAIR(const_tbl+23800, const_tbl+180302)
MAKE_LITERAL_PAIR(const_tbl+23783, const_tbl+180319)
MAKE_LITERAL_PAIR(const_tbl+23766, const_tbl+180336)
MAKE_LITERAL_PAIR(const_tbl+23749, const_tbl+180353)
MAKE_LITERAL_PAIR(const_tbl+23732, const_tbl+180370)
MAKE_LITERAL_PAIR(const_tbl+23715, const_tbl+180387)
MAKE_LITERAL_PAIR(const_tbl+23698, const_tbl+180404)
MAKE_LITERAL_PAIR(const_tbl+23681, const_tbl+180421)
MAKE_LITERAL_PAIR(const_tbl+23664, const_tbl+180438)
MAKE_LITERAL_PAIR(const_tbl+23647, const_tbl+180455)
MAKE_LITERAL_PAIR(const_tbl+23630, const_tbl+180472)
MAKE_LITERAL_PAIR(const_tbl+23613, const_tbl+180489)
MAKE_LITERAL_PAIR(const_tbl+23596, const_tbl+180506)
MAKE_LITERAL_PAIR(const_tbl+23579, const_tbl+180523)
MAKE_LITERAL_PAIR(const_tbl+23562, const_tbl+180540)
MAKE_LITERAL_PAIR(const_tbl+23545, const_tbl+180557)
MAKE_LITERAL_PAIR(const_tbl+23528, const_tbl+180574)
MAKE_LITERAL_PAIR(const_tbl+23511, const_tbl+180591)
MAKE_LITERAL_PAIR(const_tbl+23494, const_tbl+180608)
MAKE_LITERAL_PAIR(const_tbl+23477, const_tbl+180625)
MAKE_LITERAL_PAIR(const_tbl+23460, const_tbl+180642)
MAKE_LITERAL_PAIR(const_tbl+23443, const_tbl+180659)
MAKE_LITERAL_PAIR(const_tbl+23426, const_tbl+180676)
MAKE_LITERAL_PAIR(const_tbl+23409, const_tbl+180693)
MAKE_LITERAL_PAIR(const_tbl+23392, const_tbl+180710)
MAKE_LITERAL_PAIR(const_tbl+23375, const_tbl+180727)
MAKE_LITERAL_PAIR(const_tbl+23358, const_tbl+180744)
MAKE_LITERAL_PAIR(const_tbl+23341, const_tbl+180761)
MAKE_LITERAL_PAIR(const_tbl+23324, const_tbl+180778)
MAKE_LITERAL_PAIR(const_tbl+23307, const_tbl+180795)
MAKE_LITERAL_PAIR(const_tbl+23290, const_tbl+180812)
MAKE_LITERAL_PAIR(const_tbl+23273, const_tbl+180829)
MAKE_LITERAL_PAIR(const_tbl+23256, const_tbl+180846)
MAKE_LITERAL_PAIR(const_tbl+23239, const_tbl+180863)
MAKE_LITERAL_PAIR(const_tbl+23222, const_tbl+180880)
MAKE_LITERAL_PAIR(const_tbl+23205, const_tbl+180897)
MAKE_LITERAL_PAIR(const_tbl+23188, const_tbl+180914)
MAKE_LITERAL_PAIR(const_tbl+23171, const_tbl+180931)
MAKE_LITERAL_PAIR(const_tbl+23154, const_tbl+180948)
MAKE_LITERAL_PAIR(const_tbl+23137, const_tbl+180965)
MAKE_LITERAL_PAIR(const_tbl+23120, const_tbl+180982)
MAKE_LITERAL_PAIR(const_tbl+23103, const_tbl+180999)
MAKE_LITERAL_PAIR(const_tbl+23086, const_tbl+181016)
MAKE_LITERAL_PAIR(const_tbl+23069, const_tbl+181033)
MAKE_LITERAL_PAIR(const_tbl+23052, const_tbl+181050)
MAKE_LITERAL_PAIR(const_tbl+23035, const_tbl+181067)
MAKE_LITERAL_PAIR(const_tbl+23018, const_tbl+181084)
MAKE_LITERAL_PAIR(const_tbl+23001, const_tbl+181101)
MAKE_LITERAL_PAIR(const_tbl+22984, const_tbl+181118)
MAKE_LITERAL_PAIR(const_tbl+22967, const_tbl+181135)
MAKE_LITERAL_PAIR(const_tbl+22950, const_tbl+181152)
MAKE_LITERAL_PAIR(const_tbl+22933, const_tbl+181169)
MAKE_LITERAL_PAIR(const_tbl+22916, const_tbl+181186)
MAKE_LITERAL_PAIR(const_tbl+22899, const_tbl+181203)
MAKE_LITERAL_PAIR(const_tbl+22882, const_tbl+181220)
MAKE_LITERAL_PAIR(const_tbl+22865, const_tbl+181237)
MAKE_LITERAL_PAIR(const_tbl+22848, const_tbl+181254)
MAKE_LITERAL_PAIR(const_tbl+22831, const_tbl+181271)
MAKE_LITERAL_PAIR(const_tbl+22814, const_tbl+181288)
MAKE_LITERAL_PAIR(const_tbl+22797, const_tbl+181305)
MAKE_LITERAL_PAIR(const_tbl+22780, const_tbl+181322)
MAKE_LITERAL_PAIR(const_tbl+22763, const_tbl+181339)
MAKE_LITERAL_PAIR(const_tbl+22746, const_tbl+181356)
MAKE_LITERAL_PAIR(const_tbl+22729, const_tbl+181373)
MAKE_LITERAL_PAIR(const_tbl+22712, const_tbl+181390)
MAKE_LITERAL_PAIR(const_tbl+22695, const_tbl+181407)
MAKE_LITERAL_PAIR(const_tbl+22678, const_tbl+181424)
MAKE_LITERAL_PAIR(const_tbl+22661, const_tbl+181441)
MAKE_LITERAL_PAIR(const_tbl+22644, const_tbl+181458)
MAKE_LITERAL_PAIR(const_tbl+22627, const_tbl+181475)
MAKE_LITERAL_PAIR(const_tbl+22610, const_tbl+181492)
MAKE_LITERAL_PAIR(const_tbl+22593, const_tbl+181509)
MAKE_LITERAL_PAIR(const_tbl+22576, const_tbl+181526)
MAKE_LITERAL_PAIR(const_tbl+22559, const_tbl+181543)
MAKE_LITERAL_PAIR(const_tbl+22542, const_tbl+181560)
MAKE_LITERAL_PAIR(const_tbl+22525, const_tbl+181577)
MAKE_LITERAL_PAIR(const_tbl+22508, const_tbl+181594)
MAKE_LITERAL_PAIR(const_tbl+22491, const_tbl+181611)
MAKE_LITERAL_PAIR(const_tbl+22474, const_tbl+181628)
MAKE_LITERAL_PAIR(const_tbl+22457, const_tbl+181645)
MAKE_LITERAL_PAIR(const_tbl+22440, const_tbl+181662)
MAKE_LITERAL_PAIR(const_tbl+22423, const_tbl+181679)
MAKE_LITERAL_PAIR(const_tbl+22406, const_tbl+181696)
MAKE_LITERAL_PAIR(const_tbl+22389, const_tbl+181713)
MAKE_LITERAL_PAIR(const_tbl+22372, const_tbl+181730)
MAKE_LITERAL_PAIR(const_tbl+22355, const_tbl+181747)
MAKE_LITERAL_PAIR(const_tbl+22338, const_tbl+181764)
MAKE_LITERAL_PAIR(const_tbl+22321, const_tbl+181781)
MAKE_LITERAL_PAIR(const_tbl+22304, const_tbl+181798)
MAKE_LITERAL_PAIR(const_tbl+22287, const_tbl+181815)
MAKE_LITERAL_PAIR(const_tbl+22270, const_tbl+181832)
MAKE_LITERAL_PAIR(const_tbl+22253, const_tbl+181849)
MAKE_LITERAL_PAIR(const_tbl+22236, const_tbl+181866)
MAKE_LITERAL_PAIR(const_tbl+22219, const_tbl+181883)
MAKE_LITERAL_PAIR(const_tbl+22202, const_tbl+181900)
MAKE_LITERAL_PAIR(const_tbl+22185, const_tbl+181917)
MAKE_LITERAL_PAIR(const_tbl+22168, const_tbl+181934)
MAKE_LITERAL_PAIR(const_tbl+22151, const_tbl+181951)
MAKE_LITERAL_PAIR(const_tbl+22134, const_tbl+181968)
MAKE_LITERAL_PAIR(const_tbl+22117, const_tbl+181985)
MAKE_LITERAL_PAIR(const_tbl+22100, const_tbl+182002)
MAKE_LITERAL_PAIR(const_tbl+22083, const_tbl+182019)
MAKE_LITERAL_PAIR(const_tbl+22066, const_tbl+182036)
MAKE_LITERAL_PAIR(const_tbl+22049, const_tbl+182053)
MAKE_LITERAL_PAIR(const_tbl+22032, const_tbl+182070)
MAKE_LITERAL_PAIR(const_tbl+22015, const_tbl+182087)
MAKE_LITERAL_PAIR(const_tbl+21998, const_tbl+182104)
MAKE_LITERAL_PAIR(const_tbl+21981, const_tbl+182121)
MAKE_LITERAL_PAIR(const_tbl+21964, const_tbl+182138)
MAKE_LITERAL_PAIR(const_tbl+21947, const_tbl+182155)
MAKE_LITERAL_PAIR(const_tbl+21930, const_tbl+182172)
MAKE_LITERAL_PAIR(const_tbl+21913, const_tbl+182189)
MAKE_LITERAL_PAIR(const_tbl+21896, const_tbl+182206)
MAKE_LITERAL_PAIR(const_tbl+21879, const_tbl+182223)
MAKE_LITERAL_PAIR(const_tbl+21862, const_tbl+182240)
MAKE_LITERAL_PAIR(const_tbl+21845, const_tbl+182257)
MAKE_LITERAL_PAIR(const_tbl+21828, const_tbl+182274)
MAKE_LITERAL_PAIR(const_tbl+21811, const_tbl+182291)
MAKE_LITERAL_PAIR(const_tbl+21794, const_tbl+182308)
MAKE_LITERAL_PAIR(const_tbl+21777, const_tbl+182325)
MAKE_LITERAL_PAIR(const_tbl+21760, const_tbl+182342)
MAKE_LITERAL_PAIR(const_tbl+21743, const_tbl+182359)
MAKE_LITERAL_PAIR(const_tbl+21726, const_tbl+182376)
MAKE_LITERAL_PAIR(const_tbl+21709, const_tbl+182393)
MAKE_LITERAL_PAIR(const_tbl+21692, const_tbl+182410)
MAKE_LITERAL_PAIR(const_tbl+21675, const_tbl+182427)
MAKE_LITERAL_PAIR(const_tbl+21658, const_tbl+182444)
MAKE_LITERAL_PAIR(const_tbl+21641, const_tbl+182461)
MAKE_LITERAL_PAIR(const_tbl+21624, const_tbl+182478)
MAKE_LITERAL_PAIR(const_tbl+21607, const_tbl+182495)
MAKE_LITERAL_PAIR(const_tbl+21590, const_tbl+182512)
MAKE_LITERAL_PAIR(const_tbl+21573, const_tbl+182529)
MAKE_LITERAL_PAIR(const_tbl+21556, const_tbl+182546)
MAKE_LITERAL_PAIR(const_tbl+21539, const_tbl+182563)
MAKE_LITERAL_PAIR(const_tbl+21522, const_tbl+182580)
MAKE_LITERAL_PAIR(const_tbl+21505, const_tbl+182597)
MAKE_LITERAL_PAIR(const_tbl+21488, const_tbl+182614)
MAKE_LITERAL_PAIR(const_tbl+21471, const_tbl+182631)
MAKE_LITERAL_PAIR(const_tbl+21454, const_tbl+182648)
MAKE_LITERAL_PAIR(const_tbl+21437, const_tbl+182665)
MAKE_LITERAL_PAIR(const_tbl+21420, const_tbl+182682)
MAKE_LITERAL_PAIR(const_tbl+21403, const_tbl+182699)
MAKE_LITERAL_PAIR(const_tbl+21386, const_tbl+182716)
MAKE_LITERAL_PAIR(const_tbl+21369, const_tbl+182733)
MAKE_LITERAL_PAIR(const_tbl+21352, const_tbl+182750)
MAKE_LITERAL_PAIR(const_tbl+21335, const_tbl+182767)
MAKE_LITERAL_PAIR(const_tbl+21318, const_tbl+182784)
MAKE_LITERAL_PAIR(const_tbl+21301, const_tbl+182801)
MAKE_LITERAL_PAIR(const_tbl+21284, const_tbl+182818)
MAKE_LITERAL_PAIR(const_tbl+21267, const_tbl+182835)
MAKE_LITERAL_PAIR(const_tbl+21250, const_tbl+182852)
MAKE_LITERAL_PAIR(const_tbl+21233, const_tbl+182869)
MAKE_LITERAL_PAIR(const_tbl+21216, const_tbl+182886)
MAKE_LITERAL_PAIR(const_tbl+21199, const_tbl+182903)
MAKE_LITERAL_PAIR(const_tbl+21182, const_tbl+182920)
MAKE_LITERAL_PAIR(const_tbl+21165, const_tbl+182937)
MAKE_LITERAL_PAIR(const_tbl+21148, const_tbl+182954)
MAKE_LITERAL_PAIR(const_tbl+21131, const_tbl+182971)
MAKE_LITERAL_PAIR(const_tbl+21114, const_tbl+182988)
MAKE_LITERAL_PAIR(const_tbl+21097, const_tbl+183005)
MAKE_LITERAL_PAIR(const_tbl+21080, const_tbl+183022)
MAKE_LITERAL_PAIR(const_tbl+21063, const_tbl+183039)
MAKE_LITERAL_PAIR(const_tbl+21046, const_tbl+183056)
MAKE_LITERAL_PAIR(const_tbl+21029, const_tbl+183073)
MAKE_LITERAL_PAIR(const_tbl+21012, const_tbl+183090)
MAKE_LITERAL_PAIR(const_tbl+20995, const_tbl+183107)
MAKE_LITERAL_PAIR(const_tbl+20978, const_tbl+183124)
MAKE_LITERAL_PAIR(const_tbl+20961, const_tbl+183141)
MAKE_LITERAL_PAIR(const_tbl+20944, const_tbl+183158)
MAKE_LITERAL_PAIR(const_tbl+20927, const_tbl+183175)
MAKE_LITERAL_PAIR(const_tbl+20910, const_tbl+183192)
MAKE_LITERAL_PAIR(const_tbl+20893, const_tbl+183209)
MAKE_LITERAL_PAIR(const_tbl+20876, const_tbl+183226)
MAKE_LITERAL_PAIR(const_tbl+20859, const_tbl+183243)
MAKE_LITERAL_PAIR(const_tbl+20842, const_tbl+183260)
MAKE_LITERAL_PAIR(const_tbl+20825, const_tbl+183277)
MAKE_LITERAL_PAIR(const_tbl+20808, const_tbl+183294)
MAKE_LITERAL_PAIR(const_tbl+20791, const_tbl+183311)
MAKE_LITERAL_PAIR(const_tbl+20774, const_tbl+183328)
MAKE_LITERAL_PAIR(const_tbl+20757, const_tbl+183345)
MAKE_LITERAL_PAIR(const_tbl+20740, const_tbl+183362)
MAKE_LITERAL_PAIR(const_tbl+20723, const_tbl+183379)
MAKE_LITERAL_PAIR(const_tbl+20706, const_tbl+183396)
MAKE_LITERAL_PAIR(const_tbl+20689, const_tbl+183413)
MAKE_LITERAL_PAIR(const_tbl+20672, const_tbl+183430)
MAKE_LITERAL_PAIR(const_tbl+20655, const_tbl+183447)
MAKE_LITERAL_PAIR(const_tbl+20638, const_tbl+183464)
MAKE_LITERAL_PAIR(const_tbl+20621, const_tbl+183481)
MAKE_LITERAL_PAIR(const_tbl+20604, const_tbl+183498)
MAKE_LITERAL_PAIR(const_tbl+20587, const_tbl+183515)
MAKE_LITERAL_PAIR(const_tbl+20570, const_tbl+183532)
MAKE_LITERAL_PAIR(const_tbl+20553, const_tbl+183549)
MAKE_LITERAL_PAIR(const_tbl+20536, const_tbl+183566)
MAKE_LITERAL_PAIR(const_tbl+20519, const_tbl+183583)
MAKE_LITERAL_PAIR(const_tbl+20502, const_tbl+183600)
MAKE_LITERAL_PAIR(const_tbl+20485, const_tbl+183617)
MAKE_LITERAL_PAIR(const_tbl+20468, const_tbl+183634)
MAKE_LITERAL_PAIR(const_tbl+20451, const_tbl+183651)
MAKE_LITERAL_PAIR(const_tbl+20434, const_tbl+183668)
MAKE_LITERAL_PAIR(const_tbl+20417, const_tbl+183685)
MAKE_LITERAL_PAIR(const_tbl+20400, const_tbl+183702)
MAKE_LITERAL_PAIR(const_tbl+20383, const_tbl+183719)
MAKE_LITERAL_PAIR(const_tbl+20366, const_tbl+183736)
MAKE_LITERAL_PAIR(const_tbl+20349, const_tbl+183753)
MAKE_LITERAL_PAIR(const_tbl+20332, const_tbl+183770)
MAKE_LITERAL_PAIR(const_tbl+20315, const_tbl+183787)
MAKE_LITERAL_PAIR(const_tbl+20298, const_tbl+183804)
MAKE_LITERAL_PAIR(const_tbl+20281, const_tbl+183821)
MAKE_LITERAL_PAIR(const_tbl+20264, const_tbl+183838)
MAKE_LITERAL_PAIR(const_tbl+20247, const_tbl+183855)
MAKE_LITERAL_PAIR(const_tbl+20230, const_tbl+183872)
MAKE_LITERAL_PAIR(const_tbl+20213, const_tbl+183889)
MAKE_LITERAL_PAIR(const_tbl+20196, const_tbl+183906)
MAKE_LITERAL_PAIR(const_tbl+20179, const_tbl+183923)
MAKE_LITERAL_PAIR(const_tbl+20162, const_tbl+183940)
MAKE_LITERAL_PAIR(const_tbl+20145, const_tbl+183957)
MAKE_LITERAL_PAIR(const_tbl+20128, const_tbl+183974)
MAKE_LITERAL_PAIR(const_tbl+20111, const_tbl+183991)
MAKE_LITERAL_PAIR(const_tbl+20094, const_tbl+184008)
MAKE_LITERAL_PAIR(const_tbl+20077, const_tbl+184025)
MAKE_LITERAL_PAIR(const_tbl+20060, const_tbl+184042)
MAKE_LITERAL_PAIR(const_tbl+20043, const_tbl+184059)
MAKE_LITERAL_PAIR(const_tbl+20026, const_tbl+184076)
MAKE_LITERAL_PAIR(const_tbl+20009, const_tbl+184093)
MAKE_LITERAL_PAIR(const_tbl+19992, const_tbl+184110)
MAKE_LITERAL_PAIR(const_tbl+19975, const_tbl+184127)
MAKE_LITERAL_PAIR(const_tbl+19958, const_tbl+184144)
MAKE_LITERAL_PAIR(const_tbl+19941, const_tbl+184161)
MAKE_LITERAL_PAIR(const_tbl+19924, const_tbl+184178)
MAKE_LITERAL_PAIR(const_tbl+19907, const_tbl+184195)
MAKE_LITERAL_PAIR(const_tbl+19890, const_tbl+184212)
MAKE_LITERAL_PAIR(const_tbl+19873, const_tbl+184229)
MAKE_LITERAL_PAIR(const_tbl+19856, const_tbl+184246)
MAKE_LITERAL_PAIR(const_tbl+19839, const_tbl+184263)
MAKE_LITERAL_PAIR(const_tbl+19822, const_tbl+184280)
MAKE_LITERAL_PAIR(const_tbl+19805, const_tbl+184297)
MAKE_LITERAL_PAIR(const_tbl+19788, const_tbl+184314)
MAKE_LITERAL_PAIR(const_tbl+19771, const_tbl+184331)
MAKE_LITERAL_PAIR(const_tbl+19754, const_tbl+184348)
MAKE_LITERAL_PAIR(const_tbl+19737, const_tbl+184365)
MAKE_LITERAL_PAIR(const_tbl+19720, const_tbl+184382)
MAKE_LITERAL_PAIR(const_tbl+19703, const_tbl+184399)
MAKE_LITERAL_PAIR(const_tbl+19686, const_tbl+184416)
MAKE_LITERAL_PAIR(const_tbl+19669, const_tbl+184433)
MAKE_LITERAL_PAIR(const_tbl+19652, const_tbl+184450)
MAKE_LITERAL_PAIR(const_tbl+19635, const_tbl+184467)
MAKE_LITERAL_PAIR(const_tbl+19618, const_tbl+184484)
MAKE_LITERAL_PAIR(const_tbl+19601, const_tbl+184501)
MAKE_LITERAL_PAIR(const_tbl+19584, const_tbl+184518)
MAKE_LITERAL_PAIR(const_tbl+19567, const_tbl+184535)
MAKE_LITERAL_PAIR(const_tbl+19550, const_tbl+184552)
MAKE_LITERAL_PAIR(const_tbl+19533, const_tbl+184569)
MAKE_LITERAL_PAIR(const_tbl+19516, const_tbl+184586)
MAKE_LITERAL_PAIR(const_tbl+19499, const_tbl+184603)
MAKE_LITERAL_PAIR(const_tbl+19482, const_tbl+184620)
MAKE_LITERAL_PAIR(const_tbl+19465, const_tbl+184637)
MAKE_LITERAL_PAIR(const_tbl+19448, const_tbl+184654)
MAKE_LITERAL_PAIR(const_tbl+19431, const_tbl+184671)
MAKE_LITERAL_PAIR(const_tbl+19414, const_tbl+184688)
MAKE_LITERAL_PAIR(const_tbl+19397, const_tbl+184705)
MAKE_LITERAL_PAIR(const_tbl+19380, const_tbl+184722)
MAKE_LITERAL_PAIR(const_tbl+19363, const_tbl+184739)
MAKE_LITERAL_PAIR(const_tbl+19346, const_tbl+184756)
MAKE_LITERAL_PAIR(const_tbl+19329, const_tbl+184773)
MAKE_LITERAL_PAIR(const_tbl+19312, const_tbl+184790)
MAKE_LITERAL_PAIR(const_tbl+19295, const_tbl+184807)
MAKE_LITERAL_PAIR(const_tbl+19278, const_tbl+184824)
MAKE_LITERAL_PAIR(const_tbl+19261, const_tbl+184841)
MAKE_LITERAL_PAIR(const_tbl+19244, const_tbl+184858)
MAKE_LITERAL_PAIR(const_tbl+19227, const_tbl+184875)
MAKE_LITERAL_PAIR(const_tbl+19210, const_tbl+184892)
MAKE_LITERAL_PAIR(const_tbl+19193, const_tbl+184909)
MAKE_LITERAL_PAIR(const_tbl+19176, const_tbl+184926)
MAKE_LITERAL_PAIR(const_tbl+19159, const_tbl+184943)
MAKE_LITERAL_PAIR(const_tbl+19142, const_tbl+184960)
MAKE_LITERAL_PAIR(const_tbl+19125, const_tbl+184977)
MAKE_LITERAL_PAIR(const_tbl+19108, const_tbl+184994)
MAKE_LITERAL_PAIR(const_tbl+19091, const_tbl+185011)
MAKE_LITERAL_PAIR(const_tbl+19074, const_tbl+185028)
MAKE_LITERAL_PAIR(const_tbl+19057, const_tbl+185045)
MAKE_LITERAL_PAIR(const_tbl+19040, const_tbl+185062)
MAKE_LITERAL_PAIR(const_tbl+19023, const_tbl+185079)
MAKE_LITERAL_PAIR(const_tbl+19006, const_tbl+185096)
MAKE_LITERAL_PAIR(const_tbl+18989, const_tbl+185113)
MAKE_LITERAL_PAIR(const_tbl+18972, const_tbl+185130)
MAKE_LITERAL_PAIR(const_tbl+18955, const_tbl+185147)
MAKE_LITERAL_PAIR(const_tbl+18938, const_tbl+185164)
MAKE_LITERAL_PAIR(const_tbl+18921, const_tbl+185181)
MAKE_LITERAL_PAIR(const_tbl+18904, const_tbl+185198)
MAKE_LITERAL_PAIR(const_tbl+18887, const_tbl+185215)
MAKE_LITERAL_PAIR(const_tbl+18870, const_tbl+185232)
MAKE_LITERAL_PAIR(const_tbl+18853, const_tbl+185249)
MAKE_LITERAL_PAIR(const_tbl+18836, const_tbl+185266)
MAKE_LITERAL_PAIR(const_tbl+18819, const_tbl+185283)
MAKE_LITERAL_PAIR(const_tbl+18802, const_tbl+185300)
MAKE_LITERAL_PAIR(const_tbl+18785, const_tbl+185317)
MAKE_LITERAL_PAIR(const_tbl+18768, const_tbl+185334)
MAKE_LITERAL_PAIR(const_tbl+18751, const_tbl+185351)
MAKE_LITERAL_PAIR(const_tbl+18734, const_tbl+185368)
MAKE_LITERAL_PAIR(const_tbl+18717, const_tbl+185385)
MAKE_LITERAL_PAIR(const_tbl+18700, const_tbl+185402)
MAKE_LITERAL_PAIR(const_tbl+18683, const_tbl+185419)
MAKE_LITERAL_PAIR(const_tbl+18666, const_tbl+185436)
MAKE_LITERAL_PAIR(const_tbl+18649, const_tbl+185453)
MAKE_LITERAL_PAIR(const_tbl+18632, const_tbl+185470)
MAKE_LITERAL_PAIR(const_tbl+18615, const_tbl+185487)
MAKE_LITERAL_PAIR(const_tbl+18598, const_tbl+185504)
MAKE_LITERAL_PAIR(const_tbl+18581, const_tbl+185521)
MAKE_LITERAL_PAIR(const_tbl+18564, const_tbl+185538)
MAKE_LITERAL_PAIR(const_tbl+18547, const_tbl+185555)
MAKE_LITERAL_PAIR(const_tbl+18530, const_tbl+185572)
MAKE_LITERAL_PAIR(const_tbl+18513, const_tbl+185589)
MAKE_LITERAL_PAIR(const_tbl+18496, const_tbl+185606)
MAKE_LITERAL_PAIR(const_tbl+18479, const_tbl+185623)
MAKE_LITERAL_PAIR(const_tbl+18462, const_tbl+185640)
MAKE_LITERAL_PAIR(const_tbl+18445, const_tbl+185657)
MAKE_LITERAL_PAIR(const_tbl+18428, const_tbl+185674)
MAKE_LITERAL_PAIR(const_tbl+18411, const_tbl+185691)
MAKE_LITERAL_PAIR(const_tbl+18394, const_tbl+185708)
MAKE_LITERAL_PAIR(const_tbl+18377, const_tbl+185725)
MAKE_LITERAL_PAIR(const_tbl+18360, const_tbl+185742)
MAKE_LITERAL_PAIR(const_tbl+18343, const_tbl+185759)
MAKE_LITERAL_PAIR(const_tbl+18326, const_tbl+185776)
MAKE_LITERAL_PAIR(const_tbl+18309, const_tbl+185793)
MAKE_LITERAL_PAIR(const_tbl+18292, const_tbl+185810)
MAKE_LITERAL_PAIR(const_tbl+18275, const_tbl+185827)
MAKE_LITERAL_PAIR(const_tbl+18258, const_tbl+185844)
MAKE_LITERAL_PAIR(const_tbl+18241, const_tbl+185861)
MAKE_LITERAL_PAIR(const_tbl+18224, const_tbl+185878)
MAKE_LITERAL_PAIR(const_tbl+18207, const_tbl+185895)
MAKE_LITERAL_PAIR(const_tbl+18190, const_tbl+185912)
MAKE_LITERAL_PAIR(const_tbl+18173, const_tbl+185929)
MAKE_LITERAL_PAIR(const_tbl+18156, const_tbl+185946)
MAKE_LITERAL_PAIR(const_tbl+18139, const_tbl+185963)
MAKE_LITERAL_PAIR(const_tbl+18122, const_tbl+185980)
MAKE_LITERAL_PAIR(const_tbl+18105, const_tbl+185997)
MAKE_LITERAL_PAIR(const_tbl+18088, const_tbl+186014)
MAKE_LITERAL_PAIR(const_tbl+18071, const_tbl+186031)
MAKE_LITERAL_PAIR(const_tbl+18054, const_tbl+186048)
MAKE_LITERAL_PAIR(const_tbl+18037, const_tbl+186065)
MAKE_LITERAL_PAIR(const_tbl+18020, const_tbl+186082)
MAKE_LITERAL_PAIR(const_tbl+18003, const_tbl+186099)
MAKE_LITERAL_PAIR(const_tbl+17986, const_tbl+186116)
MAKE_LITERAL_PAIR(const_tbl+17969, const_tbl+186133)
MAKE_LITERAL_PAIR(const_tbl+17952, const_tbl+186150)
MAKE_LITERAL_PAIR(const_tbl+17935, const_tbl+186167)
MAKE_LITERAL_PAIR(const_tbl+17918, const_tbl+186184)
MAKE_LITERAL_PAIR(const_tbl+17901, const_tbl+186201)
MAKE_LITERAL_PAIR(const_tbl+17884, const_tbl+186218)
MAKE_LITERAL_PAIR(const_tbl+17867, const_tbl+186235)
MAKE_LITERAL_PAIR(const_tbl+17850, const_tbl+186252)
MAKE_LITERAL_PAIR(const_tbl+17833, const_tbl+186269)
MAKE_LITERAL_PAIR(const_tbl+17816, const_tbl+186286)
MAKE_LITERAL_PAIR(const_tbl+17799, const_tbl+186303)
MAKE_LITERAL_PAIR(const_tbl+17782, const_tbl+186320)
MAKE_LITERAL_PAIR(const_tbl+17765, const_tbl+186337)
MAKE_LITERAL_PAIR(const_tbl+17748, const_tbl+186354)
MAKE_LITERAL_PAIR(const_tbl+17731, const_tbl+186371)
MAKE_LITERAL_PAIR(const_tbl+17714, const_tbl+186388)
MAKE_LITERAL_PAIR(const_tbl+17697, const_tbl+186405)
MAKE_LITERAL_PAIR(const_tbl+17680, const_tbl+186422)
MAKE_LITERAL_PAIR(const_tbl+17663, const_tbl+186439)
MAKE_LITERAL_PAIR(const_tbl+17646, const_tbl+186456)
MAKE_LITERAL_PAIR(const_tbl+17629, const_tbl+186473)
MAKE_LITERAL_PAIR(const_tbl+17612, const_tbl+186490)
MAKE_LITERAL_PAIR(const_tbl+17595, const_tbl+186507)
MAKE_LITERAL_PAIR(const_tbl+17578, const_tbl+186524)
MAKE_LITERAL_PAIR(const_tbl+17561, const_tbl+186541)
MAKE_LITERAL_PAIR(const_tbl+17544, const_tbl+186558)
MAKE_LITERAL_PAIR(const_tbl+17527, const_tbl+186575)
MAKE_LITERAL_PAIR(const_tbl+17510, const_tbl+186592)
MAKE_LITERAL_PAIR(const_tbl+17493, const_tbl+186609)
MAKE_LITERAL_PAIR(const_tbl+17476, const_tbl+186626)
MAKE_LITERAL_PAIR(const_tbl+17459, const_tbl+186643)
MAKE_LITERAL_PAIR(const_tbl+17442, const_tbl+186660)
MAKE_LITERAL_PAIR(const_tbl+17425, const_tbl+186677)
MAKE_LITERAL_PAIR(const_tbl+17408, const_tbl+186694)
MAKE_LITERAL_PAIR(const_tbl+17391, const_tbl+186711)
MAKE_LITERAL_PAIR(const_tbl+17374, const_tbl+186728)
MAKE_LITERAL_PAIR(const_tbl+17357, const_tbl+186745)
MAKE_LITERAL_PAIR(const_tbl+17340, const_tbl+186762)
MAKE_LITERAL_PAIR(const_tbl+17323, const_tbl+186779)
MAKE_LITERAL_PAIR(const_tbl+17306, const_tbl+186796)
MAKE_LITERAL_PAIR(const_tbl+17289, const_tbl+186813)
MAKE_LITERAL_PAIR(const_tbl+17272, const_tbl+186830)
MAKE_LITERAL_PAIR(const_tbl+17255, const_tbl+186847)
MAKE_LITERAL_PAIR(const_tbl+17238, const_tbl+186864)
MAKE_LITERAL_PAIR(const_tbl+17221, const_tbl+186881)
MAKE_LITERAL_PAIR(const_tbl+17204, const_tbl+186898)
MAKE_LITERAL_PAIR(const_tbl+17187, const_tbl+186915)
MAKE_LITERAL_PAIR(const_tbl+17170, const_tbl+186932)
MAKE_LITERAL_PAIR(const_tbl+17153, const_tbl+186949)
MAKE_LITERAL_PAIR(const_tbl+17136, const_tbl+186966)
MAKE_LITERAL_PAIR(const_tbl+17119, const_tbl+186983)
MAKE_LITERAL_PAIR(const_tbl+17102, const_tbl+187000)
MAKE_LITERAL_PAIR(const_tbl+17085, const_tbl+187017)
MAKE_LITERAL_PAIR(const_tbl+17068, const_tbl+187034)
MAKE_LITERAL_PAIR(const_tbl+17051, const_tbl+187051)
MAKE_LITERAL_PAIR(const_tbl+17034, const_tbl+187068)
MAKE_LITERAL_PAIR(const_tbl+17017, const_tbl+187085)
MAKE_LITERAL_PAIR(const_tbl+17000, const_tbl+187102)
MAKE_LITERAL_PAIR(const_tbl+16983, const_tbl+187119)
MAKE_LITERAL_PAIR(const_tbl+16966, const_tbl+187136)
MAKE_LITERAL_PAIR(const_tbl+16949, const_tbl+187153)
MAKE_LITERAL_PAIR(const_tbl+16932, const_tbl+187170)
MAKE_LITERAL_PAIR(const_tbl+16915, const_tbl+187187)
MAKE_LITERAL_PAIR(const_tbl+16898, const_tbl+187204)
MAKE_LITERAL_PAIR(const_tbl+16881, const_tbl+187221)
MAKE_LITERAL_PAIR(const_tbl+16864, const_tbl+187238)
MAKE_LITERAL_PAIR(const_tbl+16847, const_tbl+187255)
MAKE_LITERAL_PAIR(const_tbl+16830, const_tbl+187272)
MAKE_LITERAL_PAIR(const_tbl+16813, const_tbl+187289)
MAKE_LITERAL_PAIR(const_tbl+16796, const_tbl+187306)
MAKE_LITERAL_PAIR(const_tbl+16779, const_tbl+187323)
MAKE_LITERAL_PAIR(const_tbl+16762, const_tbl+187340)
MAKE_LITERAL_PAIR(const_tbl+16745, const_tbl+187357)
MAKE_LITERAL_PAIR(const_tbl+16728, const_tbl+187374)
MAKE_LITERAL_PAIR(const_tbl+16711, const_tbl+187391)
MAKE_LITERAL_PAIR(const_tbl+16694, const_tbl+187408)
MAKE_LITERAL_PAIR(const_tbl+16677, const_tbl+187425)
MAKE_LITERAL_PAIR(const_tbl+16660, const_tbl+187442)
MAKE_LITERAL_PAIR(const_tbl+16643, const_tbl+187459)
MAKE_LITERAL_PAIR(const_tbl+16626, const_tbl+187476)
MAKE_LITERAL_PAIR(const_tbl+16609, const_tbl+187493)
MAKE_LITERAL_PAIR(const_tbl+16592, const_tbl+187510)
MAKE_LITERAL_PAIR(const_tbl+16575, const_tbl+187527)
MAKE_LITERAL_PAIR(const_tbl+16558, const_tbl+187544)
MAKE_LITERAL_PAIR(const_tbl+16541, const_tbl+187561)
MAKE_LITERAL_PAIR(const_tbl+16524, const_tbl+187578)
MAKE_LITERAL_PAIR(const_tbl+16507, const_tbl+187595)
MAKE_LITERAL_PAIR(const_tbl+16490, const_tbl+187612)
MAKE_LITERAL_PAIR(const_tbl+16473, const_tbl+187629)
MAKE_LITERAL_PAIR(const_tbl+16456, const_tbl+187646)
MAKE_LITERAL_PAIR(const_tbl+16439, const_tbl+187663)
MAKE_LITERAL_PAIR(const_tbl+16422, const_tbl+187680)
MAKE_LITERAL_PAIR(const_tbl+16405, const_tbl+187697)
MAKE_LITERAL_PAIR(const_tbl+16388, const_tbl+187714)
MAKE_LITERAL_PAIR(const_tbl+16371, const_tbl+187731)
MAKE_LITERAL_PAIR(const_tbl+16354, const_tbl+187748)
MAKE_LITERAL_PAIR(const_tbl+16337, const_tbl+187765)
MAKE_LITERAL_PAIR(const_tbl+16320, const_tbl+187782)
MAKE_LITERAL_PAIR(const_tbl+16303, const_tbl+187799)
MAKE_LITERAL_PAIR(const_tbl+16286, const_tbl+187816)
MAKE_LITERAL_PAIR(const_tbl+16269, const_tbl+187833)
MAKE_LITERAL_PAIR(const_tbl+16252, const_tbl+187850)
MAKE_LITERAL_PAIR(const_tbl+16235, const_tbl+187867)
MAKE_LITERAL_PAIR(const_tbl+16218, const_tbl+187884)
MAKE_LITERAL_PAIR(const_tbl+16201, const_tbl+187901)
MAKE_LITERAL_PAIR(const_tbl+16184, const_tbl+187918)
MAKE_LITERAL_PAIR(const_tbl+16167, const_tbl+187935)
MAKE_LITERAL_PAIR(const_tbl+16150, const_tbl+187952)
MAKE_LITERAL_PAIR(const_tbl+16133, const_tbl+187969)
MAKE_LITERAL_PAIR(const_tbl+16116, const_tbl+187986)
MAKE_LITERAL_PAIR(const_tbl+16099, const_tbl+188003)
MAKE_LITERAL_PAIR(const_tbl+16082, const_tbl+188020)
MAKE_LITERAL_PAIR(const_tbl+16065, const_tbl+188037)
MAKE_LITERAL_PAIR(const_tbl+16048, const_tbl+188054)
MAKE_LITERAL_PAIR(const_tbl+16031, const_tbl+188071)
MAKE_LITERAL_PAIR(const_tbl+16014, const_tbl+188088)
MAKE_LITERAL_PAIR(const_tbl+15997, const_tbl+188105)
MAKE_LITERAL_PAIR(const_tbl+15980, const_tbl+188122)
MAKE_LITERAL_PAIR(const_tbl+15963, const_tbl+188139)
MAKE_LITERAL_PAIR(const_tbl+15946, const_tbl+188156)
MAKE_LITERAL_PAIR(const_tbl+15929, const_tbl+188173)
MAKE_LITERAL_PAIR(const_tbl+15912, const_tbl+188190)
MAKE_LITERAL_PAIR(const_tbl+15895, const_tbl+188207)
MAKE_LITERAL_PAIR(const_tbl+15878, const_tbl+188224)
MAKE_LITERAL_PAIR(const_tbl+15861, const_tbl+188241)
MAKE_LITERAL_PAIR(const_tbl+15844, const_tbl+188258)
MAKE_LITERAL_PAIR(const_tbl+15827, const_tbl+188275)
MAKE_LITERAL_PAIR(const_tbl+15810, const_tbl+188292)
MAKE_LITERAL_PAIR(const_tbl+15793, const_tbl+188309)
MAKE_LITERAL_PAIR(const_tbl+15776, const_tbl+188326)
MAKE_LITERAL_PAIR(const_tbl+15759, const_tbl+188343)
MAKE_LITERAL_PAIR(const_tbl+15742, const_tbl+188360)
MAKE_LITERAL_PAIR(const_tbl+15725, const_tbl+188377)
MAKE_LITERAL_PAIR(const_tbl+15708, const_tbl+188394)
MAKE_LITERAL_PAIR(const_tbl+15691, const_tbl+188411)
MAKE_LITERAL_PAIR(const_tbl+15674, const_tbl+188428)
MAKE_LITERAL_PAIR(const_tbl+15657, const_tbl+188445)
MAKE_LITERAL_PAIR(const_tbl+15640, const_tbl+188462)
MAKE_LITERAL_PAIR(const_tbl+15623, const_tbl+188479)
MAKE_LITERAL_PAIR(const_tbl+15606, const_tbl+188496)
MAKE_LITERAL_PAIR(const_tbl+15589, const_tbl+188513)
MAKE_LITERAL_PAIR(const_tbl+15572, const_tbl+188530)
MAKE_LITERAL_PAIR(const_tbl+15555, const_tbl+188547)
MAKE_LITERAL_PAIR(const_tbl+15538, const_tbl+188564)
MAKE_LITERAL_PAIR(const_tbl+15521, const_tbl+188581)
MAKE_LITERAL_PAIR(const_tbl+15504, const_tbl+188598)
MAKE_LITERAL_PAIR(const_tbl+15487, const_tbl+188615)
MAKE_LITERAL_PAIR(const_tbl+15470, const_tbl+188632)
MAKE_LITERAL_PAIR(const_tbl+15453, const_tbl+188649)
MAKE_LITERAL_PAIR(const_tbl+15436, const_tbl+188666)
MAKE_LITERAL_PAIR(const_tbl+15419, const_tbl+188683)
MAKE_LITERAL_PAIR(const_tbl+15402, const_tbl+188700)
MAKE_LITERAL_PAIR(const_tbl+15385, const_tbl+188717)
MAKE_LITERAL_PAIR(const_tbl+15368, const_tbl+188734)
MAKE_LITERAL_PAIR(const_tbl+15351, const_tbl+188751)
MAKE_LITERAL_PAIR(const_tbl+15334, const_tbl+188768)
MAKE_LITERAL_PAIR(const_tbl+15317, const_tbl+188785)
MAKE_LITERAL_PAIR(const_tbl+15300, const_tbl+188802)
MAKE_LITERAL_PAIR(const_tbl+15283, const_tbl+188819)
MAKE_LITERAL_PAIR(const_tbl+15266, const_tbl+188836)
MAKE_LITERAL_PAIR(const_tbl+15249, const_tbl+188853)
MAKE_LITERAL_PAIR(const_tbl+15232, const_tbl+188870)
MAKE_LITERAL_PAIR(const_tbl+15215, const_tbl+188887)
MAKE_LITERAL_PAIR(const_tbl+15198, const_tbl+188904)
MAKE_LITERAL_PAIR(const_tbl+15181, const_tbl+188921)
MAKE_LITERAL_PAIR(const_tbl+15164, const_tbl+188938)
MAKE_LITERAL_PAIR(const_tbl+15147, const_tbl+188955)
MAKE_LITERAL_PAIR(const_tbl+15130, const_tbl+188972)
MAKE_LITERAL_PAIR(const_tbl+15113, const_tbl+188989)
MAKE_LITERAL_PAIR(const_tbl+15096, const_tbl+189006)
MAKE_LITERAL_PAIR(const_tbl+15079, const_tbl+189023)
MAKE_LITERAL_PAIR(const_tbl+15062, const_tbl+189040)
MAKE_LITERAL_PAIR(const_tbl+15045, const_tbl+189057)
MAKE_LITERAL_PAIR(const_tbl+15028, const_tbl+189074)
MAKE_LITERAL_PAIR(const_tbl+15011, const_tbl+189091)
MAKE_LITERAL_PAIR(const_tbl+14994, const_tbl+189108)
MAKE_LITERAL_PAIR(const_tbl+14977, const_tbl+189125)
MAKE_LITERAL_PAIR(const_tbl+14960, const_tbl+189142)
MAKE_LITERAL_PAIR(const_tbl+14943, const_tbl+189159)
MAKE_LITERAL_PAIR(const_tbl+14926, const_tbl+189176)
MAKE_LITERAL_PAIR(const_tbl+14909, const_tbl+189193)
MAKE_LITERAL_PAIR(const_tbl+14892, const_tbl+189210)
MAKE_LITERAL_PAIR(const_tbl+14875, const_tbl+189227)
MAKE_LITERAL_PAIR(const_tbl+14858, const_tbl+189244)
MAKE_LITERAL_PAIR(const_tbl+14841, const_tbl+189261)
MAKE_LITERAL_PAIR(const_tbl+14824, const_tbl+189278)
MAKE_LITERAL_PAIR(const_tbl+14807, const_tbl+189295)
MAKE_LITERAL_PAIR(const_tbl+14790, const_tbl+189312)
MAKE_LITERAL_PAIR(const_tbl+14773, const_tbl+189329)
MAKE_LITERAL_PAIR(const_tbl+14756, const_tbl+189346)
MAKE_LITERAL_PAIR(const_tbl+14739, const_tbl+189363)
MAKE_LITERAL_PAIR(const_tbl+14722, const_tbl+189380)
MAKE_LITERAL_PAIR(const_tbl+14705, const_tbl+189397)
MAKE_LITERAL_PAIR(const_tbl+14688, const_tbl+189414)
MAKE_LITERAL_PAIR(const_tbl+14671, const_tbl+189431)
MAKE_LITERAL_PAIR(const_tbl+14654, const_tbl+189448)
MAKE_LITERAL_PAIR(const_tbl+14637, const_tbl+189465)
MAKE_LITERAL_PAIR(const_tbl+14620, const_tbl+189482)
MAKE_LITERAL_PAIR(const_tbl+14603, const_tbl+189499)
MAKE_LITERAL_PAIR(const_tbl+14586, const_tbl+189516)
MAKE_LITERAL_PAIR(const_tbl+14569, const_tbl+189533)
MAKE_LITERAL_PAIR(const_tbl+14552, const_tbl+189550)
MAKE_LITERAL_PAIR(const_tbl+14535, const_tbl+189567)
MAKE_LITERAL_PAIR(const_tbl+14518, const_tbl+189584)
MAKE_LITERAL_PAIR(const_tbl+14501, const_tbl+189601)
MAKE_LITERAL_PAIR(const_tbl+14484, const_tbl+189618)
MAKE_LITERAL_PAIR(const_tbl+14467, const_tbl+189635)
MAKE_LITERAL_PAIR(const_tbl+14450, const_tbl+189652)
MAKE_LITERAL_PAIR(const_tbl+14433, const_tbl+189669)
MAKE_LITERAL_PAIR(const_tbl+14416, const_tbl+189686)
MAKE_LITERAL_PAIR(const_tbl+14399, const_tbl+189703)
MAKE_LITERAL_PAIR(const_tbl+14382, const_tbl+189720)
MAKE_LITERAL_PAIR(const_tbl+14365, const_tbl+189737)
MAKE_LITERAL_PAIR(const_tbl+14348, const_tbl+189754)
MAKE_LITERAL_PAIR(const_tbl+14331, const_tbl+189771)
MAKE_LITERAL_PAIR(const_tbl+14314, const_tbl+189788)
MAKE_LITERAL_PAIR(const_tbl+14297, const_tbl+189805)
MAKE_LITERAL_PAIR(const_tbl+14280, const_tbl+189822)
MAKE_LITERAL_PAIR(const_tbl+14263, const_tbl+189839)
MAKE_LITERAL_PAIR(const_tbl+14246, const_tbl+189856)
MAKE_LITERAL_PAIR(const_tbl+14229, const_tbl+189873)
MAKE_LITERAL_PAIR(const_tbl+14212, const_tbl+189890)
MAKE_LITERAL_PAIR(const_tbl+14195, const_tbl+189907)
MAKE_LITERAL_PAIR(const_tbl+14178, const_tbl+189924)
MAKE_LITERAL_PAIR(const_tbl+14161, const_tbl+189941)
MAKE_LITERAL_PAIR(const_tbl+14144, const_tbl+189958)
MAKE_LITERAL_PAIR(const_tbl+14127, const_tbl+189975)
MAKE_LITERAL_PAIR(const_tbl+14110, const_tbl+189992)
MAKE_LITERAL_PAIR(const_tbl+14093, const_tbl+190009)
MAKE_LITERAL_PAIR(const_tbl+14076, const_tbl+190026)
MAKE_LITERAL_PAIR(const_tbl+14059, const_tbl+190043)
MAKE_LITERAL_PAIR(const_tbl+14042, const_tbl+190060)
MAKE_LITERAL_PAIR(const_tbl+14025, const_tbl+190077)
MAKE_LITERAL_PAIR(const_tbl+14008, const_tbl+190094)
MAKE_LITERAL_PAIR(const_tbl+13991, const_tbl+190111)
MAKE_LITERAL_PAIR(const_tbl+13974, const_tbl+190128)
MAKE_LITERAL_PAIR(const_tbl+13957, const_tbl+190145)
MAKE_LITERAL_PAIR(const_tbl+13940, const_tbl+190162)
MAKE_LITERAL_PAIR(const_tbl+13923, const_tbl+190179)
MAKE_LITERAL_PAIR(const_tbl+13906, const_tbl+190196)
MAKE_LITERAL_PAIR(const_tbl+13889, const_tbl+190213)
MAKE_LITERAL_PAIR(const_tbl+13872, const_tbl+190230)
MAKE_LITERAL_PAIR(const_tbl+13855, const_tbl+190247)
MAKE_LITERAL_PAIR(const_tbl+13838, const_tbl+190264)
MAKE_LITERAL_PAIR(const_tbl+13821, const_tbl+190281)
MAKE_LITERAL_PAIR(const_tbl+13804, const_tbl+190298)
MAKE_LITERAL_PAIR(const_tbl+13787, const_tbl+190315)
MAKE_LITERAL_PAIR(const_tbl+13770, const_tbl+190332)
MAKE_LITERAL_PAIR(const_tbl+13753, const_tbl+190349)
MAKE_LITERAL_PAIR(const_tbl+13736, const_tbl+190366)
MAKE_LITERAL_PAIR(const_tbl+13719, const_tbl+190383)
MAKE_LITERAL_PAIR(const_tbl+13702, const_tbl+190400)
MAKE_LITERAL_PAIR(const_tbl+13685, const_tbl+190417)
MAKE_LITERAL_PAIR(const_tbl+13668, const_tbl+190434)
MAKE_LITERAL_PAIR(const_tbl+13651, const_tbl+190451)
MAKE_LITERAL_PAIR(const_tbl+13634, const_tbl+190468)
MAKE_LITERAL_PAIR(const_tbl+13617, const_tbl+190485)
MAKE_LITERAL_PAIR(const_tbl+13600, const_tbl+190502)
MAKE_LITERAL_PAIR(const_tbl+13583, const_tbl+190519)
MAKE_LITERAL_PAIR(const_tbl+13566, const_tbl+190536)
MAKE_LITERAL_PAIR(const_tbl+13549, const_tbl+190553)
MAKE_LITERAL_PAIR(const_tbl+13532, const_tbl+190570)
MAKE_LITERAL_PAIR(const_tbl+13515, const_tbl+190587)
MAKE_LITERAL_PAIR(const_tbl+13498, const_tbl+190604)
MAKE_LITERAL_PAIR(const_tbl+13481, const_tbl+190621)
MAKE_LITERAL_PAIR(const_tbl+13464, const_tbl+190638)
MAKE_LITERAL_PAIR(const_tbl+13447, const_tbl+190655)
MAKE_LITERAL_PAIR(const_tbl+13430, const_tbl+190672)
MAKE_LITERAL_PAIR(const_tbl+13413, const_tbl+190689)
MAKE_LITERAL_PAIR(const_tbl+13396, const_tbl+190706)
MAKE_LITERAL_PAIR(const_tbl+13379, const_tbl+190723)
MAKE_LITERAL_PAIR(const_tbl+13362, const_tbl+190740)
MAKE_LITERAL_PAIR(const_tbl+13345, const_tbl+190757)
MAKE_LITERAL_PAIR(const_tbl+13328, const_tbl+190774)
MAKE_LITERAL_PAIR(const_tbl+13311, const_tbl+190791)
MAKE_LITERAL_PAIR(const_tbl+13294, const_tbl+190808)
MAKE_LITERAL_PAIR(const_tbl+13277, const_tbl+190825)
MAKE_LITERAL_PAIR(const_tbl+13260, const_tbl+190842)
MAKE_LITERAL_PAIR(const_tbl+13243, const_tbl+190859)
MAKE_LITERAL_PAIR(const_tbl+13226, const_tbl+190876)
MAKE_LITERAL_PAIR(const_tbl+13209, const_tbl+190893)
MAKE_LITERAL_PAIR(const_tbl+13192, const_tbl+190910)
MAKE_LITERAL_PAIR(const_tbl+13175, const_tbl+190927)
MAKE_LITERAL_PAIR(const_tbl+13158, const_tbl+190944)
MAKE_LITERAL_PAIR(const_tbl+13141, const_tbl+190961)
MAKE_LITERAL_PAIR(const_tbl+13124, const_tbl+190978)
MAKE_LITERAL_PAIR(const_tbl+13107, const_tbl+190995)
MAKE_LITERAL_PAIR(const_tbl+13090, const_tbl+191012)
MAKE_LITERAL_PAIR(const_tbl+13073, const_tbl+191029)
MAKE_LITERAL_PAIR(const_tbl+13056, const_tbl+191046)
MAKE_LITERAL_PAIR(const_tbl+13039, const_tbl+191063)
MAKE_LITERAL_PAIR(const_tbl+13022, const_tbl+191080)
MAKE_LITERAL_PAIR(const_tbl+13005, const_tbl+191097)
MAKE_LITERAL_PAIR(const_tbl+12988, const_tbl+191114)
MAKE_LITERAL_PAIR(const_tbl+12971, const_tbl+191131)
MAKE_LITERAL_PAIR(const_tbl+12954, const_tbl+191148)
MAKE_LITERAL_PAIR(const_tbl+12937, const_tbl+191165)
MAKE_LITERAL_PAIR(const_tbl+12920, const_tbl+191182)
MAKE_LITERAL_PAIR(const_tbl+12903, const_tbl+191199)
MAKE_LITERAL_PAIR(const_tbl+12886, const_tbl+191216)
MAKE_LITERAL_PAIR(const_tbl+12869, const_tbl+191233)
MAKE_LITERAL_PAIR(const_tbl+12852, const_tbl+191250)
MAKE_LITERAL_PAIR(const_tbl+12835, const_tbl+191267)
MAKE_LITERAL_PAIR(const_tbl+12818, const_tbl+191284)
MAKE_LITERAL_PAIR(const_tbl+12801, const_tbl+191301)
MAKE_LITERAL_PAIR(const_tbl+12784, const_tbl+191318)
MAKE_LITERAL_PAIR(const_tbl+12767, const_tbl+191335)
MAKE_LITERAL_PAIR(const_tbl+12750, const_tbl+191352)
MAKE_LITERAL_PAIR(const_tbl+12733, const_tbl+191369)
MAKE_LITERAL_PAIR(const_tbl+12716, const_tbl+191386)
MAKE_LITERAL_PAIR(const_tbl+12699, const_tbl+191403)
MAKE_LITERAL_PAIR(const_tbl+12682, const_tbl+191420)
MAKE_LITERAL_PAIR(const_tbl+12665, const_tbl+191437)
MAKE_LITERAL_PAIR(const_tbl+12648, const_tbl+191454)
MAKE_LITERAL_PAIR(const_tbl+12631, const_tbl+191471)
MAKE_LITERAL_PAIR(const_tbl+12614, const_tbl+191488)
MAKE_LITERAL_PAIR(const_tbl+12597, const_tbl+191505)
MAKE_LITERAL_PAIR(const_tbl+12580, const_tbl+191522)
MAKE_LITERAL_PAIR(const_tbl+12563, const_tbl+191539)
MAKE_LITERAL_PAIR(const_tbl+12546, const_tbl+191556)
MAKE_LITERAL_PAIR(const_tbl+12529, const_tbl+191573)
MAKE_LITERAL_PAIR(const_tbl+12512, const_tbl+191590)
MAKE_LITERAL_PAIR(const_tbl+12495, const_tbl+191607)
MAKE_LITERAL_PAIR(const_tbl+12478, const_tbl+191624)
MAKE_LITERAL_PAIR(const_tbl+12461, const_tbl+191641)
MAKE_LITERAL_PAIR(const_tbl+12444, const_tbl+191658)
MAKE_LITERAL_PAIR(const_tbl+12427, const_tbl+191675)
MAKE_LITERAL_PAIR(const_tbl+12410, const_tbl+191692)
MAKE_LITERAL_PAIR(const_tbl+12393, const_tbl+191709)
MAKE_LITERAL_PAIR(const_tbl+12376, const_tbl+191726)
MAKE_LITERAL_PAIR(const_tbl+12359, const_tbl+191743)
MAKE_LITERAL_PAIR(const_tbl+12342, const_tbl+191760)
MAKE_LITERAL_PAIR(const_tbl+12325, const_tbl+191777)
MAKE_LITERAL_PAIR(const_tbl+12308, const_tbl+191794)
MAKE_LITERAL_PAIR(const_tbl+12291, const_tbl+191811)
MAKE_LITERAL_PAIR(const_tbl+12274, const_tbl+191828)
MAKE_LITERAL_PAIR(const_tbl+12257, const_tbl+191845)
MAKE_LITERAL_PAIR(const_tbl+12240, const_tbl+191862)
MAKE_LITERAL_PAIR(const_tbl+12223, const_tbl+191879)
MAKE_LITERAL_PAIR(const_tbl+12206, const_tbl+191896)
MAKE_LITERAL_PAIR(const_tbl+12189, const_tbl+191913)
MAKE_LITERAL_PAIR(const_tbl+12172, const_tbl+191930)
MAKE_LITERAL_PAIR(const_tbl+12155, const_tbl+191947)
MAKE_LITERAL_PAIR(const_tbl+12138, const_tbl+191964)
MAKE_LITERAL_PAIR(const_tbl+12121, const_tbl+191981)
MAKE_LITERAL_PAIR(const_tbl+12104, const_tbl+191998)
MAKE_LITERAL_PAIR(const_tbl+12087, const_tbl+192015)
MAKE_LITERAL_PAIR(const_tbl+12070, const_tbl+192032)
MAKE_LITERAL_PAIR(const_tbl+12053, const_tbl+192049)
MAKE_LITERAL_PAIR(const_tbl+12036, const_tbl+192066)
MAKE_LITERAL_PAIR(const_tbl+12019, const_tbl+192083)
MAKE_LITERAL_PAIR(const_tbl+12002, const_tbl+192100)
MAKE_LITERAL_PAIR(const_tbl+11985, const_tbl+192117)
MAKE_LITERAL_PAIR(const_tbl+11968, const_tbl+192134)
MAKE_LITERAL_PAIR(const_tbl+11951, const_tbl+192151)
MAKE_LITERAL_PAIR(const_tbl+11934, const_tbl+192168)
MAKE_LITERAL_PAIR(const_tbl+11917, const_tbl+192185)
MAKE_LITERAL_PAIR(const_tbl+11900, const_tbl+192202)
MAKE_LITERAL_PAIR(const_tbl+11883, const_tbl+192219)
MAKE_LITERAL_PAIR(const_tbl+11866, const_tbl+192236)
MAKE_LITERAL_PAIR(const_tbl+11849, const_tbl+192253)
MAKE_LITERAL_PAIR(const_tbl+11832, const_tbl+192270)
MAKE_LITERAL_PAIR(const_tbl+11815, const_tbl+192287)
MAKE_LITERAL_PAIR(const_tbl+11798, const_tbl+192304)
MAKE_LITERAL_PAIR(const_tbl+11781, const_tbl+192321)
MAKE_LITERAL_PAIR(const_tbl+11764, const_tbl+192338)
MAKE_LITERAL_PAIR(const_tbl+11747, const_tbl+192355)
MAKE_LITERAL_PAIR(const_tbl+11730, const_tbl+192372)
MAKE_LITERAL_PAIR(const_tbl+11713, const_tbl+192389)
MAKE_LITERAL_PAIR(const_tbl+11696, const_tbl+192406)
MAKE_LITERAL_PAIR(const_tbl+11679, const_tbl+192423)
MAKE_LITERAL_PAIR(const_tbl+11662, const_tbl+192440)
MAKE_LITERAL_PAIR(const_tbl+11645, const_tbl+192457)
MAKE_LITERAL_PAIR(const_tbl+11628, const_tbl+192474)
MAKE_LITERAL_PAIR(const_tbl+11611, const_tbl+192491)
MAKE_LITERAL_PAIR(const_tbl+11594, const_tbl+192508)
MAKE_LITERAL_PAIR(const_tbl+11577, const_tbl+192525)
MAKE_LITERAL_PAIR(const_tbl+11560, const_tbl+192542)
MAKE_LITERAL_PAIR(const_tbl+11543, const_tbl+192559)
MAKE_LITERAL_PAIR(const_tbl+11526, const_tbl+192576)
MAKE_LITERAL_PAIR(const_tbl+11509, const_tbl+192593)
MAKE_LITERAL_PAIR(const_tbl+11492, const_tbl+192610)
MAKE_LITERAL_PAIR(const_tbl+11475, const_tbl+192627)
MAKE_LITERAL_PAIR(const_tbl+11458, const_tbl+192644)
MAKE_LITERAL_PAIR(const_tbl+11441, const_tbl+192661)
MAKE_LITERAL_PAIR(const_tbl+11424, const_tbl+192678)
MAKE_LITERAL_PAIR(const_tbl+11407, const_tbl+192695)
MAKE_LITERAL_PAIR(const_tbl+11390, const_tbl+192712)
MAKE_LITERAL_PAIR(const_tbl+11373, const_tbl+192729)
MAKE_LITERAL_PAIR(const_tbl+11356, const_tbl+192746)
MAKE_LITERAL_PAIR(const_tbl+11339, const_tbl+192763)
MAKE_LITERAL_PAIR(const_tbl+11322, const_tbl+192780)
MAKE_LITERAL_PAIR(const_tbl+11305, const_tbl+192797)
MAKE_LITERAL_PAIR(const_tbl+11288, const_tbl+192814)
MAKE_LITERAL_PAIR(const_tbl+11271, const_tbl+192831)
MAKE_LITERAL_PAIR(const_tbl+11254, const_tbl+192848)
MAKE_LITERAL_PAIR(const_tbl+11237, const_tbl+192865)
MAKE_LITERAL_PAIR(const_tbl+11220, const_tbl+192882)
MAKE_LITERAL_PAIR(const_tbl+11203, const_tbl+192899)
MAKE_LITERAL_PAIR(const_tbl+11186, const_tbl+192916)
MAKE_LITERAL_PAIR(const_tbl+11169, const_tbl+192933)
MAKE_LITERAL_PAIR(const_tbl+11152, const_tbl+192950)
MAKE_LITERAL_PAIR(const_tbl+11135, const_tbl+192967)
MAKE_LITERAL_PAIR(const_tbl+11118, const_tbl+192984)
MAKE_LITERAL_PAIR(const_tbl+11101, const_tbl+193001)
MAKE_LITERAL_PAIR(const_tbl+11084, const_tbl+193018)
MAKE_LITERAL_PAIR(const_tbl+11067, const_tbl+193035)
MAKE_LITERAL_PAIR(const_tbl+11050, const_tbl+193052)
MAKE_LITERAL_PAIR(const_tbl+11033, const_tbl+193069)
MAKE_LITERAL_PAIR(const_tbl+11016, const_tbl+193086)
MAKE_LITERAL_PAIR(const_tbl+10999, const_tbl+193103)
MAKE_LITERAL_PAIR(const_tbl+10982, const_tbl+193120)
MAKE_LITERAL_PAIR(const_tbl+10965, const_tbl+193137)
MAKE_LITERAL_PAIR(const_tbl+10948, const_tbl+193154)
MAKE_LITERAL_PAIR(const_tbl+10931, const_tbl+193171)
MAKE_LITERAL_PAIR(const_tbl+10914, const_tbl+193188)
MAKE_LITERAL_PAIR(const_tbl+10897, const_tbl+193205)
MAKE_LITERAL_PAIR(const_tbl+10880, const_tbl+193222)
MAKE_LITERAL_PAIR(const_tbl+10863, const_tbl+193239)
MAKE_LITERAL_PAIR(const_tbl+10846, const_tbl+193256)
MAKE_LITERAL_PAIR(const_tbl+10829, const_tbl+193273)
MAKE_LITERAL_PAIR(const_tbl+10812, const_tbl+193290)
MAKE_LITERAL_PAIR(const_tbl+10795, const_tbl+193307)
MAKE_LITERAL_PAIR(const_tbl+10778, const_tbl+193324)
MAKE_LITERAL_PAIR(const_tbl+10761, const_tbl+193341)
MAKE_LITERAL_PAIR(const_tbl+10744, const_tbl+193358)
MAKE_LITERAL_PAIR(const_tbl+10727, const_tbl+193375)
MAKE_LITERAL_PAIR(const_tbl+10710, const_tbl+193392)
MAKE_LITERAL_PAIR(const_tbl+10693, const_tbl+193409)
MAKE_LITERAL_PAIR(const_tbl+10676, const_tbl+193426)
MAKE_LITERAL_PAIR(const_tbl+10659, const_tbl+193443)
MAKE_LITERAL_PAIR(const_tbl+10642, const_tbl+193460)
MAKE_LITERAL_PAIR(const_tbl+10625, const_tbl+193477)
MAKE_LITERAL_PAIR(const_tbl+10608, const_tbl+193494)
MAKE_LITERAL_PAIR(const_tbl+10591, const_tbl+193511)
MAKE_LITERAL_PAIR(const_tbl+10574, const_tbl+193528)
MAKE_LITERAL_PAIR(const_tbl+10557, const_tbl+193545)
MAKE_LITERAL_PAIR(const_tbl+10540, const_tbl+193562)
MAKE_LITERAL_PAIR(const_tbl+10523, const_tbl+193579)
MAKE_LITERAL_PAIR(const_tbl+10506, const_tbl+193596)
MAKE_LITERAL_PAIR(const_tbl+10489, const_tbl+193613)
MAKE_LITERAL_PAIR(const_tbl+10472, const_tbl+193630)
MAKE_LITERAL_PAIR(const_tbl+10455, const_tbl+193647)
MAKE_LITERAL_PAIR(const_tbl+10438, const_tbl+193664)
MAKE_LITERAL_PAIR(const_tbl+10421, const_tbl+193681)
MAKE_LITERAL_PAIR(const_tbl+10404, const_tbl+193698)
MAKE_LITERAL_PAIR(const_tbl+10387, const_tbl+193715)
MAKE_LITERAL_PAIR(const_tbl+10370, const_tbl+193732)
MAKE_LITERAL_PAIR(const_tbl+10353, const_tbl+193749)
MAKE_LITERAL_PAIR(const_tbl+10336, const_tbl+193766)
MAKE_LITERAL_PAIR(const_tbl+10319, const_tbl+193783)
MAKE_LITERAL_PAIR(const_tbl+10302, const_tbl+193800)
MAKE_LITERAL_PAIR(const_tbl+10285, const_tbl+193817)
MAKE_LITERAL_PAIR(const_tbl+10268, const_tbl+193834)
MAKE_LITERAL_PAIR(const_tbl+10251, const_tbl+193851)
MAKE_LITERAL_PAIR(const_tbl+10234, const_tbl+193868)
MAKE_LITERAL_PAIR(const_tbl+10217, const_tbl+193885)
MAKE_LITERAL_PAIR(const_tbl+10200, const_tbl+193902)
MAKE_LITERAL_PAIR(const_tbl+10183, const_tbl+193919)
MAKE_LITERAL_PAIR(const_tbl+10166, const_tbl+193936)
MAKE_LITERAL_PAIR(const_tbl+10149, const_tbl+193953)
MAKE_LITERAL_PAIR(const_tbl+10132, const_tbl+193970)
MAKE_LITERAL_PAIR(const_tbl+10115, const_tbl+193987)
MAKE_LITERAL_PAIR(const_tbl+10098, const_tbl+194004)
MAKE_LITERAL_PAIR(const_tbl+10081, const_tbl+194021)
MAKE_LITERAL_PAIR(const_tbl+10064, const_tbl+194038)
MAKE_LITERAL_PAIR(const_tbl+10047, const_tbl+194055)
MAKE_LITERAL_PAIR(const_tbl+10030, const_tbl+194072)
MAKE_LITERAL_PAIR(const_tbl+10013, const_tbl+194089)
MAKE_LITERAL_PAIR(const_tbl+9996, const_tbl+194106)
MAKE_LITERAL_PAIR(const_tbl+9979, const_tbl+194123)
MAKE_LITERAL_PAIR(const_tbl+9962, const_tbl+194140)
MAKE_LITERAL_PAIR(const_tbl+9945, const_tbl+194157)
MAKE_LITERAL_PAIR(const_tbl+9928, const_tbl+194174)
MAKE_LITERAL_PAIR(const_tbl+9911, const_tbl+194191)
MAKE_LITERAL_PAIR(const_tbl+9894, const_tbl+194208)
MAKE_LITERAL_PAIR(const_tbl+9877, const_tbl+194225)
MAKE_LITERAL_PAIR(const_tbl+9860, const_tbl+194242)
MAKE_LITERAL_PAIR(const_tbl+9843, const_tbl+194259)
MAKE_LITERAL_PAIR(const_tbl+9826, const_tbl+194276)
MAKE_LITERAL_PAIR(const_tbl+9809, const_tbl+194293)
MAKE_LITERAL_PAIR(const_tbl+9792, const_tbl+194310)
MAKE_LITERAL_PAIR(const_tbl+9775, const_tbl+194327)
MAKE_LITERAL_PAIR(const_tbl+9758, const_tbl+194344)
MAKE_LITERAL_PAIR(const_tbl+9741, const_tbl+194361)
MAKE_LITERAL_PAIR(const_tbl+9724, const_tbl+194378)
MAKE_LITERAL_PAIR(const_tbl+9707, const_tbl+194395)
MAKE_LITERAL_PAIR(const_tbl+9690, const_tbl+194412)
MAKE_LITERAL_PAIR(const_tbl+9673, const_tbl+194429)
MAKE_LITERAL_PAIR(const_tbl+9656, const_tbl+194446)
MAKE_LITERAL_PAIR(const_tbl+9639, const_tbl+194463)
MAKE_LITERAL_PAIR(const_tbl+9622, const_tbl+194480)
MAKE_LITERAL_PAIR(const_tbl+9605, const_tbl+194497)
MAKE_LITERAL_PAIR(const_tbl+9588, const_tbl+194514)
MAKE_LITERAL_PAIR(const_tbl+9571, const_tbl+194531)
MAKE_LITERAL_PAIR(const_tbl+9554, const_tbl+194548)
MAKE_LITERAL_PAIR(const_tbl+9537, const_tbl+194565)
MAKE_LITERAL_PAIR(const_tbl+9520, const_tbl+194582)
MAKE_LITERAL_PAIR(const_tbl+9503, const_tbl+194599)
MAKE_LITERAL_PAIR(const_tbl+9486, const_tbl+194616)
MAKE_LITERAL_PAIR(const_tbl+9469, const_tbl+194633)
MAKE_LITERAL_PAIR(const_tbl+9452, const_tbl+194650)
MAKE_LITERAL_PAIR(const_tbl+9435, const_tbl+194667)
MAKE_LITERAL_PAIR(const_tbl+9418, const_tbl+194684)
MAKE_LITERAL_PAIR(const_tbl+9401, const_tbl+194701)
MAKE_LITERAL_PAIR(const_tbl+9384, const_tbl+194718)
MAKE_LITERAL_PAIR(const_tbl+9367, const_tbl+194735)
MAKE_LITERAL_PAIR(const_tbl+9350, const_tbl+194752)
MAKE_LITERAL_PAIR(const_tbl+9333, const_tbl+194769)
MAKE_LITERAL_PAIR(const_tbl+9316, const_tbl+194786)
MAKE_LITERAL_PAIR(const_tbl+9299, const_tbl+194803)
MAKE_LITERAL_PAIR(const_tbl+9282, const_tbl+194820)
MAKE_LITERAL_PAIR(const_tbl+9265, const_tbl+194837)
MAKE_LITERAL_PAIR(const_tbl+9248, const_tbl+194854)
MAKE_LITERAL_PAIR(const_tbl+9231, const_tbl+194871)
MAKE_LITERAL_PAIR(const_tbl+9214, const_tbl+194888)
MAKE_LITERAL_PAIR(const_tbl+9197, const_tbl+194905)
MAKE_LITERAL_PAIR(const_tbl+9180, const_tbl+194922)
MAKE_LITERAL_PAIR(const_tbl+9163, const_tbl+194939)
MAKE_LITERAL_PAIR(const_tbl+9146, const_tbl+194956)
MAKE_LITERAL_PAIR(const_tbl+9129, const_tbl+194973)
MAKE_LITERAL_PAIR(const_tbl+9112, const_tbl+194990)
MAKE_LITERAL_PAIR(const_tbl+9095, const_tbl+195007)
MAKE_LITERAL_PAIR(const_tbl+9078, const_tbl+195024)
MAKE_LITERAL_PAIR(const_tbl+9061, const_tbl+195041)
MAKE_LITERAL_PAIR(const_tbl+9044, const_tbl+195058)
MAKE_LITERAL_PAIR(const_tbl+9027, const_tbl+195075)
MAKE_LITERAL_PAIR(const_tbl+9010, const_tbl+195092)
MAKE_LITERAL_PAIR(const_tbl+8993, const_tbl+195109)
MAKE_LITERAL_PAIR(const_tbl+8976, const_tbl+195126)
MAKE_LITERAL_PAIR(const_tbl+8959, const_tbl+195143)
MAKE_LITERAL_PAIR(const_tbl+8942, const_tbl+195160)
MAKE_LITERAL_PAIR(const_tbl+8925, const_tbl+195177)
MAKE_LITERAL_PAIR(const_tbl+8908, const_tbl+195194)
MAKE_LITERAL_PAIR(const_tbl+8891, const_tbl+195211)
MAKE_LITERAL_PAIR(const_tbl+8874, const_tbl+195228)
MAKE_LITERAL_PAIR(const_tbl+8857, const_tbl+195245)
MAKE_LITERAL_PAIR(const_tbl+8840, const_tbl+195262)
MAKE_LITERAL_PAIR(const_tbl+8823, const_tbl+195279)
MAKE_LITERAL_PAIR(const_tbl+8806, const_tbl+195296)
MAKE_LITERAL_PAIR(const_tbl+8789, const_tbl+195313)
MAKE_LITERAL_PAIR(const_tbl+8772, const_tbl+195330)
MAKE_LITERAL_PAIR(const_tbl+8755, const_tbl+195347)
MAKE_LITERAL_PAIR(const_tbl+8738, const_tbl+195364)
MAKE_LITERAL_PAIR(const_tbl+8721, const_tbl+195381)
MAKE_LITERAL_PAIR(const_tbl+8704, const_tbl+195398)
MAKE_LITERAL_PAIR(const_tbl+8687, const_tbl+195415)
MAKE_LITERAL_PAIR(const_tbl+8670, const_tbl+195432)
MAKE_LITERAL_PAIR(const_tbl+8653, const_tbl+195449)
MAKE_LITERAL_PAIR(const_tbl+8636, const_tbl+195466)
MAKE_LITERAL_PAIR(const_tbl+8619, const_tbl+195483)
MAKE_LITERAL_PAIR(const_tbl+8602, const_tbl+195500)
MAKE_LITERAL_PAIR(const_tbl+8585, const_tbl+195517)
MAKE_LITERAL_PAIR(const_tbl+8568, const_tbl+195534)
MAKE_LITERAL_PAIR(const_tbl+8551, const_tbl+195551)
MAKE_LITERAL_PAIR(const_tbl+8534, const_tbl+195568)
MAKE_LITERAL_PAIR(const_tbl+8517, const_tbl+195585)
MAKE_LITERAL_PAIR(const_tbl+8500, const_tbl+195602)
MAKE_LITERAL_PAIR(const_tbl+8483, const_tbl+195619)
MAKE_LITERAL_PAIR(const_tbl+8466, const_tbl+195636)
MAKE_LITERAL_PAIR(const_tbl+8449, const_tbl+195653)
MAKE_LITERAL_PAIR(const_tbl+8432, const_tbl+195670)
MAKE_LITERAL_PAIR(const_tbl+8415, const_tbl+195687)
MAKE_LITERAL_PAIR(const_tbl+8398, const_tbl+195704)
MAKE_LITERAL_PAIR(const_tbl+8381, const_tbl+195721)
MAKE_LITERAL_PAIR(const_tbl+8364, const_tbl+195738)
MAKE_LITERAL_PAIR(const_tbl+8347, const_tbl+195755)
MAKE_LITERAL_PAIR(const_tbl+8330, const_tbl+195772)
MAKE_LITERAL_PAIR(const_tbl+8313, const_tbl+195789)
MAKE_LITERAL_PAIR(const_tbl+8296, const_tbl+195806)
MAKE_LITERAL_PAIR(const_tbl+8279, const_tbl+195823)
MAKE_LITERAL_PAIR(const_tbl+8262, const_tbl+195840)
MAKE_LITERAL_PAIR(const_tbl+8245, const_tbl+195857)
MAKE_LITERAL_PAIR(const_tbl+8228, const_tbl+195874)
MAKE_LITERAL_PAIR(const_tbl+8211, const_tbl+195891)
MAKE_LITERAL_PAIR(const_tbl+8194, const_tbl+195908)
MAKE_LITERAL_PAIR(const_tbl+8177, const_tbl+195925)
MAKE_LITERAL_PAIR(const_tbl+8160, const_tbl+195942)
MAKE_LITERAL_PAIR(const_tbl+8143, const_tbl+195959)
MAKE_LITERAL_PAIR(const_tbl+8126, const_tbl+195976)
MAKE_LITERAL_PAIR(const_tbl+8109, const_tbl+195993)
MAKE_LITERAL_PAIR(const_tbl+8092, const_tbl+196010)
MAKE_LITERAL_PAIR(const_tbl+8075, const_tbl+196027)
MAKE_LITERAL_PAIR(const_tbl+8058, const_tbl+196044)
MAKE_LITERAL_PAIR(const_tbl+8041, const_tbl+196061)
MAKE_LITERAL_PAIR(const_tbl+8024, const_tbl+196078)
MAKE_LITERAL_PAIR(const_tbl+8007, const_tbl+196095)
MAKE_LITERAL_PAIR(const_tbl+7990, const_tbl+196112)
MAKE_LITERAL_PAIR(const_tbl+7973, const_tbl+196129)
MAKE_LITERAL_PAIR(const_tbl+7956, const_tbl+196146)
MAKE_LITERAL_PAIR(const_tbl+7939, const_tbl+196163)
MAKE_LITERAL_PAIR(const_tbl+7922, const_tbl+196180)
MAKE_LITERAL_PAIR(const_tbl+7905, const_tbl+196197)
MAKE_LITERAL_PAIR(const_tbl+7888, const_tbl+196214)
MAKE_LITERAL_PAIR(const_tbl+7871, const_tbl+196231)
MAKE_LITERAL_PAIR(const_tbl+7854, const_tbl+196248)
MAKE_LITERAL_PAIR(const_tbl+7837, const_tbl+196265)
MAKE_LITERAL_PAIR(const_tbl+7820, const_tbl+196282)
MAKE_LITERAL_PAIR(const_tbl+7803, const_tbl+196299)
MAKE_LITERAL_PAIR(const_tbl+7786, const_tbl+196316)
MAKE_LITERAL_PAIR(const_tbl+7769, const_tbl+196333)
MAKE_LITERAL_PAIR(const_tbl+7752, const_tbl+196350)
MAKE_LITERAL_PAIR(const_tbl+7735, const_tbl+196367)
MAKE_LITERAL_PAIR(const_tbl+7718, const_tbl+196384)
MAKE_LITERAL_PAIR(const_tbl+7701, const_tbl+196401)
MAKE_LITERAL_PAIR(const_tbl+7684, const_tbl+196418)
MAKE_LITERAL_PAIR(const_tbl+7667, const_tbl+196435)
MAKE_LITERAL_PAIR(const_tbl+7650, const_tbl+196452)
MAKE_LITERAL_PAIR(const_tbl+7633, const_tbl+196469)
MAKE_LITERAL_PAIR(const_tbl+7616, const_tbl+196486)
MAKE_LITERAL_PAIR(const_tbl+7599, const_tbl+196503)
MAKE_LITERAL_PAIR(const_tbl+7582, const_tbl+196520)
MAKE_LITERAL_PAIR(const_tbl+7565, const_tbl+196537)
MAKE_LITERAL_PAIR(const_tbl+7548, const_tbl+196554)
MAKE_LITERAL_PAIR(const_tbl+7531, const_tbl+196571)
MAKE_LITERAL_PAIR(const_tbl+7514, const_tbl+196588)
MAKE_LITERAL_PAIR(const_tbl+7497, const_tbl+196605)
MAKE_LITERAL_PAIR(const_tbl+7480, const_tbl+196622)
MAKE_LITERAL_PAIR(const_tbl+7463, const_tbl+196639)
MAKE_LITERAL_PAIR(const_tbl+7446, const_tbl+196656)
MAKE_LITERAL_PAIR(const_tbl+7429, const_tbl+196673)
MAKE_LITERAL_PAIR(const_tbl+7412, const_tbl+196690)
MAKE_LITERAL_PAIR(const_tbl+7395, const_tbl+196707)
MAKE_LITERAL_PAIR(const_tbl+7378, const_tbl+196724)
MAKE_LITERAL_PAIR(const_tbl+7361, const_tbl+196741)
MAKE_LITERAL_PAIR(const_tbl+7344, const_tbl+196758)
MAKE_LITERAL_PAIR(const_tbl+7327, const_tbl+196775)
MAKE_LITERAL_PAIR(const_tbl+7310, const_tbl+196792)
MAKE_LITERAL_PAIR(const_tbl+7293, const_tbl+196809)
MAKE_LITERAL_PAIR(const_tbl+7276, const_tbl+196826)
MAKE_LITERAL_PAIR(const_tbl+7259, const_tbl+196843)
MAKE_LITERAL_PAIR(const_tbl+7242, const_tbl+196860)
MAKE_LITERAL_PAIR(const_tbl+7225, const_tbl+196877)
MAKE_LITERAL_PAIR(const_tbl+7208, const_tbl+196894)
MAKE_LITERAL_PAIR(const_tbl+7191, const_tbl+196911)
MAKE_LITERAL_PAIR(const_tbl+7174, const_tbl+196928)
MAKE_LITERAL_PAIR(const_tbl+7157, const_tbl+196945)
MAKE_LITERAL_PAIR(const_tbl+7140, const_tbl+196962)
MAKE_LITERAL_PAIR(const_tbl+7123, const_tbl+196979)
MAKE_LITERAL_PAIR(const_tbl+7106, const_tbl+196996)
MAKE_LITERAL_PAIR(const_tbl+7089, const_tbl+197013)
MAKE_LITERAL_PAIR(const_tbl+7072, const_tbl+197030)
MAKE_LITERAL_PAIR(const_tbl+7055, const_tbl+197047)
MAKE_LITERAL_PAIR(const_tbl+7038, const_tbl+197064)
MAKE_LITERAL_PAIR(const_tbl+7021, const_tbl+197081)
MAKE_LITERAL_PAIR(const_tbl+7004, const_tbl+197098)
MAKE_LITERAL_PAIR(const_tbl+6987, const_tbl+197115)
MAKE_LITERAL_PAIR(const_tbl+6970, const_tbl+197132)
MAKE_LITERAL_PAIR(const_tbl+6953, const_tbl+197149)
MAKE_LITERAL_PAIR(const_tbl+6936, const_tbl+197166)
MAKE_LITERAL_PAIR(const_tbl+6919, const_tbl+197183)
MAKE_LITERAL_PAIR(const_tbl+6902, const_tbl+197200)
MAKE_LITERAL_PAIR(const_tbl+6885, const_tbl+197217)
MAKE_LITERAL_PAIR(const_tbl+6868, const_tbl+197234)
MAKE_LITERAL_PAIR(const_tbl+6851, const_tbl+197251)
MAKE_LITERAL_PAIR(const_tbl+6834, const_tbl+197268)
MAKE_LITERAL_PAIR(const_tbl+6817, const_tbl+197285)
MAKE_LITERAL_PAIR(const_tbl+6800, const_tbl+197302)
MAKE_LITERAL_PAIR(const_tbl+6783, const_tbl+197319)
MAKE_LITERAL_PAIR(const_tbl+6766, const_tbl+197336)
MAKE_LITERAL_PAIR(const_tbl+6749, const_tbl+197353)
MAKE_LITERAL_PAIR(const_tbl+6732, const_tbl+197370)
MAKE_LITERAL_PAIR(const_tbl+6715, const_tbl+197387)
MAKE_LITERAL_PAIR(const_tbl+6698, const_tbl+197404)
MAKE_LITERAL_PAIR(const_tbl+6681, const_tbl+197421)
MAKE_LITERAL_PAIR(const_tbl+6664, const_tbl+197438)
MAKE_LITERAL_PAIR(const_tbl+6647, const_tbl+197455)
MAKE_LITERAL_PAIR(const_tbl+6630, const_tbl+197472)
MAKE_LITERAL_PAIR(const_tbl+6613, const_tbl+197489)
MAKE_LITERAL_PAIR(const_tbl+6596, const_tbl+197506)
MAKE_LITERAL_PAIR(const_tbl+6579, const_tbl+197523)
MAKE_LITERAL_PAIR(const_tbl+6562, const_tbl+197540)
MAKE_LITERAL_PAIR(const_tbl+6545, const_tbl+197557)
MAKE_LITERAL_PAIR(const_tbl+6528, const_tbl+197574)
MAKE_LITERAL_PAIR(const_tbl+6511, const_tbl+197591)
MAKE_LITERAL_PAIR(const_tbl+6494, const_tbl+197608)
MAKE_LITERAL_PAIR(const_tbl+6477, const_tbl+197625)
MAKE_LITERAL_PAIR(const_tbl+6460, const_tbl+197642)
MAKE_LITERAL_PAIR(const_tbl+6443, const_tbl+197659)
MAKE_LITERAL_PAIR(const_tbl+6426, const_tbl+197676)
MAKE_LITERAL_PAIR(const_tbl+6409, const_tbl+197693)
MAKE_LITERAL_PAIR(const_tbl+6392, const_tbl+197710)
MAKE_LITERAL_PAIR(const_tbl+6375, const_tbl+197727)
MAKE_LITERAL_PAIR(const_tbl+6358, const_tbl+197744)
MAKE_LITERAL_PAIR(const_tbl+6341, const_tbl+197761)
MAKE_LITERAL_PAIR(const_tbl+6324, const_tbl+197778)
MAKE_LITERAL_PAIR(const_tbl+6307, const_tbl+197795)
MAKE_LITERAL_PAIR(const_tbl+6290, const_tbl+197812)
MAKE_LITERAL_PAIR(const_tbl+6273, const_tbl+197829)
MAKE_LITERAL_PAIR(const_tbl+6256, const_tbl+197846)
MAKE_LITERAL_PAIR(const_tbl+6239, const_tbl+197863)
MAKE_LITERAL_PAIR(const_tbl+6222, const_tbl+197880)
MAKE_LITERAL_PAIR(const_tbl+6205, const_tbl+197897)
MAKE_LITERAL_PAIR(const_tbl+6188, const_tbl+197914)
MAKE_LITERAL_PAIR(const_tbl+6171, const_tbl+197931)
MAKE_LITERAL_PAIR(const_tbl+6154, const_tbl+197948)
MAKE_LITERAL_PAIR(const_tbl+6137, const_tbl+197965)
MAKE_LITERAL_PAIR(const_tbl+6120, const_tbl+197982)
MAKE_LITERAL_PAIR(const_tbl+6103, const_tbl+197999)
MAKE_LITERAL_PAIR(const_tbl+6086, const_tbl+198016)
MAKE_LITERAL_PAIR(const_tbl+6069, const_tbl+198033)
MAKE_LITERAL_PAIR(const_tbl+6052, const_tbl+198050)
MAKE_LITERAL_PAIR(const_tbl+6035, const_tbl+198067)
MAKE_LITERAL_PAIR(const_tbl+6018, const_tbl+198084)
MAKE_LITERAL_PAIR(const_tbl+6001, const_tbl+198101)
MAKE_LITERAL_PAIR(const_tbl+5984, const_tbl+198118)
MAKE_LITERAL_PAIR(const_tbl+5967, const_tbl+198135)
MAKE_LITERAL_PAIR(const_tbl+5950, const_tbl+198152)
MAKE_LITERAL_PAIR(const_tbl+5933, const_tbl+198169)
MAKE_LITERAL_PAIR(const_tbl+5916, const_tbl+198186)
MAKE_LITERAL_PAIR(const_tbl+5899, const_tbl+198203)
MAKE_LITERAL_PAIR(const_tbl+5882, const_tbl+198220)
MAKE_LITERAL_PAIR(const_tbl+5865, const_tbl+198237)
MAKE_LITERAL_PAIR(const_tbl+5848, const_tbl+198254)
MAKE_LITERAL_PAIR(const_tbl+5831, const_tbl+198271)
MAKE_LITERAL_PAIR(const_tbl+5814, const_tbl+198288)
MAKE_LITERAL_PAIR(const_tbl+5797, const_tbl+198305)
MAKE_LITERAL_PAIR(const_tbl+5780, const_tbl+198322)
MAKE_LITERAL_PAIR(const_tbl+5763, const_tbl+198339)
MAKE_LITERAL_PAIR(const_tbl+5746, const_tbl+198356)
MAKE_LITERAL_PAIR(const_tbl+5729, const_tbl+198373)
MAKE_LITERAL_PAIR(const_tbl+5712, const_tbl+198390)
MAKE_LITERAL_PAIR(const_tbl+5695, const_tbl+198407)
MAKE_LITERAL_PAIR(const_tbl+5678, const_tbl+198424)
MAKE_LITERAL_PAIR(const_tbl+5661, const_tbl+198441)
MAKE_LITERAL_PAIR(const_tbl+5644, const_tbl+198458)
MAKE_LITERAL_PAIR(const_tbl+5627, const_tbl+198475)
MAKE_LITERAL_PAIR(const_tbl+5610, const_tbl+198492)
MAKE_LITERAL_PAIR(const_tbl+5593, const_tbl+198509)
MAKE_LITERAL_PAIR(const_tbl+5576, const_tbl+198526)
MAKE_LITERAL_PAIR(const_tbl+5559, const_tbl+198543)
MAKE_LITERAL_PAIR(const_tbl+5542, const_tbl+198560)
MAKE_LITERAL_PAIR(const_tbl+5525, const_tbl+198577)
MAKE_LITERAL_PAIR(const_tbl+5508, const_tbl+198594)
MAKE_LITERAL_PAIR(const_tbl+5491, const_tbl+198611)
MAKE_LITERAL_PAIR(const_tbl+5474, const_tbl+198628)
MAKE_LITERAL_PAIR(const_tbl+5457, const_tbl+198645)
MAKE_LITERAL_PAIR(const_tbl+5440, const_tbl+198662)
MAKE_LITERAL_PAIR(const_tbl+5423, const_tbl+198679)
MAKE_LITERAL_PAIR(const_tbl+5406, const_tbl+198696)
MAKE_LITERAL_PAIR(const_tbl+5389, const_tbl+198713)
MAKE_LITERAL_PAIR(const_tbl+5372, const_tbl+198730)
MAKE_LITERAL_PAIR(const_tbl+5355, const_tbl+198747)
MAKE_LITERAL_PAIR(const_tbl+5338, const_tbl+198764)
MAKE_LITERAL_PAIR(const_tbl+5321, const_tbl+198781)
MAKE_LITERAL_PAIR(const_tbl+5304, const_tbl+198798)
MAKE_LITERAL_PAIR(const_tbl+5287, const_tbl+198815)
MAKE_LITERAL_PAIR(const_tbl+5270, const_tbl+198832)
MAKE_LITERAL_PAIR(const_tbl+5253, const_tbl+198849)
MAKE_LITERAL_PAIR(const_tbl+5236, const_tbl+198866)
MAKE_LITERAL_PAIR(const_tbl+5219, const_tbl+198883)
MAKE_LITERAL_PAIR(const_tbl+5202, const_tbl+198900)
MAKE_LITERAL_PAIR(const_tbl+5185, const_tbl+198917)
MAKE_LITERAL_PAIR(const_tbl+5168, const_tbl+198934)
MAKE_LITERAL_PAIR(const_tbl+5151, const_tbl+198951)
MAKE_LITERAL_PAIR(const_tbl+5134, const_tbl+198968)
MAKE_LITERAL_PAIR(const_tbl+5117, const_tbl+198985)
MAKE_LITERAL_PAIR(const_tbl+5100, const_tbl+199002)
MAKE_LITERAL_PAIR(const_tbl+5083, const_tbl+199019)
MAKE_LITERAL_PAIR(const_tbl+5066, const_tbl+199036)
MAKE_LITERAL_PAIR(const_tbl+5049, const_tbl+199053)
MAKE_LITERAL_PAIR(const_tbl+5032, const_tbl+199070)
MAKE_LITERAL_PAIR(const_tbl+5015, const_tbl+199087)
MAKE_LITERAL_PAIR(const_tbl+4998, const_tbl+199104)
MAKE_LITERAL_PAIR(const_tbl+4981, const_tbl+199121)
MAKE_LITERAL_PAIR(const_tbl+4964, const_tbl+199138)
MAKE_LITERAL_PAIR(const_tbl+4947, const_tbl+199155)
MAKE_LITERAL_PAIR(const_tbl+4930, const_tbl+199172)
MAKE_LITERAL_PAIR(const_tbl+4913, const_tbl+199189)
MAKE_LITERAL_PAIR(const_tbl+4896, const_tbl+199206)
MAKE_LITERAL_PAIR(const_tbl+4879, const_tbl+199223)
MAKE_LITERAL_PAIR(const_tbl+4862, const_tbl+199240)
MAKE_LITERAL_PAIR(const_tbl+4845, const_tbl+199257)
MAKE_LITERAL_PAIR(const_tbl+4828, const_tbl+199274)
MAKE_LITERAL_PAIR(const_tbl+4811, const_tbl+199291)
MAKE_LITERAL_PAIR(const_tbl+4794, const_tbl+199308)
MAKE_LITERAL_PAIR(const_tbl+4777, const_tbl+199325)
MAKE_LITERAL_PAIR(const_tbl+4760, const_tbl+199342)
MAKE_LITERAL_PAIR(const_tbl+4743, const_tbl+199359)
MAKE_LITERAL_PAIR(const_tbl+4726, const_tbl+199376)
MAKE_LITERAL_PAIR(const_tbl+4709, const_tbl+199393)
MAKE_LITERAL_PAIR(const_tbl+4692, const_tbl+199410)
MAKE_LITERAL_PAIR(const_tbl+4675, const_tbl+199427)
MAKE_LITERAL_PAIR(const_tbl+4658, const_tbl+199444)
MAKE_LITERAL_PAIR(const_tbl+4641, const_tbl+199461)
MAKE_LITERAL_PAIR(const_tbl+4624, const_tbl+199478)
MAKE_LITERAL_PAIR(const_tbl+4607, const_tbl+199495)
MAKE_LITERAL_PAIR(const_tbl+4590, const_tbl+199512)
MAKE_LITERAL_PAIR(const_tbl+4573, const_tbl+199529)
MAKE_LITERAL_PAIR(const_tbl+4556, const_tbl+199546)
MAKE_LITERAL_PAIR(const_tbl+4539, const_tbl+199563)
MAKE_LITERAL_PAIR(const_tbl+4522, const_tbl+199580)
MAKE_LITERAL_PAIR(const_tbl+4505, const_tbl+199597)
MAKE_LITERAL_PAIR(const_tbl+4488, const_tbl+199614)
MAKE_LITERAL_PAIR(const_tbl+4471, const_tbl+199631)
MAKE_LITERAL_PAIR(const_tbl+4454, const_tbl+199648)
MAKE_LITERAL_PAIR(const_tbl+4437, const_tbl+199665)
MAKE_LITERAL_PAIR(const_tbl+4420, const_tbl+199682)
MAKE_LITERAL_PAIR(const_tbl+4403, const_tbl+199699)
MAKE_LITERAL_PAIR(const_tbl+4386, const_tbl+199716)
MAKE_LITERAL_PAIR(const_tbl+4369, const_tbl+199733)
MAKE_LITERAL_PAIR(const_tbl+4352, const_tbl+199750)
MAKE_LITERAL_PAIR(const_tbl+4335, const_tbl+199767)
MAKE_LITERAL_PAIR(const_tbl+4318, const_tbl+199784)
MAKE_LITERAL_PAIR(const_tbl+4301, const_tbl+199801)
MAKE_LITERAL_PAIR(const_tbl+4284, const_tbl+199818)
MAKE_LITERAL_PAIR(const_tbl+4267, const_tbl+199835)
MAKE_LITERAL_PAIR(const_tbl+4250, const_tbl+199852)
MAKE_LITERAL_PAIR(const_tbl+4233, const_tbl+199869)
MAKE_LITERAL_PAIR(const_tbl+4216, const_tbl+199886)
MAKE_LITERAL_PAIR(const_tbl+4199, const_tbl+199903)
MAKE_LITERAL_PAIR(const_tbl+4182, const_tbl+199920)
MAKE_LITERAL_PAIR(const_tbl+4165, const_tbl+199937)
MAKE_LITERAL_PAIR(const_tbl+4148, const_tbl+199954)
MAKE_LITERAL_PAIR(const_tbl+4131, const_tbl+199971)
MAKE_LITERAL_PAIR(const_tbl+4114, const_tbl+199988)
MAKE_LITERAL_PAIR(const_tbl+4097, const_tbl+200005)
MAKE_LITERAL_PAIR(const_tbl+4080, const_tbl+200022)
MAKE_LITERAL_PAIR(const_tbl+4063, const_tbl+200039)
MAKE_LITERAL_PAIR(const_tbl+4046, const_tbl+200056)
MAKE_LITERAL_PAIR(const_tbl+4029, const_tbl+200073)
MAKE_LITERAL_PAIR(const_tbl+4012, const_tbl+200090)
MAKE_LITERAL_PAIR(const_tbl+3995, const_tbl+200107)
MAKE_LITERAL_PAIR(const_tbl+3978, const_tbl+200124)
MAKE_LITERAL_PAIR(const_tbl+3961, const_tbl+200141)
MAKE_LITERAL_PAIR(const_tbl+3944, const_tbl+200158)
MAKE_LITERAL_PAIR(const_tbl+3927, const_tbl+200175)
MAKE_LITERAL_PAIR(const_tbl+3910, const_tbl+200192)
MAKE_LITERAL_PAIR(const_tbl+3893, const_tbl+200209)
MAKE_LITERAL_PAIR(const_tbl+3876, const_tbl+200226)
MAKE_LITERAL_PAIR(const_tbl+3859, const_tbl+200243)
MAKE_LITERAL_PAIR(const_tbl+3842, const_tbl+200260)
MAKE_LITERAL_PAIR(const_tbl+3825, const_tbl+200277)
MAKE_LITERAL_PAIR(const_tbl+3808, const_tbl+200294)
MAKE_LITERAL_PAIR(const_tbl+3791, const_tbl+200311)
MAKE_LITERAL_PAIR(const_tbl+3774, const_tbl+200328)
MAKE_LITERAL_PAIR(const_tbl+3757, const_tbl+200345)
MAKE_LITERAL_PAIR(const_tbl+3740, const_tbl+200362)
MAKE_LITERAL_PAIR(const_tbl+3723, const_tbl+200379)
MAKE_LITERAL_PAIR(const_tbl+3706, const_tbl+200396)
MAKE_LITERAL_PAIR(const_tbl+3689, const_tbl+200413)
MAKE_LITERAL_PAIR(const_tbl+3672, const_tbl+200430)
MAKE_LITERAL_PAIR(const_tbl+3655, const_tbl+200447)
MAKE_LITERAL_PAIR(const_tbl+3638, const_tbl+200464)
MAKE_LITERAL_PAIR(const_tbl+3621, const_tbl+200481)
MAKE_LITERAL_PAIR(const_tbl+3604, const_tbl+200498)
MAKE_LITERAL_PAIR(const_tbl+3587, const_tbl+200515)
MAKE_LITERAL_PAIR(const_tbl+3570, const_tbl+200532)
MAKE_LITERAL_PAIR(const_tbl+3553, const_tbl+200549)
MAKE_LITERAL_PAIR(const_tbl+3536, const_tbl+200566)
MAKE_LITERAL_PAIR(const_tbl+3519, const_tbl+200583)
MAKE_LITERAL_PAIR(const_tbl+3502, const_tbl+200600)
MAKE_LITERAL_PAIR(const_tbl+3485, const_tbl+200617)
MAKE_LITERAL_PAIR(const_tbl+3468, const_tbl+200634)
MAKE_LITERAL_PAIR(const_tbl+3451, const_tbl+200651)
MAKE_LITERAL_PAIR(const_tbl+3434, const_tbl+200668)
MAKE_LITERAL_PAIR(const_tbl+3417, const_tbl+200685)
MAKE_LITERAL_PAIR(const_tbl+3400, const_tbl+200702)
MAKE_LITERAL_PAIR(const_tbl+3383, const_tbl+200719)
MAKE_LITERAL_PAIR(const_tbl+3366, const_tbl+200736)
MAKE_LITERAL_PAIR(const_tbl+3349, const_tbl+200753)
MAKE_LITERAL_PAIR(const_tbl+3332, const_tbl+200770)
MAKE_LITERAL_PAIR(const_tbl+3315, const_tbl+200787)
MAKE_LITERAL_PAIR(const_tbl+3298, const_tbl+200804)
MAKE_LITERAL_PAIR(const_tbl+3281, const_tbl+200821)
MAKE_LITERAL_PAIR(const_tbl+3264, const_tbl+200838)
MAKE_LITERAL_PAIR(const_tbl+3247, const_tbl+200855)
MAKE_LITERAL_PAIR(const_tbl+3230, const_tbl+200872)
MAKE_LITERAL_PAIR(const_tbl+3213, const_tbl+200889)
MAKE_LITERAL_PAIR(const_tbl+3196, const_tbl+200906)
MAKE_LITERAL_PAIR(const_tbl+3179, const_tbl+200923)
MAKE_LITERAL_PAIR(const_tbl+3162, const_tbl+200940)
MAKE_LITERAL_PAIR(const_tbl+3145, const_tbl+200957)
MAKE_LITERAL_PAIR(const_tbl+3128, const_tbl+200974)
MAKE_LITERAL_PAIR(const_tbl+3111, const_tbl+200991)
MAKE_LITERAL_PAIR(const_tbl+3094, const_tbl+201008)
MAKE_LITERAL_PAIR(const_tbl+3077, const_tbl+201025)
MAKE_LITERAL_PAIR(const_tbl+3060, const_tbl+201042)
MAKE_LITERAL_PAIR(const_tbl+3043, const_tbl+201059)
MAKE_LITERAL_PAIR(const_tbl+3026, const_tbl+201076)
MAKE_LITERAL_PAIR(const_tbl+3009, const_tbl+201093)
MAKE_LITERAL_PAIR(const_tbl+2992, const_tbl+201110)
MAKE_LITERAL_PAIR(const_tbl+2975, const_tbl+201127)
MAKE_LITERAL_PAIR(const_tbl+2958, const_tbl+201144)
MAKE_LITERAL_PAIR(const_tbl+2941, const_tbl+201161)
MAKE_LITERAL_PAIR(const_tbl+2924, const_tbl+201178)
MAKE_LITERAL_PAIR(const_tbl+2907, const_tbl+201195)
MAKE_LITERAL_PAIR(const_tbl+2890, const_tbl+201212)
MAKE_LITERAL_PAIR(const_tbl+2873, const_tbl+201229)
MAKE_LITERAL_PAIR(const_tbl+2856, const_tbl+201246)
MAKE_LITERAL_PAIR(const_tbl+2839, const_tbl+201263)
MAKE_LITERAL_PAIR(const_tbl+2822, const_tbl+201280)
MAKE_LITERAL_PAIR(const_tbl+2805, const_tbl+201297)
MAKE_LITERAL_PAIR(const_tbl+2788, const_tbl+201314)
MAKE_LITERAL_PAIR(const_tbl+2771, const_tbl+201331)
MAKE_LITERAL_PAIR(const_tbl+2754, const_tbl+201348)
MAKE_LITERAL_PAIR(const_tbl+2737, const_tbl+201365)
MAKE_LITERAL_PAIR(const_tbl+2720, const_tbl+201382)
MAKE_LITERAL_PAIR(const_tbl+2703, const_tbl+201399)
MAKE_LITERAL_PAIR(const_tbl+2686, const_tbl+201416)
MAKE_LITERAL_PAIR(const_tbl+2669, const_tbl+201433)
MAKE_LITERAL_PAIR(const_tbl+2652, const_tbl+201450)
MAKE_LITERAL_PAIR(const_tbl+2635, const_tbl+201467)
MAKE_LITERAL_PAIR(const_tbl+2618, const_tbl+201484)
MAKE_LITERAL_PAIR(const_tbl+2601, const_tbl+201501)
MAKE_LITERAL_PAIR(const_tbl+2584, const_tbl+201518)
MAKE_LITERAL_PAIR(const_tbl+2567, const_tbl+201535)
MAKE_LITERAL_PAIR(const_tbl+2550, const_tbl+201552)
MAKE_LITERAL_PAIR(const_tbl+2533, const_tbl+201569)
MAKE_LITERAL_PAIR(const_tbl+2516, const_tbl+201586)
MAKE_LITERAL_PAIR(const_tbl+2499, const_tbl+201603)
MAKE_LITERAL_PAIR(const_tbl+2482, const_tbl+201620)
MAKE_LITERAL_PAIR(const_tbl+2465, const_tbl+201637)
MAKE_LITERAL_PAIR(const_tbl+2448, const_tbl+201654)
MAKE_LITERAL_PAIR(const_tbl+2431, const_tbl+201671)
MAKE_LITERAL_PAIR(const_tbl+2414, const_tbl+201688)
MAKE_LITERAL_PAIR(const_tbl+2397, const_tbl+201705)
MAKE_LITERAL_PAIR(const_tbl+2380, const_tbl+201722)
MAKE_LITERAL_PAIR(const_tbl+2363, const_tbl+201739)
MAKE_LITERAL_PAIR(const_tbl+2346, const_tbl+201756)
MAKE_LITERAL_PAIR(const_tbl+2329, const_tbl+201773)
MAKE_LITERAL_PAIR(const_tbl+2312, const_tbl+201790)
MAKE_LITERAL_PAIR(const_tbl+2295, const_tbl+201807)
MAKE_LITERAL_PAIR(const_tbl+2278, const_tbl+201824)
MAKE_LITERAL_PAIR(const_tbl+2261, const_tbl+201841)
MAKE_LITERAL_PAIR(const_tbl+2244, const_tbl+201858)
MAKE_LITERAL_PAIR(const_tbl+2227, const_tbl+201875)
MAKE_LITERAL_PAIR(const_tbl+2210, const_tbl+201892)
MAKE_LITERAL_PAIR(const_tbl+2193, const_tbl+201909)
MAKE_LITERAL_PAIR(const_tbl+2176, const_tbl+201926)
MAKE_LITERAL_PAIR(const_tbl+2159, const_tbl+201943)
MAKE_LITERAL_PAIR(const_tbl+2142, const_tbl+201960)
MAKE_LITERAL_PAIR(const_tbl+2125, const_tbl+201977)
MAKE_LITERAL_PAIR(const_tbl+2108, const_tbl+201994)
MAKE_LITERAL_PAIR(const_tbl+2091, const_tbl+202011)
MAKE_LITERAL_PAIR(const_tbl+2074, const_tbl+202028)
MAKE_LITERAL_PAIR(const_tbl+2057, const_tbl+202045)
MAKE_LITERAL_PAIR(const_tbl+2040, const_tbl+202062)
MAKE_LITERAL_PAIR(const_tbl+2023, const_tbl+202079)
MAKE_LITERAL_PAIR(const_tbl+2006, const_tbl+202096)
MAKE_LITERAL_PAIR(const_tbl+1989, const_tbl+202113)
MAKE_LITERAL_PAIR(const_tbl+1972, const_tbl+202130)
MAKE_LITERAL_PAIR(const_tbl+1955, const_tbl+202147)
MAKE_LITERAL_PAIR(const_tbl+1938, const_tbl+202164)
MAKE_LITERAL_PAIR(const_tbl+1921, const_tbl+202181)
MAKE_LITERAL_PAIR(const_tbl+1904, const_tbl+202198)
MAKE_LITERAL_PAIR(const_tbl+1887, const_tbl+202215)
MAKE_LITERAL_PAIR(const_tbl+1870, const_tbl+202232)
MAKE_LITERAL_PAIR(const_tbl+1853, const_tbl+202249)
MAKE_LITERAL_PAIR(const_tbl+1836, const_tbl+202266)
MAKE_LITERAL_PAIR(const_tbl+1819, const_tbl+202283)
MAKE_LITERAL_PAIR(const_tbl+1802, const_tbl+202300)
MAKE_LITERAL_PAIR(const_tbl+1785, const_tbl+202317)
MAKE_LITERAL_PAIR(const_tbl+1768, const_tbl+202334)
MAKE_LITERAL_PAIR(const_tbl+1751, const_tbl+202351)
MAKE_LITERAL_PAIR(const_tbl+1734, const_tbl+202368)
MAKE_LITERAL_PAIR(const_tbl+1717, const_tbl+202385)
MAKE_LITERAL_PAIR(const_tbl+1700, const_tbl+202402)
MAKE_LITERAL_PAIR(const_tbl+1683, const_tbl+202419)
MAKE_LITERAL_PAIR(const_tbl+1666, const_tbl+202436)
MAKE_LITERAL_PAIR(const_tbl+1649, const_tbl+202453)
MAKE_LITERAL_PAIR(const_tbl+1632, const_tbl+202470)
MAKE_LITERAL_PAIR(const_tbl+1615, const_tbl+202487)
MAKE_LITERAL_PAIR(const_tbl+1598, const_tbl+202504)
MAKE_LITERAL_PAIR(const_tbl+1581, const_tbl+202521)
MAKE_LITERAL_PAIR(const_tbl+1564, const_tbl+202538)
MAKE_LITERAL_PAIR(const_tbl+1547, const_tbl+202555)
MAKE_LITERAL_PAIR(const_tbl+1530, const_tbl+202572)
MAKE_LITERAL_PAIR(const_tbl+1513, const_tbl+202589)
MAKE_LITERAL_PAIR(const_tbl+1496, const_tbl+202606)
MAKE_LITERAL_PAIR(const_tbl+1479, const_tbl+202623)
MAKE_LITERAL_PAIR(const_tbl+1462, const_tbl+202640)
MAKE_LITERAL_PAIR(const_tbl+1445, const_tbl+202657)
MAKE_LITERAL_PAIR(const_tbl+1428, const_tbl+202674)
MAKE_LITERAL_PAIR(const_tbl+1411, const_tbl+202691)
MAKE_LITERAL_PAIR(const_tbl+1394, const_tbl+202708)
MAKE_LITERAL_PAIR(const_tbl+1377, const_tbl+202725)
MAKE_LITERAL_PAIR(const_tbl+1360, const_tbl+202742)
MAKE_LITERAL_PAIR(const_tbl+1343, const_tbl+202759)
MAKE_LITERAL_PAIR(const_tbl+1326, const_tbl+202776)
MAKE_LITERAL_PAIR(const_tbl+1309, const_tbl+202793)
MAKE_LITERAL_PAIR(const_tbl+1292, const_tbl+202810)
MAKE_LITERAL_PAIR(const_tbl+1275, const_tbl+202827)
MAKE_LITERAL_PAIR(const_tbl+1258, const_tbl+202844)
MAKE_LITERAL_PAIR(const_tbl+1241, const_tbl+202861)
MAKE_LITERAL_PAIR(const_tbl+1224, const_tbl+202878)
MAKE_LITERAL_PAIR(const_tbl+1207, const_tbl+202895)
MAKE_LITERAL_PAIR(const_tbl+1190, const_tbl+202912)
MAKE_LITERAL_PAIR(const_tbl+1173, const_tbl+202929)
MAKE_LITERAL_PAIR(const_tbl+1156, const_tbl+202946)
MAKE_LITERAL_PAIR(const_tbl+1139, const_tbl+202963)
MAKE_LITERAL_PAIR(const_tbl+1122, const_tbl+202980)
MAKE_LITERAL_PAIR(const_tbl+1105, const_tbl+202997)
MAKE_LITERAL_PAIR(const_tbl+1088, const_tbl+203014)
MAKE_LITERAL_PAIR(const_tbl+1071, const_tbl+203031)
MAKE_LITERAL_PAIR(const_tbl+1054, const_tbl+203048)
MAKE_LITERAL_PAIR(const_tbl+1037, const_tbl+203065)
MAKE_LITERAL_PAIR(const_tbl+1020, const_tbl+203082)
MAKE_LITERAL_PAIR(const_tbl+1003, const_tbl+203099)
MAKE_LITERAL_PAIR(const_tbl+986, const_tbl+203116)
MAKE_LITERAL_PAIR(const_tbl+969, const_tbl+203133)
MAKE_LITERAL_PAIR(const_tbl+952, const_tbl+203150)
MAKE_LITERAL_PAIR(const_tbl+935, const_tbl+203167)
MAKE_LITERAL_PAIR(const_tbl+918, const_tbl+203184)
MAKE_LITERAL_PAIR(const_tbl+901, const_tbl+203201)
MAKE_LITERAL_PAIR(const_tbl+884, const_tbl+203218)
MAKE_LITERAL_PAIR(const_tbl+867, const_tbl+203235)
MAKE_LITERAL_PAIR(const_tbl+850, const_tbl+203252)
MAKE_LITERAL_PAIR(const_tbl+833, const_tbl+203269)
MAKE_LITERAL_PAIR(const_tbl+816, const_tbl+203286)
MAKE_LITERAL_PAIR(const_tbl+799, const_tbl+203303)
MAKE_LITERAL_PAIR(const_tbl+782, const_tbl+203320)
MAKE_LITERAL_PAIR(const_tbl+765, const_tbl+203337)
MAKE_LITERAL_PAIR(const_tbl+748, const_tbl+203354)
MAKE_LITERAL_PAIR(const_tbl+731, const_tbl+203371)
MAKE_LITERAL_PAIR(const_tbl+714, const_tbl+203388)
MAKE_LITERAL_PAIR(const_tbl+697, const_tbl+203405)
MAKE_LITERAL_PAIR(const_tbl+680, const_tbl+203422)
MAKE_LITERAL_PAIR(const_tbl+663, const_tbl+203439)
MAKE_LITERAL_PAIR(const_tbl+646, const_tbl+203456)
MAKE_LITERAL_PAIR(const_tbl+629, const_tbl+203473)
MAKE_LITERAL_PAIR(const_tbl+612, const_tbl+203490)
MAKE_LITERAL_PAIR(const_tbl+595, const_tbl+203507)
MAKE_LITERAL_PAIR(const_tbl+578, const_tbl+203524)
MAKE_LITERAL_PAIR(const_tbl+561, const_tbl+203541)
MAKE_LITERAL_PAIR(const_tbl+544, const_tbl+203558)
MAKE_LITERAL_PAIR(const_tbl+527, const_tbl+203575)
MAKE_LITERAL_PAIR(const_tbl+510, const_tbl+203592)
MAKE_LITERAL_PAIR(const_tbl+493, const_tbl+203609)
MAKE_LITERAL_PAIR(const_tbl+476, const_tbl+203626)
MAKE_LITERAL_PAIR(const_tbl+459, const_tbl+203643)
MAKE_LITERAL_PAIR(const_tbl+442, const_tbl+203660)
MAKE_LITERAL_PAIR(const_tbl+425, const_tbl+203677)
MAKE_LITERAL_PAIR(const_tbl+408, const_tbl+203694)
MAKE_LITERAL_PAIR(const_tbl+391, const_tbl+203711)
MAKE_LITERAL_PAIR(const_tbl+374, const_tbl+203728)
MAKE_LITERAL_PAIR(const_tbl+357, const_tbl+203745)
MAKE_LITERAL_PAIR(const_tbl+340, const_tbl+203762)
MAKE_LITERAL_PAIR(const_tbl+323, const_tbl+203779)
MAKE_LITERAL_PAIR(const_tbl+306, const_tbl+203796)
MAKE_LITERAL_PAIR(const_tbl+289, const_tbl+203813)
MAKE_LITERAL_PAIR(const_tbl+272, const_tbl+203830)
MAKE_LITERAL_PAIR(const_tbl+255, const_tbl+203847)
MAKE_LITERAL_PAIR(const_tbl+238, const_tbl+203864)
MAKE_LITERAL_PAIR(const_tbl+221, const_tbl+203881)
MAKE_LITERAL_PAIR(const_tbl+204, const_tbl+203898)
MAKE_LITERAL_PAIR(const_tbl+187, const_tbl+203915)
MAKE_LITERAL_PAIR(const_tbl+170, const_tbl+203932)
MAKE_LITERAL_PAIR(const_tbl+153, const_tbl+203949)
MAKE_LITERAL_PAIR(const_tbl+136, const_tbl+203966)
MAKE_LITERAL_PAIR(const_tbl+119, const_tbl+203983)
MAKE_LITERAL_PAIR(const_tbl+102, const_tbl+204000)
MAKE_LITERAL_PAIR(const_tbl+85, const_tbl+204017)
MAKE_LITERAL_PAIR(const_tbl+34, const_tbl+204034)
;;; These macro definitions are required for the primitive
;;; definitions in the epilogue to work properly
%define SOB_VOID_ADDRESS const_tbl+0
%define SOB_NIL_ADDRESS const_tbl+1
%define SOB_FALSE_ADDRESS const_tbl+2
%define SOB_TRUE_ADDRESS const_tbl+4
global main
section .text
main:
    ;; set up the heap
    mov rdi, GB(2)
    call malloc
    mov [malloc_pointer], rax
    ;; Set up the dummy activation frame
    ;; The dummy return address is T_UNDEFINED
    ;; (which a is a macro for 0) so that returning
    ;; from the top level (which SHOULD NOT HAPPEN
    ;; AND IS A BUG) will cause a segfault.
    push 0                ; argument count
    push SOB_NIL_ADDRESS  ; lexical environment address
    push T_UNDEFINED      ; return address
    push rbp                    
    mov rbp, rsp                ; anchor the dummy frame
    ;; Set up the primitive stdlib fvars:
    ;; Since the primtive procedures are defined in assembly,
    ;; they are not generated by scheme (define ...) expressions.
    ;; This is where we simulate the missing (define ...) expressions
    ;; for all the primitive procedures.
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, boolean?)
mov [fvar_tbl+ (0*8)], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, flonum?)
mov [fvar_tbl+ (1*8)], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, rational?)
mov [fvar_tbl+ (2*8)], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, pair?)
mov [fvar_tbl+ (3*8)], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, null?)
mov [fvar_tbl+ (4*8)], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, char?)
mov [fvar_tbl+ (5*8)], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string?)
mov [fvar_tbl+ (6*8)], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, procedure?)
mov [fvar_tbl+ (7*8)], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, symbol?)
mov [fvar_tbl+ (8*8)], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_length)
mov [fvar_tbl+ (9*8)], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_ref)
mov [fvar_tbl+ (10*8)], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, string_set)
mov [fvar_tbl+ (11*8)], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, make_string)
mov [fvar_tbl+ (12*8)], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, symbol_to_string)
mov [fvar_tbl+ (13*8)], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, char_to_integer)
mov [fvar_tbl+ (14*8)], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, integer_to_char)
mov [fvar_tbl+ (15*8)], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, exact_to_inexact)
mov [fvar_tbl+ (16*8)], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, eq?)
mov [fvar_tbl+ (17*8)], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, add)
mov [fvar_tbl+ (18*8)], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, mul)
mov [fvar_tbl+ (19*8)], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, div)
mov [fvar_tbl+ (20*8)], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, eq)
mov [fvar_tbl+ (21*8)], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, lt)
mov [fvar_tbl+ (22*8)], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, numerator)
mov [fvar_tbl+ (23*8)], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, denominator)
mov [fvar_tbl+ (24*8)], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, gcd)
mov [fvar_tbl+ (25*8)], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, apply)
mov [fvar_tbl+ (27*8)], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, car)
mov [fvar_tbl+ (28*8)], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, cdr)
mov [fvar_tbl+ (29*8)], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, set_car)
mov [fvar_tbl+ (42*8)], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, set_cdr)
mov [fvar_tbl+ (43*8)], rax
MAKE_CLOSURE(rax, SOB_NIL_ADDRESS, cons)
mov [fvar_tbl+ (30*8)], rax
user_code_fragment:
;;; The code you compiled will be added here.
;;; It will be executed immediately after the closures for 
;;; the primitive procedures are set up.
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, [fvar_tbl+ (8* 27)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 30)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 29)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 28)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 4)]
push rax ; calculate arg, rax holds arg, and push it
push 5 ; push argcount
;next is proc:
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+0) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_1:
    cmp rbx, 0
    jge end_loop_1
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_1
end_loop_1:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_2:
    cmp rcx ,r8 ; i<n
    jge end_loop_2
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_2
end_loop_2:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_1)
 jmp Lcont_1
Lcode_1:
push rbp
mov rbp , rsp
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, const_tbl+23
push rax ; calculate arg, rax holds arg, and push it
mov rax, const_tbl+23
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+1) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_3:
    cmp rbx, 1
    jge end_loop_3
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_3
end_loop_3:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_4:
    cmp rcx ,r8 ; i<n
    jge end_loop_4
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_4
end_loop_4:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_2)
 jmp Lcont_2
Lcode_2:
push rbp
mov rbp , rsp
MALLOC rax, 8
mov rbx, qword[rbp+ 8*(4+0)]
mov [rax], rbx
mov qword [rbp + 8 * (4 + (0))],rax
mov rax, SOB_VOID_ADDRESS
MALLOC rax, 8
mov rbx, qword[rbp+ 8*(4+1)]
mov [rax], rbx
mov qword [rbp + 8 * (4 + (1))],rax
mov rax, SOB_VOID_ADDRESS
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+2) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_5:
    cmp rbx, 2
    jge end_loop_5
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_5
end_loop_5:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_6:
    cmp rcx ,r8 ; i<n
    jge end_loop_6
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_6
end_loop_6:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_3)
 jmp Lcont_3
Lcode_3:
push rbp
mov rbp , rsp
;applic:
         push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (1)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
cmp rax, SOB_FALSE_ADDRESS
je Lelse_1
mov rax, const_tbl+1
jmp Lexit_1
Lelse_1:
;applic tp:
push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (2)]
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
;applic:
         push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (1)]
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (4)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (3)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_2:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 Lexit_1:

leave
ret
Lcont_3:
push rax
mov rax, qword [rbp + 8 *(4 + 0)]
pop qword [rax]
mov rax, SOB_VOID_ADDRESS
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+2) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_7:
    cmp rbx, 2
    jge end_loop_7
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_7
end_loop_7:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_8:
    cmp rcx ,r8 ; i<n
    jge end_loop_8
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_8
end_loop_8:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_4)
 jmp Lcont_4
Lcode_4:
push rbp
mov rbp , rsp
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
cmp rax, SOB_FALSE_ADDRESS
je Lelse_2
mov rax, const_tbl+1
jmp Lexit_2
Lelse_2:
;applic tp:
push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (2)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
;applic:
         push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (1)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 *(4 + 0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (3)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_3:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 Lexit_2:

leave
ret
Lcont_4:
push rax
mov rax, qword [rbp + 8 *(4 + 1)]
pop qword [rax]
mov rax, SOB_VOID_ADDRESS
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+2) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_9:
    cmp rbx, 2
    jge end_loop_9
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_9
end_loop_9:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_10:
    cmp rcx ,r8 ; i<n
    jge end_loop_10
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_10
end_loop_10:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_5)
 jmp Lcont_5
Lcode_5:
mov rdx, rsp ; rdx hold cur stack ptr ==> [rdx]= ret_adr etc... (i chose rdx because cons does'nt overide it)
mov r8, [rdx+8*2] ; r8= arg_count 
cmp r8, 2 ; compare arg_count to the amount we've expected
jl .no_fix_necessery
; else: we need to collect all exses args to a list
mov r9, SOB_NIL_ADDRESS ; r9 holds curr list
mov r10, r8
sub r10, 1 ; r10= lst size= num of opt args
mov r11, r8
dec r11 ; r11 =idx= n-1
.loop_create_lst:
  cmp r11, 1 
  jl .end_loop_create_lst ; end loop if idx<params.lst, which is when we get to the args that arent optional
  mov r13, rsp; r13=sp
  push SOB_NIL_ADDRESS; push magic
  push r9 ; push cdr
  push qword [rdx+8*(3+r11)] ; push arg_idx = car
  push qword 2; argcount= car, cdr
  push qword [rdx+8*1]; env
  call cons
  mov rsp, r13
  mov r9, rax ; r9 hold new lst
  mov r13, [r9+1]; r13=car
  mov r13, [r9+1+8]; r13=cdr
  dec r11 ; idx--
  jmp .loop_create_lst
.end_loop_create_lst:

; now r9 holds list of optional args
mov r13, [rdx+8*(3+r8-1)]; should be last opt arg=3
mov qword [rdx+8*(3+r8-1)], r9 ; set arg_n-1 to be optional
mov qword [rdx+8*2], 2
mov r9, r8  ; r9= n
inc r9  ;r9 = n+1 =3+n-2
shl r9, 3 ;r9= 8*(3+n-2)= idx of last place in stack
mov r11, 1
add r11, 2 
shl r11, 3 ; r11 = 8*(3+ params_len -1) = idx of last mandatory arg = the first element from stack that should be moved up
mov r13, [rdx+r11]; should be 1
; both r11, r9 will be decresed each time by 8
.loop_shift_stack:
  cmp r11, 0
  jl .end_loop_shift_stack
  mov rax, [rdx+r11] ; rax = cur element to move
  mov [rdx+r9], rax ; move to the top of the stack the cur element top down
  sub r9, 8
  sub r11, 8
  jmp .loop_shift_stack
.end_loop_shift_stack:
; now, rdx+r9 holds the last place on stack
add r9, 8
add r9, rdx
mov rsp, r9
.no_fix_necessery:

push rbp
mov rbp , rsp
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_4:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 
leave
ret
Lcont_5:

leave
ret
Lcont_2:
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_1:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 
leave
ret
Lcont_1:
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
mov [fvar_tbl+(8*39)], rax
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, [fvar_tbl+ (8* 30)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 29)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 28)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 4)]
push rax ; calculate arg, rax holds arg, and push it
push 4 ; push argcount
;next is proc:
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+0) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_11:
    cmp rbx, 0
    jge end_loop_11
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_11
end_loop_11:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_12:
    cmp rcx ,r8 ; i<n
    jge end_loop_12
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_12
end_loop_12:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_6)
 jmp Lcont_6
Lcode_6:
push rbp
mov rbp , rsp
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, const_tbl+23
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+1) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_13:
    cmp rbx, 1
    jge end_loop_13
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_13
end_loop_13:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_14:
    cmp rcx ,r8 ; i<n
    jge end_loop_14
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_14
end_loop_14:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_7)
 jmp Lcont_7
Lcode_7:
push rbp
mov rbp , rsp
MALLOC rax, 8
mov rbx, qword[rbp+ 8*(4+0)]
mov [rax], rbx
mov qword [rbp + 8 * (4 + (0))],rax
mov rax, SOB_VOID_ADDRESS
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+2) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_15:
    cmp rbx, 2
    jge end_loop_15
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_15
end_loop_15:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_16:
    cmp rcx ,r8 ; i<n
    jge end_loop_16
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_16
end_loop_16:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_8)
 jmp Lcont_8
Lcode_8:
push rbp
mov rbp , rsp
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 2)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
cmp rax, SOB_FALSE_ADDRESS
je Lelse_3
mov rax, qword [rbp + 8 *(4 + 1)]
jmp Lexit_3
Lelse_3:
;applic tp:
push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 2)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (2)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
;applic:
         push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 2)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (1)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 *(4 + 0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 3 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_6:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 Lexit_3:

leave
ret
Lcont_8:
push rax
mov rax, qword [rbp + 8 *(4 + 0)]
pop qword [rax]
mov rax, SOB_VOID_ADDRESS
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+2) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_17:
    cmp rbx, 2
    jge end_loop_17
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_17
end_loop_17:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_18:
    cmp rcx ,r8 ; i<n
    jge end_loop_18
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_18
end_loop_18:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_9)
 jmp Lcont_9
Lcode_9:
push rbp
mov rbp , rsp
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 2)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 3 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_7:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 
leave
ret
Lcont_9:

leave
ret
Lcont_7:
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_5:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 
leave
ret
Lcont_6:
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
mov [fvar_tbl+(8*33)], rax
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, [fvar_tbl+ (8* 29)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 28)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 4)]
push rax ; calculate arg, rax holds arg, and push it
push 3 ; push argcount
;next is proc:
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+0) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_19:
    cmp rbx, 0
    jge end_loop_19
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_19
end_loop_19:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_20:
    cmp rcx ,r8 ; i<n
    jge end_loop_20
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_20
end_loop_20:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_10)
 jmp Lcont_10
Lcode_10:
push rbp
mov rbp , rsp
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, const_tbl+23
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+1) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_21:
    cmp rbx, 1
    jge end_loop_21
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_21
end_loop_21:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_22:
    cmp rcx ,r8 ; i<n
    jge end_loop_22
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_22
end_loop_22:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_11)
 jmp Lcont_11
Lcode_11:
push rbp
mov rbp , rsp
MALLOC rax, 8
mov rbx, qword[rbp+ 8*(4+0)]
mov [rax], rbx
mov qword [rbp + 8 * (4 + (0))],rax
mov rax, SOB_VOID_ADDRESS
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+2) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_23:
    cmp rbx, 2
    jge end_loop_23
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_23
end_loop_23:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_24:
    cmp rcx ,r8 ; i<n
    jge end_loop_24
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_24
end_loop_24:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_12)
 jmp Lcont_12
Lcode_12:
push rbp
mov rbp , rsp
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 2)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
cmp rax, SOB_FALSE_ADDRESS
je Lelse_4
mov rax, qword [rbp + 8 *(4 + 1)]
jmp Lexit_4
Lelse_4:
;applic tp:
push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 2)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (2)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 3 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 2)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (1)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 *(4 + 0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_9:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 Lexit_4:

leave
ret
Lcont_12:
push rax
mov rax, qword [rbp + 8 *(4 + 0)]
pop qword [rax]
mov rax, SOB_VOID_ADDRESS
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+2) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_25:
    cmp rbx, 2
    jge end_loop_25
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_25
end_loop_25:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_26:
    cmp rcx ,r8 ; i<n
    jge end_loop_26
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_26
end_loop_26:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_13)
 jmp Lcont_13
Lcode_13:
push rbp
mov rbp , rsp
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 2)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 3 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_10:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 
leave
ret
Lcont_13:

leave
ret
Lcont_11:
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_8:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 
leave
ret
Lcont_10:
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
mov [fvar_tbl+(8*34)], rax
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, [fvar_tbl+ (8* 30)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 28)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 29)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 27)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 4)]
push rax ; calculate arg, rax holds arg, and push it
push 5 ; push argcount
;next is proc:
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+0) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_27:
    cmp rbx, 0
    jge end_loop_27
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_27
end_loop_27:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_28:
    cmp rcx ,r8 ; i<n
    jge end_loop_28
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_28
end_loop_28:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_14)
 jmp Lcont_14
Lcode_14:
push rbp
mov rbp , rsp
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+1) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_29:
    cmp rbx, 1
    jge end_loop_29
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_29
end_loop_29:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_30:
    cmp rcx ,r8 ; i<n
    jge end_loop_30
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_30
end_loop_30:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_15)
 jmp Lcont_15
Lcode_15:
mov rdx, rsp ; rdx hold cur stack ptr ==> [rdx]= ret_adr etc... (i chose rdx because cons does'nt overide it)
mov r8, [rdx+8*2] ; r8= arg_count 
cmp r8, 1 ; compare arg_count to the amount we've expected
jl .no_fix_necessery
; else: we need to collect all exses args to a list
mov r9, SOB_NIL_ADDRESS ; r9 holds curr list
mov r10, r8
sub r10, 0 ; r10= lst size= num of opt args
mov r11, r8
dec r11 ; r11 =idx= n-1
.loop_create_lst:
  cmp r11, 0 
  jl .end_loop_create_lst ; end loop if idx<params.lst, which is when we get to the args that arent optional
  mov r13, rsp; r13=sp
  push SOB_NIL_ADDRESS; push magic
  push r9 ; push cdr
  push qword [rdx+8*(3+r11)] ; push arg_idx = car
  push qword 2; argcount= car, cdr
  push qword [rdx+8*1]; env
  call cons
  mov rsp, r13
  mov r9, rax ; r9 hold new lst
  mov r13, [r9+1]; r13=car
  mov r13, [r9+1+8]; r13=cdr
  dec r11 ; idx--
  jmp .loop_create_lst
.end_loop_create_lst:

; now r9 holds list of optional args
mov r13, [rdx+8*(3+r8-1)]; should be last opt arg=3
mov qword [rdx+8*(3+r8-1)], r9 ; set arg_n-1 to be optional
mov qword [rdx+8*2], 1
mov r9, r8  ; r9= n
inc r9  ;r9 = n+1 =3+n-2
shl r9, 3 ;r9= 8*(3+n-2)= idx of last place in stack
mov r11, 0
add r11, 2 
shl r11, 3 ; r11 = 8*(3+ params_len -1) = idx of last mandatory arg = the first element from stack that should be moved up
mov r13, [rdx+r11]; should be 1
; both r11, r9 will be decresed each time by 8
.loop_shift_stack:
  cmp r11, 0
  jl .end_loop_shift_stack
  mov rax, [rdx+r11] ; rax = cur element to move
  mov [rdx+r9], rax ; move to the top of the stack the cur element top down
  sub r9, 8
  sub r11, 8
  jmp .loop_shift_stack
.end_loop_shift_stack:
; now, rdx+r9 holds the last place on stack
add r9, 8
add r9, rdx
mov rsp, r9
.no_fix_necessery:

push rbp
mov rbp , rsp
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
cmp rax, SOB_FALSE_ADDRESS
je Lelse_5
mov rax, qword [rbp + 8 *(4 + 0)]
jmp Lexit_5
Lelse_5:
;applic:
         push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (2)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
cmp rax, SOB_FALSE_ADDRESS
je Lelse_6
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (3)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_12:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 jmp Lexit_6
Lelse_6:
;applic tp:
push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (2)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 31)]
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (1)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (3)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (4)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_11:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 Lexit_6:
Lexit_5:

leave
ret
Lcont_15:

leave
ret
Lcont_14:
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
mov [fvar_tbl+(8*31)], rax
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, [fvar_tbl+ (8* 30)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 34)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 4)]
push rax ; calculate arg, rax holds arg, and push it
push 3 ; push argcount
;next is proc:
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+0) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_31:
    cmp rbx, 0
    jge end_loop_31
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_31
end_loop_31:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_32:
    cmp rcx ,r8 ; i<n
    jge end_loop_32
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_32
end_loop_32:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_16)
 jmp Lcont_16
Lcode_16:
push rbp
mov rbp , rsp
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+1) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_33:
    cmp rbx, 1
    jge end_loop_33
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_33
end_loop_33:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_34:
    cmp rcx ,r8 ; i<n
    jge end_loop_34
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_34
end_loop_34:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_17)
 jmp Lcont_17
Lcode_17:
mov rdx, rsp ; rdx hold cur stack ptr ==> [rdx]= ret_adr etc... (i chose rdx because cons does'nt overide it)
mov r8, [rdx+8*2] ; r8= arg_count 
cmp r8, 1 ; compare arg_count to the amount we've expected
jl .no_fix_necessery
; else: we need to collect all exses args to a list
mov r9, SOB_NIL_ADDRESS ; r9 holds curr list
mov r10, r8
sub r10, 0 ; r10= lst size= num of opt args
mov r11, r8
dec r11 ; r11 =idx= n-1
.loop_create_lst:
  cmp r11, 0 
  jl .end_loop_create_lst ; end loop if idx<params.lst, which is when we get to the args that arent optional
  mov r13, rsp; r13=sp
  push SOB_NIL_ADDRESS; push magic
  push r9 ; push cdr
  push qword [rdx+8*(3+r11)] ; push arg_idx = car
  push qword 2; argcount= car, cdr
  push qword [rdx+8*1]; env
  call cons
  mov rsp, r13
  mov r9, rax ; r9 hold new lst
  mov r13, [r9+1]; r13=car
  mov r13, [r9+1+8]; r13=cdr
  dec r11 ; idx--
  jmp .loop_create_lst
.end_loop_create_lst:

; now r9 holds list of optional args
mov r13, [rdx+8*(3+r8-1)]; should be last opt arg=3
mov qword [rdx+8*(3+r8-1)], r9 ; set arg_n-1 to be optional
mov qword [rdx+8*2], 1
mov r9, r8  ; r9= n
inc r9  ;r9 = n+1 =3+n-2
shl r9, 3 ;r9= 8*(3+n-2)= idx of last place in stack
mov r11, 0
add r11, 2 
shl r11, 3 ; r11 = 8*(3+ params_len -1) = idx of last mandatory arg = the first element from stack that should be moved up
mov r13, [rdx+r11]; should be 1
; both r11, r9 will be decresed each time by 8
.loop_shift_stack:
  cmp r11, 0
  jl .end_loop_shift_stack
  mov rax, [rdx+r11] ; rax = cur element to move
  mov [rdx+r9], rax ; move to the top of the stack the cur element top down
  sub r9, 8
  sub r11, 8
  jmp .loop_shift_stack
.end_loop_shift_stack:
; now, rdx+r9 holds the last place on stack
add r9, 8
add r9, rdx
mov rsp, r9
.no_fix_necessery:

push rbp
mov rbp , rsp
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, const_tbl+1
push rax ; calculate arg, rax holds arg, and push it
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+2) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_35:
    cmp rbx, 2
    jge end_loop_35
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_35
end_loop_35:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_36:
    cmp rcx ,r8 ; i<n
    jge end_loop_36
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_36
end_loop_36:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_18)
 jmp Lcont_18
Lcode_18:
push rbp
mov rbp , rsp
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
cmp rax, SOB_FALSE_ADDRESS
je Lelse_7
mov rax, qword [rbp + 8 *(4 + 0)]
jmp Lexit_7
Lelse_7:
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (2)]
push rax ; calculate arg, rax holds arg, and push it
push 3 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (1)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_14:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 Lexit_7:

leave
ret
Lcont_18:
push rax ; calculate arg, rax holds arg, and push it
push 3 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (1)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_13:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 
leave
ret
Lcont_17:

leave
ret
Lcont_16:
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
mov [fvar_tbl+(8*26)], rax
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+0) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_37:
    cmp rbx, 0
    jge end_loop_37
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_37
end_loop_37:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_38:
    cmp rcx ,r8 ; i<n
    jge end_loop_38
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_38
end_loop_38:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_19)
 jmp Lcont_19
Lcode_19:
mov rdx, rsp ; rdx hold cur stack ptr ==> [rdx]= ret_adr etc... (i chose rdx because cons does'nt overide it)
mov r8, [rdx+8*2] ; r8= arg_count 
cmp r8, 1 ; compare arg_count to the amount we've expected
jl .no_fix_necessery
; else: we need to collect all exses args to a list
mov r9, SOB_NIL_ADDRESS ; r9 holds curr list
mov r10, r8
sub r10, 0 ; r10= lst size= num of opt args
mov r11, r8
dec r11 ; r11 =idx= n-1
.loop_create_lst:
  cmp r11, 0 
  jl .end_loop_create_lst ; end loop if idx<params.lst, which is when we get to the args that arent optional
  mov r13, rsp; r13=sp
  push SOB_NIL_ADDRESS; push magic
  push r9 ; push cdr
  push qword [rdx+8*(3+r11)] ; push arg_idx = car
  push qword 2; argcount= car, cdr
  push qword [rdx+8*1]; env
  call cons
  mov rsp, r13
  mov r9, rax ; r9 hold new lst
  mov r13, [r9+1]; r13=car
  mov r13, [r9+1+8]; r13=cdr
  dec r11 ; idx--
  jmp .loop_create_lst
.end_loop_create_lst:

; now r9 holds list of optional args
mov r13, [rdx+8*(3+r8-1)]; should be last opt arg=3
mov qword [rdx+8*(3+r8-1)], r9 ; set arg_n-1 to be optional
mov qword [rdx+8*2], 1
mov r9, r8  ; r9= n
inc r9  ;r9 = n+1 =3+n-2
shl r9, 3 ;r9= 8*(3+n-2)= idx of last place in stack
mov r11, 0
add r11, 2 
shl r11, 3 ; r11 = 8*(3+ params_len -1) = idx of last mandatory arg = the first element from stack that should be moved up
mov r13, [rdx+r11]; should be 1
; both r11, r9 will be decresed each time by 8
.loop_shift_stack:
  cmp r11, 0
  jl .end_loop_shift_stack
  mov rax, [rdx+r11] ; rax = cur element to move
  mov [rdx+r9], rax ; move to the top of the stack the cur element top down
  sub r9, 8
  sub r11, 8
  jmp .loop_shift_stack
.end_loop_shift_stack:
; now, rdx+r9 holds the last place on stack
add r9, 8
add r9, rdx
mov rsp, r9
.no_fix_necessery:

push rbp
mov rbp , rsp
mov rax, qword [rbp + 8 *(4 + 0)]

leave
ret
Lcont_19:
mov [fvar_tbl+(8*37)], rax
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, [fvar_tbl+ (8* 29)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 3)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 4)]
push rax ; calculate arg, rax holds arg, and push it
push 3 ; push argcount
;next is proc:
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+0) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_39:
    cmp rbx, 0
    jge end_loop_39
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_39
end_loop_39:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_40:
    cmp rcx ,r8 ; i<n
    jge end_loop_40
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_40
end_loop_40:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_20)
 jmp Lcont_20
Lcode_20:
push rbp
mov rbp , rsp
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, const_tbl+23
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+1) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_41:
    cmp rbx, 1
    jge end_loop_41
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_41
end_loop_41:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_42:
    cmp rcx ,r8 ; i<n
    jge end_loop_42
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_42
end_loop_42:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_21)
 jmp Lcont_21
Lcode_21:
push rbp
mov rbp , rsp
MALLOC rax, 8
mov rbx, qword[rbp+ 8*(4+0)]
mov [rax], rbx
mov qword [rbp + 8 * (4 + (0))],rax
mov rax, SOB_VOID_ADDRESS
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+2) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_43:
    cmp rbx, 2
    jge end_loop_43
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_43
end_loop_43:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_44:
    cmp rcx ,r8 ; i<n
    jge end_loop_44
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_44
end_loop_44:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_22)
 jmp Lcont_22
Lcode_22:
push rbp
mov rbp , rsp
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
cmp rax, SOB_FALSE_ADDRESS
jne Lexit_Or_1
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (1)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
cmp rax, SOB_FALSE_ADDRESS
je Lelse_8
;applic tp:
push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (2)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_16:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 jmp Lexit_8
Lelse_8:
mov rax, const_tbl+2
Lexit_8:
Lexit_Or_1:

leave
ret
Lcont_22:
push rax
mov rax, qword [rbp + 8 *(4 + 0)]
pop qword [rax]
mov rax, SOB_VOID_ADDRESS
mov rax, qword [rbp + 8 *(4 + 0)]
mov rax, qword [rax]

leave
ret
Lcont_21:
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_15:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 
leave
ret
Lcont_20:
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
mov [fvar_tbl+(8*38)], rax
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, [fvar_tbl+ (8* 12)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 28)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 4)]
push rax ; calculate arg, rax holds arg, and push it
push 3 ; push argcount
;next is proc:
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+0) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_45:
    cmp rbx, 0
    jge end_loop_45
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_45
end_loop_45:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_46:
    cmp rcx ,r8 ; i<n
    jge end_loop_46
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_46
end_loop_46:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_23)
 jmp Lcont_23
Lcode_23:
push rbp
mov rbp , rsp
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+1) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_47:
    cmp rbx, 1
    jge end_loop_47
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_47
end_loop_47:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_48:
    cmp rcx ,r8 ; i<n
    jge end_loop_48
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_48
end_loop_48:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_24)
 jmp Lcont_24
Lcode_24:
mov rdx, rsp ; rdx hold cur stack ptr ==> [rdx]= ret_adr etc... (i chose rdx because cons does'nt overide it)
mov r8, [rdx+8*2] ; r8= arg_count 
cmp r8, 2 ; compare arg_count to the amount we've expected
jl .no_fix_necessery
; else: we need to collect all exses args to a list
mov r9, SOB_NIL_ADDRESS ; r9 holds curr list
mov r10, r8
sub r10, 1 ; r10= lst size= num of opt args
mov r11, r8
dec r11 ; r11 =idx= n-1
.loop_create_lst:
  cmp r11, 1 
  jl .end_loop_create_lst ; end loop if idx<params.lst, which is when we get to the args that arent optional
  mov r13, rsp; r13=sp
  push SOB_NIL_ADDRESS; push magic
  push r9 ; push cdr
  push qword [rdx+8*(3+r11)] ; push arg_idx = car
  push qword 2; argcount= car, cdr
  push qword [rdx+8*1]; env
  call cons
  mov rsp, r13
  mov r9, rax ; r9 hold new lst
  mov r13, [r9+1]; r13=car
  mov r13, [r9+1+8]; r13=cdr
  dec r11 ; idx--
  jmp .loop_create_lst
.end_loop_create_lst:

; now r9 holds list of optional args
mov r13, [rdx+8*(3+r8-1)]; should be last opt arg=3
mov qword [rdx+8*(3+r8-1)], r9 ; set arg_n-1 to be optional
mov qword [rdx+8*2], 2
mov r9, r8  ; r9= n
inc r9  ;r9 = n+1 =3+n-2
shl r9, 3 ;r9= 8*(3+n-2)= idx of last place in stack
mov r11, 1
add r11, 2 
shl r11, 3 ; r11 = 8*(3+ params_len -1) = idx of last mandatory arg = the first element from stack that should be moved up
mov r13, [rdx+r11]; should be 1
; both r11, r9 will be decresed each time by 8
.loop_shift_stack:
  cmp r11, 0
  jl .end_loop_shift_stack
  mov rax, [rdx+r11] ; rax = cur element to move
  mov [rdx+r9], rax ; move to the top of the stack the cur element top down
  sub r9, 8
  sub r11, 8
  jmp .loop_shift_stack
.end_loop_shift_stack:
; now, rdx+r9 holds the last place on stack
add r9, 8
add r9, rdx
mov rsp, r9
.no_fix_necessery:

push rbp
mov rbp , rsp
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
cmp rax, SOB_FALSE_ADDRESS
je Lelse_9
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, const_tbl+32
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (2)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_18:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 jmp Lexit_9
Lelse_9:
;applic tp:
push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (1)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (2)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_17:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 Lexit_9:

leave
ret
Lcont_24:

leave
ret
Lcont_23:
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
mov [fvar_tbl+(8*12)], rax
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+0) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_49:
    cmp rbx, 0
    jge end_loop_49
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_49
end_loop_49:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_50:
    cmp rcx ,r8 ; i<n
    jge end_loop_50
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_50
end_loop_50:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_25)
 jmp Lcont_25
Lcode_25:
push rbp
mov rbp , rsp
mov rax, qword [rbp + 8 *(4 + 0)]
cmp rax, SOB_FALSE_ADDRESS
je Lelse_10
mov rax, const_tbl+2
jmp Lexit_10
Lelse_10:
mov rax, const_tbl+4
Lexit_10:

leave
ret
Lcont_25:
mov [fvar_tbl+(8*40)], rax
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, [fvar_tbl+ (8* 4)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 29)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 28)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 22)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 21)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 20)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 19)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 18)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 39)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 33)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 16)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 2)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 1)]
push rax ; calculate arg, rax holds arg, and push it
push 13 ; push argcount
;next is proc:
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+0) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_51:
    cmp rbx, 0
    jge end_loop_51
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_51
end_loop_51:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_52:
    cmp rcx ,r8 ; i<n
    jge end_loop_52
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_52
end_loop_52:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_26)
 jmp Lcont_26
Lcode_26:
push rbp
mov rbp , rsp
;applic tp:
push SOB_NIL_ADDRESS ; push magic
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+1) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_53:
    cmp rbx, 1
    jge end_loop_53
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_53
end_loop_53:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_54:
    cmp rcx ,r8 ; i<n
    jge end_loop_54
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_54
end_loop_54:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_27)
 jmp Lcont_27
Lcode_27:
push rbp
mov rbp , rsp
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+2) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_55:
    cmp rbx, 2
    jge end_loop_55
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_55
end_loop_55:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_56:
    cmp rcx ,r8 ; i<n
    jge end_loop_56
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_56
end_loop_56:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_28)
 jmp Lcont_28
Lcode_28:
push rbp
mov rbp , rsp
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
cmp rax, SOB_FALSE_ADDRESS
je Lelse_14
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (1)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
jmp Lexit_14
Lelse_14:
mov rax, const_tbl+2
Lexit_14:
cmp rax, SOB_FALSE_ADDRESS
je Lelse_11
;applic tp:
push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (2)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_22:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 jmp Lexit_11
Lelse_11:
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (1)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
cmp rax, SOB_FALSE_ADDRESS
je Lelse_13
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
jmp Lexit_13
Lelse_13:
mov rax, const_tbl+2
Lexit_13:
cmp rax, SOB_FALSE_ADDRESS
je Lelse_12
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (2)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_21:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 jmp Lexit_12
Lelse_12:
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_20:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 Lexit_12:
Lexit_11:

leave
ret
Lcont_28:

leave
ret
Lcont_27:
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+1) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_57:
    cmp rbx, 1
    jge end_loop_57
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_57
end_loop_57:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_58:
    cmp rcx ,r8 ; i<n
    jge end_loop_58
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_58
end_loop_58:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_29)
 jmp Lcont_29
Lcode_29:
push rbp
mov rbp , rsp
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+2) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_59:
    cmp rbx, 2
    jge end_loop_59
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_59
end_loop_59:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_60:
    cmp rcx ,r8 ; i<n
    jge end_loop_60
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_60
end_loop_60:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_30)
 jmp Lcont_30
Lcode_30:
mov rdx, rsp ; rdx hold cur stack ptr ==> [rdx]= ret_adr etc... (i chose rdx because cons does'nt overide it)
mov r8, [rdx+8*2] ; r8= arg_count 
cmp r8, 1 ; compare arg_count to the amount we've expected
jl .no_fix_necessery
; else: we need to collect all exses args to a list
mov r9, SOB_NIL_ADDRESS ; r9 holds curr list
mov r10, r8
sub r10, 0 ; r10= lst size= num of opt args
mov r11, r8
dec r11 ; r11 =idx= n-1
.loop_create_lst:
  cmp r11, 0 
  jl .end_loop_create_lst ; end loop if idx<params.lst, which is when we get to the args that arent optional
  mov r13, rsp; r13=sp
  push SOB_NIL_ADDRESS; push magic
  push r9 ; push cdr
  push qword [rdx+8*(3+r11)] ; push arg_idx = car
  push qword 2; argcount= car, cdr
  push qword [rdx+8*1]; env
  call cons
  mov rsp, r13
  mov r9, rax ; r9 hold new lst
  mov r13, [r9+1]; r13=car
  mov r13, [r9+1+8]; r13=cdr
  dec r11 ; idx--
  jmp .loop_create_lst
.end_loop_create_lst:

; now r9 holds list of optional args
mov r13, [rdx+8*(3+r8-1)]; should be last opt arg=3
mov qword [rdx+8*(3+r8-1)], r9 ; set arg_n-1 to be optional
mov qword [rdx+8*2], 1
mov r9, r8  ; r9= n
inc r9  ;r9 = n+1 =3+n-2
shl r9, 3 ;r9= 8*(3+n-2)= idx of last place in stack
mov r11, 0
add r11, 2 
shl r11, 3 ; r11 = 8*(3+ params_len -1) = idx of last mandatory arg = the first element from stack that should be moved up
mov r13, [rdx+r11]; should be 1
; both r11, r9 will be decresed each time by 8
.loop_shift_stack:
  cmp r11, 0
  jl .end_loop_shift_stack
  mov rax, [rdx+r11] ; rax = cur element to move
  mov [rdx+r9], rax ; move to the top of the stack the cur element top down
  sub r9, 8
  sub r11, 8
  jmp .loop_shift_stack
.end_loop_shift_stack:
; now, rdx+r9 holds the last place on stack
add r9, 8
add r9, rdx
mov rsp, r9
.no_fix_necessery:

push rbp
mov rbp , rsp
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, const_tbl+51
push rax ; calculate arg, rax holds arg, and push it
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (5)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
push 3 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (3)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_23:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 
leave
ret
Lcont_30:
mov qword [fvar_tbl+ (8* 18)], rax ;mov value 
mov rax, SOB_VOID_ADDRESS
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+2) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_61:
    cmp rbx, 2
    jge end_loop_61
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_61
end_loop_61:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_62:
    cmp rcx ,r8 ; i<n
    jge end_loop_62
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_62
end_loop_62:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_31)
 jmp Lcont_31
Lcode_31:
mov rdx, rsp ; rdx hold cur stack ptr ==> [rdx]= ret_adr etc... (i chose rdx because cons does'nt overide it)
mov r8, [rdx+8*2] ; r8= arg_count 
cmp r8, 1 ; compare arg_count to the amount we've expected
jl .no_fix_necessery
; else: we need to collect all exses args to a list
mov r9, SOB_NIL_ADDRESS ; r9 holds curr list
mov r10, r8
sub r10, 0 ; r10= lst size= num of opt args
mov r11, r8
dec r11 ; r11 =idx= n-1
.loop_create_lst:
  cmp r11, 0 
  jl .end_loop_create_lst ; end loop if idx<params.lst, which is when we get to the args that arent optional
  mov r13, rsp; r13=sp
  push SOB_NIL_ADDRESS; push magic
  push r9 ; push cdr
  push qword [rdx+8*(3+r11)] ; push arg_idx = car
  push qword 2; argcount= car, cdr
  push qword [rdx+8*1]; env
  call cons
  mov rsp, r13
  mov r9, rax ; r9 hold new lst
  mov r13, [r9+1]; r13=car
  mov r13, [r9+1+8]; r13=cdr
  dec r11 ; idx--
  jmp .loop_create_lst
.end_loop_create_lst:

; now r9 holds list of optional args
mov r13, [rdx+8*(3+r8-1)]; should be last opt arg=3
mov qword [rdx+8*(3+r8-1)], r9 ; set arg_n-1 to be optional
mov qword [rdx+8*2], 1
mov r9, r8  ; r9= n
inc r9  ;r9 = n+1 =3+n-2
shl r9, 3 ;r9= 8*(3+n-2)= idx of last place in stack
mov r11, 0
add r11, 2 
shl r11, 3 ; r11 = 8*(3+ params_len -1) = idx of last mandatory arg = the first element from stack that should be moved up
mov r13, [rdx+r11]; should be 1
; both r11, r9 will be decresed each time by 8
.loop_shift_stack:
  cmp r11, 0
  jl .end_loop_shift_stack
  mov rax, [rdx+r11] ; rax = cur element to move
  mov [rdx+r9], rax ; move to the top of the stack the cur element top down
  sub r9, 8
  sub r11, 8
  jmp .loop_shift_stack
.end_loop_shift_stack:
; now, rdx+r9 holds the last place on stack
add r9, 8
add r9, rdx
mov rsp, r9
.no_fix_necessery:

push rbp
mov rbp , rsp
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, const_tbl+34
push rax ; calculate arg, rax holds arg, and push it
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (6)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
push 3 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (3)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_24:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 
leave
ret
Lcont_31:
mov qword [fvar_tbl+ (8* 19)], rax ;mov value 
mov rax, SOB_VOID_ADDRESS
;applic:
         push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (7)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 *(4 + 0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+2) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_63:
    cmp rbx, 2
    jge end_loop_63
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_63
end_loop_63:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_64:
    cmp rcx ,r8 ; i<n
    jge end_loop_64
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_64
end_loop_64:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_32)
 jmp Lcont_32
Lcode_32:
push rbp
mov rbp , rsp
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+3) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_65:
    cmp rbx, 3
    jge end_loop_65
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_65
end_loop_65:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_66:
    cmp rcx ,r8 ; i<n
    jge end_loop_66
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_66
end_loop_66:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_33)
 jmp Lcont_33
Lcode_33:
mov rdx, rsp ; rdx hold cur stack ptr ==> [rdx]= ret_adr etc... (i chose rdx because cons does'nt overide it)
mov r8, [rdx+8*2] ; r8= arg_count 
cmp r8, 2 ; compare arg_count to the amount we've expected
jl .no_fix_necessery
; else: we need to collect all exses args to a list
mov r9, SOB_NIL_ADDRESS ; r9 holds curr list
mov r10, r8
sub r10, 1 ; r10= lst size= num of opt args
mov r11, r8
dec r11 ; r11 =idx= n-1
.loop_create_lst:
  cmp r11, 1 
  jl .end_loop_create_lst ; end loop if idx<params.lst, which is when we get to the args that arent optional
  mov r13, rsp; r13=sp
  push SOB_NIL_ADDRESS; push magic
  push r9 ; push cdr
  push qword [rdx+8*(3+r11)] ; push arg_idx = car
  push qword 2; argcount= car, cdr
  push qword [rdx+8*1]; env
  call cons
  mov rsp, r13
  mov r9, rax ; r9 hold new lst
  mov r13, [r9+1]; r13=car
  mov r13, [r9+1+8]; r13=cdr
  dec r11 ; idx--
  jmp .loop_create_lst
.end_loop_create_lst:

; now r9 holds list of optional args
mov r13, [rdx+8*(3+r8-1)]; should be last opt arg=3
mov qword [rdx+8*(3+r8-1)], r9 ; set arg_n-1 to be optional
mov qword [rdx+8*2], 2
mov r9, r8  ; r9= n
inc r9  ;r9 = n+1 =3+n-2
shl r9, 3 ;r9= 8*(3+n-2)= idx of last place in stack
mov r11, 1
add r11, 2 
shl r11, 3 ; r11 = 8*(3+ params_len -1) = idx of last mandatory arg = the first element from stack that should be moved up
mov r13, [rdx+r11]; should be 1
; both r11, r9 will be decresed each time by 8
.loop_shift_stack:
  cmp r11, 0
  jl .end_loop_shift_stack
  mov rax, [rdx+r11] ; rax = cur element to move
  mov [rdx+r9], rax ; move to the top of the stack the cur element top down
  sub r9, 8
  sub r11, 8
  jmp .loop_shift_stack
.end_loop_shift_stack:
; now, rdx+r9 holds the last place on stack
add r9, 8
add r9, rdx
mov rsp, r9
.no_fix_necessery:

push rbp
mov rbp , rsp
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (2)]
mov rax, qword [rax + 8 * (12)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
cmp rax, SOB_FALSE_ADDRESS
je Lelse_15
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, const_tbl+34
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_26:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 jmp Lexit_15
Lelse_15:
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
push rax ; calculate arg, rax holds arg, and push it
push 3 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (2)]
mov rax, qword [rax + 8 * (3)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_25:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 Lexit_15:

leave
ret
Lcont_33:

leave
ret
Lcont_32:
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
mov qword [fvar_tbl+ (8* 20)], rax ;mov value 
mov rax, SOB_VOID_ADDRESS
;applic tp:
push SOB_NIL_ADDRESS ; push magic
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+2) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_67:
    cmp rbx, 2
    jge end_loop_67
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_67
end_loop_67:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_68:
    cmp rcx ,r8 ; i<n
    jge end_loop_68
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_68
end_loop_68:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_34)
 jmp Lcont_34
Lcode_34:
push rbp
mov rbp , rsp
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, const_tbl+23
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+3) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_69:
    cmp rbx, 3
    jge end_loop_69
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_69
end_loop_69:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_70:
    cmp rcx ,r8 ; i<n
    jge end_loop_70
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_70
end_loop_70:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_35)
 jmp Lcont_35
Lcode_35:
push rbp
mov rbp , rsp
MALLOC rax, 8
mov rbx, qword[rbp+ 8*(4+0)]
mov [rax], rbx
mov qword [rbp + 8 * (4 + (0))],rax
mov rax, SOB_VOID_ADDRESS
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+4) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_71:
    cmp rbx, 4
    jge end_loop_71
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_71
end_loop_71:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_72:
    cmp rcx ,r8 ; i<n
    jge end_loop_72
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_72
end_loop_72:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_36)
 jmp Lcont_36
Lcode_36:
push rbp
mov rbp , rsp
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (3)]
mov rax, qword [rax + 8 * (12)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
cmp rax, SOB_FALSE_ADDRESS
jne Lexit_Or_2
;applic:
         push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (3)]
mov rax, qword [rax + 8 * (10)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
cmp rax, SOB_FALSE_ADDRESS
je Lelse_16
;applic tp:
push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (3)]
mov rax, qword [rax + 8 * (11)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (3)]
mov rax, qword [rax + 8 * (10)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_29:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 jmp Lexit_16
Lelse_16:
mov rax, const_tbl+2
Lexit_16:
Lexit_Or_2:

leave
ret
Lcont_36:
push rax
mov rax, qword [rbp + 8 *(4 + 0)]
pop qword [rax]
mov rax, SOB_VOID_ADDRESS
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+4) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_73:
    cmp rbx, 4
    jge end_loop_73
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_73
end_loop_73:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_74:
    cmp rcx ,r8 ; i<n
    jge end_loop_74
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_74
end_loop_74:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_37)
 jmp Lcont_37
Lcode_37:
mov rdx, rsp ; rdx hold cur stack ptr ==> [rdx]= ret_adr etc... (i chose rdx because cons does'nt overide it)
mov r8, [rdx+8*2] ; r8= arg_count 
cmp r8, 2 ; compare arg_count to the amount we've expected
jl .no_fix_necessery
; else: we need to collect all exses args to a list
mov r9, SOB_NIL_ADDRESS ; r9 holds curr list
mov r10, r8
sub r10, 1 ; r10= lst size= num of opt args
mov r11, r8
dec r11 ; r11 =idx= n-1
.loop_create_lst:
  cmp r11, 1 
  jl .end_loop_create_lst ; end loop if idx<params.lst, which is when we get to the args that arent optional
  mov r13, rsp; r13=sp
  push SOB_NIL_ADDRESS; push magic
  push r9 ; push cdr
  push qword [rdx+8*(3+r11)] ; push arg_idx = car
  push qword 2; argcount= car, cdr
  push qword [rdx+8*1]; env
  call cons
  mov rsp, r13
  mov r9, rax ; r9 hold new lst
  mov r13, [r9+1]; r13=car
  mov r13, [r9+1+8]; r13=cdr
  dec r11 ; idx--
  jmp .loop_create_lst
.end_loop_create_lst:

; now r9 holds list of optional args
mov r13, [rdx+8*(3+r8-1)]; should be last opt arg=3
mov qword [rdx+8*(3+r8-1)], r9 ; set arg_n-1 to be optional
mov qword [rdx+8*2], 2
mov r9, r8  ; r9= n
inc r9  ;r9 = n+1 =3+n-2
shl r9, 3 ;r9= 8*(3+n-2)= idx of last place in stack
mov r11, 1
add r11, 2 
shl r11, 3 ; r11 = 8*(3+ params_len -1) = idx of last mandatory arg = the first element from stack that should be moved up
mov r13, [rdx+r11]; should be 1
; both r11, r9 will be decresed each time by 8
.loop_shift_stack:
  cmp r11, 0
  jl .end_loop_shift_stack
  mov rax, [rdx+r11] ; rax = cur element to move
  mov [rdx+r9], rax ; move to the top of the stack the cur element top down
  sub r9, 8
  sub r11, 8
  jmp .loop_shift_stack
.end_loop_shift_stack:
; now, rdx+r9 holds the last place on stack
add r9, 8
add r9, rdx
mov rsp, r9
.no_fix_necessery:

push rbp
mov rbp , rsp
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_30:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 
leave
ret
Lcont_37:

leave
ret
Lcont_35:
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_28:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 
leave
ret
Lcont_34:
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+2) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_75:
    cmp rbx, 2
    jge end_loop_75
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_75
end_loop_75:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_76:
    cmp rcx ,r8 ; i<n
    jge end_loop_76
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_76
end_loop_76:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_38)
 jmp Lcont_38
Lcode_38:
push rbp
mov rbp , rsp
;applic:
         push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (8)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 *(4 + 0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
mov qword [fvar_tbl+ (8* 21)], rax ;mov value 
mov rax, SOB_VOID_ADDRESS
;applic:
         push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (9)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 *(4 + 0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
mov qword [fvar_tbl+ (8* 22)], rax ;mov value 
mov rax, SOB_VOID_ADDRESS

leave
ret
Lcont_38:
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_27:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 
leave
ret
Lcont_29:
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_19:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 
leave
ret
Lcont_26:
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil

	call write_sob_if_not_void

;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, [fvar_tbl+ (8* 4)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 18)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 27)]
push rax ; calculate arg, rax holds arg, and push it
push 3 ; push argcount
;next is proc:
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+0) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_77:
    cmp rbx, 0
    jge end_loop_77
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_77
end_loop_77:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_78:
    cmp rcx ,r8 ; i<n
    jge end_loop_78
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_78
end_loop_78:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_39)
 jmp Lcont_39
Lcode_39:
push rbp
mov rbp , rsp
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+1) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_79:
    cmp rbx, 1
    jge end_loop_79
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_79
end_loop_79:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_80:
    cmp rcx ,r8 ; i<n
    jge end_loop_80
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_80
end_loop_80:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_40)
 jmp Lcont_40
Lcode_40:
mov rdx, rsp ; rdx hold cur stack ptr ==> [rdx]= ret_adr etc... (i chose rdx because cons does'nt overide it)
mov r8, [rdx+8*2] ; r8= arg_count 
cmp r8, 2 ; compare arg_count to the amount we've expected
jl .no_fix_necessery
; else: we need to collect all exses args to a list
mov r9, SOB_NIL_ADDRESS ; r9 holds curr list
mov r10, r8
sub r10, 1 ; r10= lst size= num of opt args
mov r11, r8
dec r11 ; r11 =idx= n-1
.loop_create_lst:
  cmp r11, 1 
  jl .end_loop_create_lst ; end loop if idx<params.lst, which is when we get to the args that arent optional
  mov r13, rsp; r13=sp
  push SOB_NIL_ADDRESS; push magic
  push r9 ; push cdr
  push qword [rdx+8*(3+r11)] ; push arg_idx = car
  push qword 2; argcount= car, cdr
  push qword [rdx+8*1]; env
  call cons
  mov rsp, r13
  mov r9, rax ; r9 hold new lst
  mov r13, [r9+1]; r13=car
  mov r13, [r9+1+8]; r13=cdr
  dec r11 ; idx--
  jmp .loop_create_lst
.end_loop_create_lst:

; now r9 holds list of optional args
mov r13, [rdx+8*(3+r8-1)]; should be last opt arg=3
mov qword [rdx+8*(3+r8-1)], r9 ; set arg_n-1 to be optional
mov qword [rdx+8*2], 2
mov r9, r8  ; r9= n
inc r9  ;r9 = n+1 =3+n-2
shl r9, 3 ;r9= 8*(3+n-2)= idx of last place in stack
mov r11, 1
add r11, 2 
shl r11, 3 ; r11 = 8*(3+ params_len -1) = idx of last mandatory arg = the first element from stack that should be moved up
mov r13, [rdx+r11]; should be 1
; both r11, r9 will be decresed each time by 8
.loop_shift_stack:
  cmp r11, 0
  jl .end_loop_shift_stack
  mov rax, [rdx+r11] ; rax = cur element to move
  mov [rdx+r9], rax ; move to the top of the stack the cur element top down
  sub r9, 8
  sub r11, 8
  jmp .loop_shift_stack
.end_loop_shift_stack:
; now, rdx+r9 holds the last place on stack
add r9, 8
add r9, rdx
mov rsp, r9
.no_fix_necessery:

push rbp
mov rbp , rsp
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (2)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
cmp rax, SOB_FALSE_ADDRESS
je Lelse_17
;applic tp:
push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, const_tbl+68
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, [fvar_tbl+ (8* 19)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
mov rax, const_tbl+51
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (1)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_32:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 jmp Lexit_17
Lelse_17:
;applic tp:
push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (1)]
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
mov rax, const_tbl+68
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, [fvar_tbl+ (8* 19)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (1)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_31:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 Lexit_17:

leave
ret
Lcont_40:

leave
ret
Lcont_39:
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
mov [fvar_tbl+(8*46)], rax
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, [fvar_tbl+ (8* 21)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 22)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 29)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 28)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 40)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 4)]
push rax ; calculate arg, rax holds arg, and push it
push 6 ; push argcount
;next is proc:
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+0) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_81:
    cmp rbx, 0
    jge end_loop_81
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_81
end_loop_81:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_82:
    cmp rcx ,r8 ; i<n
    jge end_loop_82
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_82
end_loop_82:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_41)
 jmp Lcont_41
Lcode_41:
push rbp
mov rbp , rsp
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, const_tbl+23
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+1) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_83:
    cmp rbx, 1
    jge end_loop_83
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_83
end_loop_83:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_84:
    cmp rcx ,r8 ; i<n
    jge end_loop_84
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_84
end_loop_84:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_42)
 jmp Lcont_42
Lcode_42:
push rbp
mov rbp , rsp
MALLOC rax, 8
mov rbx, qword[rbp+ 8*(4+0)]
mov [rax], rbx
mov qword [rbp + 8 * (4 + (0))],rax
mov rax, SOB_VOID_ADDRESS
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+2) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_85:
    cmp rbx, 2
    jge end_loop_85
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_85
end_loop_85:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_86:
    cmp rcx ,r8 ; i<n
    jge end_loop_86
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_86
end_loop_86:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_43)
 jmp Lcont_43
Lcode_43:
push rbp
mov rbp , rsp
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
cmp rax, SOB_FALSE_ADDRESS
jne Lexit_Or_3
;applic:
         push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (2)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (4)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (1)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
cmp rax, SOB_FALSE_ADDRESS
je Lelse_18
;applic:
         push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (2)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (5)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (1)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
cmp rax, SOB_FALSE_ADDRESS
je Lelse_19
;applic tp:
push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (3)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (2)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_34:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 jmp Lexit_19
Lelse_19:
mov rax, const_tbl+2
Lexit_19:
jmp Lexit_18
Lelse_18:
mov rax, const_tbl+2
Lexit_18:
Lexit_Or_3:

leave
ret
Lcont_43:
push rax
mov rax, qword [rbp + 8 *(4 + 0)]
pop qword [rax]
mov rax, SOB_VOID_ADDRESS
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+2) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_87:
    cmp rbx, 2
    jge end_loop_87
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_87
end_loop_87:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_88:
    cmp rcx ,r8 ; i<n
    jge end_loop_88
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_88
end_loop_88:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_44)
 jmp Lcont_44
Lcode_44:
mov rdx, rsp ; rdx hold cur stack ptr ==> [rdx]= ret_adr etc... (i chose rdx because cons does'nt overide it)
mov r8, [rdx+8*2] ; r8= arg_count 
cmp r8, 2 ; compare arg_count to the amount we've expected
jl .no_fix_necessery
; else: we need to collect all exses args to a list
mov r9, SOB_NIL_ADDRESS ; r9 holds curr list
mov r10, r8
sub r10, 1 ; r10= lst size= num of opt args
mov r11, r8
dec r11 ; r11 =idx= n-1
.loop_create_lst:
  cmp r11, 1 
  jl .end_loop_create_lst ; end loop if idx<params.lst, which is when we get to the args that arent optional
  mov r13, rsp; r13=sp
  push SOB_NIL_ADDRESS; push magic
  push r9 ; push cdr
  push qword [rdx+8*(3+r11)] ; push arg_idx = car
  push qword 2; argcount= car, cdr
  push qword [rdx+8*1]; env
  call cons
  mov rsp, r13
  mov r9, rax ; r9 hold new lst
  mov r13, [r9+1]; r13=car
  mov r13, [r9+1+8]; r13=cdr
  dec r11 ; idx--
  jmp .loop_create_lst
.end_loop_create_lst:

; now r9 holds list of optional args
mov r13, [rdx+8*(3+r8-1)]; should be last opt arg=3
mov qword [rdx+8*(3+r8-1)], r9 ; set arg_n-1 to be optional
mov qword [rdx+8*2], 2
mov r9, r8  ; r9= n
inc r9  ;r9 = n+1 =3+n-2
shl r9, 3 ;r9= 8*(3+n-2)= idx of last place in stack
mov r11, 1
add r11, 2 
shl r11, 3 ; r11 = 8*(3+ params_len -1) = idx of last mandatory arg = the first element from stack that should be moved up
mov r13, [rdx+r11]; should be 1
; both r11, r9 will be decresed each time by 8
.loop_shift_stack:
  cmp r11, 0
  jl .end_loop_shift_stack
  mov rax, [rdx+r11] ; rax = cur element to move
  mov [rdx+r9], rax ; move to the top of the stack the cur element top down
  sub r9, 8
  sub r11, 8
  jmp .loop_shift_stack
.end_loop_shift_stack:
; now, rdx+r9 holds the last place on stack
add r9, 8
add r9, rdx
mov rsp, r9
.no_fix_necessery:

push rbp
mov rbp , rsp
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_35:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 
leave
ret
Lcont_44:

leave
ret
Lcont_42:
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_33:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 
leave
ret
Lcont_41:
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
mov [fvar_tbl+(8*47)], rax
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, [fvar_tbl+ (8* 29)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 28)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 4)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 25)]
push rax ; calculate arg, rax holds arg, and push it
push 4 ; push argcount
;next is proc:
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+0) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_89:
    cmp rbx, 0
    jge end_loop_89
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_89
end_loop_89:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_90:
    cmp rcx ,r8 ; i<n
    jge end_loop_90
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_90
end_loop_90:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_45)
 jmp Lcont_45
Lcode_45:
push rbp
mov rbp , rsp
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, const_tbl+23
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+1) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_91:
    cmp rbx, 1
    jge end_loop_91
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_91
end_loop_91:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_92:
    cmp rcx ,r8 ; i<n
    jge end_loop_92
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_92
end_loop_92:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_46)
 jmp Lcont_46
Lcode_46:
push rbp
mov rbp , rsp
MALLOC rax, 8
mov rbx, qword[rbp+ 8*(4+0)]
mov [rax], rbx
mov qword [rbp + 8 * (4 + (0))],rax
mov rax, SOB_VOID_ADDRESS
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+2) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_93:
    cmp rbx, 2
    jge end_loop_93
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_93
end_loop_93:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_94:
    cmp rcx ,r8 ; i<n
    jge end_loop_94
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_94
end_loop_94:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_47)
 jmp Lcont_47
Lcode_47:
push rbp
mov rbp , rsp
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (1)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
cmp rax, SOB_FALSE_ADDRESS
je Lelse_20
mov rax, qword [rbp + 8 *(4 + 0)]
jmp Lexit_20
Lelse_20:
;applic tp:
push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (3)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
;applic:
         push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (2)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_37:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 Lexit_20:

leave
ret
Lcont_47:
push rax
mov rax, qword [rbp + 8 *(4 + 0)]
pop qword [rax]
mov rax, SOB_VOID_ADDRESS
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+2) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_95:
    cmp rbx, 2
    jge end_loop_95
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_95
end_loop_95:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_96:
    cmp rcx ,r8 ; i<n
    jge end_loop_96
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_96
end_loop_96:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_48)
 jmp Lcont_48
Lcode_48:
mov rdx, rsp ; rdx hold cur stack ptr ==> [rdx]= ret_adr etc... (i chose rdx because cons does'nt overide it)
mov r8, [rdx+8*2] ; r8= arg_count 
cmp r8, 1 ; compare arg_count to the amount we've expected
jl .no_fix_necessery
; else: we need to collect all exses args to a list
mov r9, SOB_NIL_ADDRESS ; r9 holds curr list
mov r10, r8
sub r10, 0 ; r10= lst size= num of opt args
mov r11, r8
dec r11 ; r11 =idx= n-1
.loop_create_lst:
  cmp r11, 0 
  jl .end_loop_create_lst ; end loop if idx<params.lst, which is when we get to the args that arent optional
  mov r13, rsp; r13=sp
  push SOB_NIL_ADDRESS; push magic
  push r9 ; push cdr
  push qword [rdx+8*(3+r11)] ; push arg_idx = car
  push qword 2; argcount= car, cdr
  push qword [rdx+8*1]; env
  call cons
  mov rsp, r13
  mov r9, rax ; r9 hold new lst
  mov r13, [r9+1]; r13=car
  mov r13, [r9+1+8]; r13=cdr
  dec r11 ; idx--
  jmp .loop_create_lst
.end_loop_create_lst:

; now r9 holds list of optional args
mov r13, [rdx+8*(3+r8-1)]; should be last opt arg=3
mov qword [rdx+8*(3+r8-1)], r9 ; set arg_n-1 to be optional
mov qword [rdx+8*2], 1
mov r9, r8  ; r9= n
inc r9  ;r9 = n+1 =3+n-2
shl r9, 3 ;r9= 8*(3+n-2)= idx of last place in stack
mov r11, 0
add r11, 2 
shl r11, 3 ; r11 = 8*(3+ params_len -1) = idx of last mandatory arg = the first element from stack that should be moved up
mov r13, [rdx+r11]; should be 1
; both r11, r9 will be decresed each time by 8
.loop_shift_stack:
  cmp r11, 0
  jl .end_loop_shift_stack
  mov rax, [rdx+r11] ; rax = cur element to move
  mov [rdx+r9], rax ; move to the top of the stack the cur element top down
  sub r9, 8
  sub r11, 8
  jmp .loop_shift_stack
.end_loop_shift_stack:
; now, rdx+r9 holds the last place on stack
add r9, 8
add r9, rdx
mov rsp, r9
.no_fix_necessery:

push rbp
mov rbp , rsp
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (1)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
cmp rax, SOB_FALSE_ADDRESS
je Lelse_21
mov rax, const_tbl+51
jmp Lexit_21
Lelse_21:
;applic tp:
push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (3)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (2)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_38:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 Lexit_21:

leave
ret
Lcont_48:

leave
ret
Lcont_46:
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_36:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 
leave
ret
Lcont_45:
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
mov [fvar_tbl+(8*25)], rax
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, [fvar_tbl+ (8* 21)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+0) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_97:
    cmp rbx, 0
    jge end_loop_97
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_97
end_loop_97:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_98:
    cmp rcx ,r8 ; i<n
    jge end_loop_98
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_98
end_loop_98:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_49)
 jmp Lcont_49
Lcode_49:
push rbp
mov rbp , rsp
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+1) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_99:
    cmp rbx, 1
    jge end_loop_99
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_99
end_loop_99:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_100:
    cmp rcx ,r8 ; i<n
    jge end_loop_100
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_100
end_loop_100:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_50)
 jmp Lcont_50
Lcode_50:
push rbp
mov rbp , rsp
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, const_tbl+51
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_39:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 
leave
ret
Lcont_50:

leave
ret
Lcont_49:
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
mov [fvar_tbl+(8*45)], rax
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, [fvar_tbl+ (8* 24)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 21)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 2)]
push rax ; calculate arg, rax holds arg, and push it
push 3 ; push argcount
;next is proc:
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+0) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_101:
    cmp rbx, 0
    jge end_loop_101
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_101
end_loop_101:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_102:
    cmp rcx ,r8 ; i<n
    jge end_loop_102
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_102
end_loop_102:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_51)
 jmp Lcont_51
Lcode_51:
push rbp
mov rbp , rsp
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+1) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_103:
    cmp rbx, 1
    jge end_loop_103
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_103
end_loop_103:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_104:
    cmp rcx ,r8 ; i<n
    jge end_loop_104
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_104
end_loop_104:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_52)
 jmp Lcont_52
Lcode_52:
push rbp
mov rbp , rsp
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
cmp rax, SOB_FALSE_ADDRESS
je Lelse_22
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, const_tbl+34
push rax ; calculate arg, rax holds arg, and push it
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (2)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (1)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_40:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 jmp Lexit_22
Lelse_22:
mov rax, const_tbl+2
Lexit_22:

leave
ret
Lcont_52:

leave
ret
Lcont_51:
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
mov [fvar_tbl+(8*35)], rax
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, [fvar_tbl+ (8* 2)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 1)]
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+0) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_105:
    cmp rbx, 0
    jge end_loop_105
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_105
end_loop_105:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_106:
    cmp rcx ,r8 ; i<n
    jge end_loop_106
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_106
end_loop_106:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_53)
 jmp Lcont_53
Lcode_53:
push rbp
mov rbp , rsp
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+1) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_107:
    cmp rbx, 1
    jge end_loop_107
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_107
end_loop_107:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_108:
    cmp rcx ,r8 ; i<n
    jge end_loop_108
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_108
end_loop_108:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_54)
 jmp Lcont_54
Lcode_54:
push rbp
mov rbp , rsp
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
cmp rax, SOB_FALSE_ADDRESS
jne Lexit_Or_4
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (1)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_41:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 Lexit_Or_4:

leave
ret
Lcont_54:

leave
ret
Lcont_53:
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
mov [fvar_tbl+(8*41)], rax
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, [fvar_tbl+ (8* 18)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 33)]
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+0) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_109:
    cmp rbx, 0
    jge end_loop_109
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_109
end_loop_109:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_110:
    cmp rcx ,r8 ; i<n
    jge end_loop_110
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_110
end_loop_110:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_55)
 jmp Lcont_55
Lcode_55:
push rbp
mov rbp , rsp
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+1) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_111:
    cmp rbx, 1
    jge end_loop_111
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_111
end_loop_111:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_112:
    cmp rcx ,r8 ; i<n
    jge end_loop_112
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_112
end_loop_112:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_56)
 jmp Lcont_56
Lcode_56:
push rbp
mov rbp , rsp
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, const_tbl+51
push rax ; calculate arg, rax holds arg, and push it
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+2) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_113:
    cmp rbx, 2
    jge end_loop_113
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_113
end_loop_113:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_114:
    cmp rcx ,r8 ; i<n
    jge end_loop_114
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_114
end_loop_114:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_57)
 jmp Lcont_57
Lcode_57:
push rbp
mov rbp , rsp
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, const_tbl+34
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (1)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_43:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 
leave
ret
Lcont_57:
push rax ; calculate arg, rax holds arg, and push it
push 3 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_42:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 
leave
ret
Lcont_56:

leave
ret
Lcont_55:
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
mov [fvar_tbl+(8*36)], rax
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, [fvar_tbl+ (8* 30)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 46)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 22)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 9)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 10)]
push rax ; calculate arg, rax holds arg, and push it
push 5 ; push argcount
;next is proc:
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+0) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_115:
    cmp rbx, 0
    jge end_loop_115
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_115
end_loop_115:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_116:
    cmp rcx ,r8 ; i<n
    jge end_loop_116
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_116
end_loop_116:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_58)
 jmp Lcont_58
Lcode_58:
push rbp
mov rbp , rsp
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+1) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_117:
    cmp rbx, 1
    jge end_loop_117
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_117
end_loop_117:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_118:
    cmp rcx ,r8 ; i<n
    jge end_loop_118
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_118
end_loop_118:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_59)
 jmp Lcont_59
Lcode_59:
push rbp
mov rbp , rsp
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, const_tbl+23
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+2) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_119:
    cmp rbx, 2
    jge end_loop_119
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_119
end_loop_119:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_120:
    cmp rcx ,r8 ; i<n
    jge end_loop_120
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_120
end_loop_120:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_60)
 jmp Lcont_60
Lcode_60:
push rbp
mov rbp , rsp
MALLOC rax, 8
mov rbx, qword[rbp+ 8*(4+0)]
mov [rax], rbx
mov qword [rbp + 8 * (4 + (0))],rax
mov rax, SOB_VOID_ADDRESS
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+3) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_121:
    cmp rbx, 3
    jge end_loop_121
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_121
end_loop_121:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_122:
    cmp rcx ,r8 ; i<n
    jge end_loop_122
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_122
end_loop_122:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_61)
 jmp Lcont_61
Lcode_61:
push rbp
mov rbp , rsp
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, const_tbl+51
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (2)]
mov rax, qword [rax + 8 * (2)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
cmp rax, SOB_FALSE_ADDRESS
je Lelse_23
mov rax, qword [rbp + 8 *(4 + 1)]
jmp Lexit_23
Lelse_23:
;applic tp:
push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (0)]
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (2)]
mov rax, qword [rax + 8 * (0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (2)]
mov rax, qword [rax + 8 * (4)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, const_tbl+34
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (2)]
mov rax, qword [rax + 8 * (3)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_45:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 Lexit_23:

leave
ret
Lcont_61:
push rax
mov rax, qword [rbp + 8 *(4 + 0)]
pop qword [rax]
mov rax, SOB_VOID_ADDRESS
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, const_tbl+1
push rax ; calculate arg, rax holds arg, and push it
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, const_tbl+34
push rax ; calculate arg, rax holds arg, and push it
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (1)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (3)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 *(4 + 0)]
mov rax, qword [rax]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_46:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 
leave
ret
Lcont_60:
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_44:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 
leave
ret
Lcont_59:

leave
ret
Lcont_58:
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
mov [fvar_tbl+(8*44)], rax
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, [fvar_tbl+ (8* 14)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 29)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 28)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 17)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 6)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 5)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 3)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 1)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 2)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 44)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, [fvar_tbl+ (8* 21)]
push rax ; calculate arg, rax holds arg, and push it
push 11 ; push argcount
;next is proc:
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+0) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_123:
    cmp rbx, 0
    jge end_loop_123
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_123
end_loop_123:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_124:
    cmp rcx ,r8 ; i<n
    jge end_loop_124
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_124
end_loop_124:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_62)
 jmp Lcont_62
Lcode_62:
push rbp
mov rbp , rsp
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, const_tbl+23
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+1) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_125:
    cmp rbx, 1
    jge end_loop_125
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_125
end_loop_125:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_126:
    cmp rcx ,r8 ; i<n
    jge end_loop_126
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_126
end_loop_126:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_63)
 jmp Lcont_63
Lcode_63:
push rbp
mov rbp , rsp
MALLOC rax, 8
mov rbx, qword[rbp+ 8*(4+0)]
mov [rax], rbx
mov qword [rbp + 8 * (4 + (0))],rax
mov rax, SOB_VOID_ADDRESS
;we know that env = [rbp + 8*2]
; we know that depth is env.length
; now we SHOULD allocate extenv with size env.length+1= depth+1
MALLOC rax, 8*(1+2) ; rax->extEnv
mov rbx, 0 ;i
mov rcx, 1 ;j
;following loop is to shift the env in extended env
loop_127:
    cmp rbx, 2
    jge end_loop_127
    mov rdx, [rbp + 8*2] ; rdx = env
    shl rbx, 3
    add rdx, rbx ; env[i] =-->[var, var,...var] 
    shr rbx, 3
    mov r8, [rdx] 
    mov [rax + 8*rcx], r8 ; extEnv[j]=env[i]
    inc rcx
    inc rbx
    jmp loop_127
end_loop_127:
 ;  rax holds ->extEnv
;n= [rbp+8*3]
mov rbx, rax ;rbx holds extEnv
; Allocate ExtEnv[0] to point to a vector where to store the parameters
mov r8, [rbp+8*3] ; r8= n
inc r8; +magic
shl r8, 3
MALLOC r9, r8 ; r9 holds the vector for the params with size 8*n +1 for magic
shr r8, 3
dec r8; - magic
mov rcx, 0 ;i=0
;following loop is to Copy the parameters off of the stack to the extended env:
loop_128:
    cmp rcx ,r8 ; i<n
    jge end_loop_128
    mov rdx, [rbp+8*(4+rcx)] ;  rdx= param_i
    mov [r9+8*rcx], rdx ; ExtEnv [0][i]= param_i
    inc rcx
    jmp loop_128
end_loop_128:
mov qword [r9+8*rcx], SOB_NIL_ADDRESS; add magic to the end
mov [rbx], r9 ; updte the extEnv[0]-> vector that we created for the params

MAKE_CLOSURE(rax, rbx, Lcode_64)
 jmp Lcont_64
Lcode_64:
push rbp
mov rbp , rsp
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (2)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
cmp rax, SOB_FALSE_ADDRESS
je Lelse_34
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (2)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
jmp Lexit_34
Lelse_34:
mov rax, const_tbl+2
Lexit_34:
cmp rax, SOB_FALSE_ADDRESS
je Lelse_24
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_53:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 jmp Lexit_24
Lelse_24:
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (3)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
cmp rax, SOB_FALSE_ADDRESS
je Lelse_33
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (3)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
jmp Lexit_33
Lelse_33:
mov rax, const_tbl+2
Lexit_33:
cmp rax, SOB_FALSE_ADDRESS
je Lelse_25
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_52:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 jmp Lexit_25
Lelse_25:
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (5)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
cmp rax, SOB_FALSE_ADDRESS
je Lelse_32
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (5)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
jmp Lexit_32
Lelse_32:
mov rax, const_tbl+2
Lexit_32:
cmp rax, SOB_FALSE_ADDRESS
je Lelse_26
;applic tp:
push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (10)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (10)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (0)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_51:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 jmp Lexit_26
Lelse_26:
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (4)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
cmp rax, SOB_FALSE_ADDRESS
je Lelse_31
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (4)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
jmp Lexit_31
Lelse_31:
mov rax, const_tbl+2
Lexit_31:
cmp rax, SOB_FALSE_ADDRESS
je Lelse_27
;applic:
         push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (8)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (8)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
cmp rax, SOB_FALSE_ADDRESS
je Lelse_30
;applic tp:
push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (9)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (9)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_50:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 jmp Lexit_30
Lelse_30:
mov rax, const_tbl+2
Lexit_30:
jmp Lexit_27
Lelse_27:
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (6)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
cmp rax, SOB_FALSE_ADDRESS
je Lelse_29
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (6)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
jmp Lexit_29
Lelse_29:
mov rax, const_tbl+2
Lexit_29:
cmp rax, SOB_FALSE_ADDRESS
je Lelse_28
;applic tp:
push SOB_NIL_ADDRESS ; push magic
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (1)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (1)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax + 8 * (0)]
mov rax, qword [rax]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_49:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 jmp Lexit_28
Lelse_28:
;applic tp:
push SOB_NIL_ADDRESS ; push magic
mov rax, qword [rbp + 8 *(4 + 1)]
push rax ; calculate arg, rax holds arg, and push it
mov rax, qword [rbp + 8 *(4 + 0)]
push rax ; calculate arg, rax holds arg, and push it
push 2 ; push argcount
;next is proc:
mov rax, qword [rbp + 8 * 2]
mov rax, qword [rax + 8 * (1)]
mov rax, qword [rax + 8 * (7)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_48:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 Lexit_28:
Lexit_27:
Lexit_26:
Lexit_25:
Lexit_24:

leave
ret
Lcont_64:
push rax
mov rax, qword [rbp + 8 *(4 + 0)]
pop qword [rax]
mov rax, SOB_VOID_ADDRESS
mov rax, qword [rbp + 8 *(4 + 0)]
mov rax, qword [rax]

leave
ret
Lcont_63:
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
push qword [rbp + 8 * 1] ; old ret addr
mov r11, qword [rbp]
SHIFT_FRAME_47:
mov r15, rbp
sub r15, 8 ; r15= adress in stack of first to move up
mov qword r14, [rbp + 8*3] ; r14=n
add r14, 4
shl r14, 3
add r14, rbp ; r14 = rbp+ 8*(4+n) , which is the adress we should overide first
; we are moving top down:
.loop_of_shifts:
  cmp r15, rsp
  jl .end_loop_of_shifts ; we finished
  mov qword r12, [r15]; r12 = element to move
  mov qword [r14], r12 ; move elemnt to top of stack
  sub r14, 8
  sub r15, 8
  jmp .loop_of_shifts
.end_loop_of_shifts:
  add r14, 8
  mov rsp, r14
  mov rbp, r11
  jmp qword [rax+9] ; jump to code ptr
 
leave
ret
Lcont_62:
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil
mov [fvar_tbl+(8*32)], rax
mov rax, SOB_VOID_ADDRESS

	call write_sob_if_not_void

;applic:
         push SOB_NIL_ADDRESS ; push magic
mov rax, const_tbl+204051
push rax ; calculate arg, rax holds arg, and push it
push 1 ; push argcount
;next is proc:
mov rax, [fvar_tbl+ (8* 28)]
; we back from calculating proc
cmp byte [rax], T_CLOSURE
jne appError ;verify clousre
push qword [rax+1] ; push env
call qword [rax+9] ; call to code ptr
 add rsp , 8*1 ; pop env
pop rbx ; pop arg count
lea rsp , [rsp + 8*rbx]; pop args
add rsp , 8 ; pop magic, which is sob_nil

	call write_sob_if_not_void;;; Clean up the dummy frame, set the exit status to 0 ("success"), 
   ;;; and return from main
  pop rbp
  add rsp, 3*8
  mov rax, 0
  ret
  appError:
    pop rbp
    add rsp, 3*8
    mov rax, 1
  ret
boolean?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_BOOL
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

flonum?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_FLOAT
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

rational?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_RATIONAL
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

pair?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_PAIR
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

null?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_NIL
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

char?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_CHAR
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

string?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_STRING
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

symbol?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_SYMBOL
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

procedure?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov sil, byte [rsi]
	cmp sil, T_CLOSURE
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

div:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .div_rat
             FLOAT_VAL rsi, rsi 
          movq xmm0, rsi
          FLOAT_VAL rdi, rdi 
          movq xmm1, rdi
	  divsd xmm0, xmm1
          movq rsi, xmm0
          MAKE_FLOAT(rax, rsi)
             jmp .op_return
          .div_rat:
             DENOMINATOR rcx, rsi
	  DENOMINATOR rdx, rdi
	  NUMERATOR rsi, rsi
	  NUMERATOR rdi, rdi
          MAKE_RATIONAL(rax, rdx, rdi)
         mov PVAR(1), rax
         pop rbp
         jmp mul
	  mov rax, rcx
	  mov rdi, rsi
          .gcd_loop:
     and rdi, rdi
     jz .end_gcd_loop
     cqo
     idiv rdi
     mov rax, rdi
     mov rdi, rdx
     jmp .gcd_loop	
     .end_gcd_loop:
	  mov rdi, rax
	  mov rax, rsi
	  cqo
	  idiv rdi
	  mov rsi, rax
	  mov rax, rcx
	  cqo
	  idiv rdi
	  mov rcx, rax
          cmp rcx, 0
          jge .make_rat
          imul rsi, -1
          imul rcx, -1
          .make_rat:
          MAKE_RATIONAL(rax, rsi, rcx)
          .op_return:
         pop rbp
         ret

mul:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .mul_rat
             FLOAT_VAL rsi, rsi 
          movq xmm0, rsi
          FLOAT_VAL rdi, rdi 
          movq xmm1, rdi
	  mulsd xmm0, xmm1
          movq rsi, xmm0
          MAKE_FLOAT(rax, rsi)
             jmp .op_return
          .mul_rat:
             DENOMINATOR rcx, rsi
	  DENOMINATOR rdx, rdi
	  NUMERATOR rsi, rsi
	  NUMERATOR rdi, rdi
          imul rsi, rdi
	 imul rcx, rdx
	  mov rax, rcx
	  mov rdi, rsi
          .gcd_loop:
     and rdi, rdi
     jz .end_gcd_loop
     cqo
     idiv rdi
     mov rax, rdi
     mov rdi, rdx
     jmp .gcd_loop	
     .end_gcd_loop:
	  mov rdi, rax
	  mov rax, rsi
	  cqo
	  idiv rdi
	  mov rsi, rax
	  mov rax, rcx
	  cqo
	  idiv rdi
	  mov rcx, rax
          cmp rcx, 0
          jge .make_rat
          imul rsi, -1
          imul rcx, -1
          .make_rat:
          MAKE_RATIONAL(rax, rsi, rcx)
          .op_return:
         pop rbp
         ret

add:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .add_rat
             FLOAT_VAL rsi, rsi 
          movq xmm0, rsi
          FLOAT_VAL rdi, rdi 
          movq xmm1, rdi
	  addsd xmm0, xmm1
          movq rsi, xmm0
          MAKE_FLOAT(rax, rsi)
             jmp .op_return
          .add_rat:
             DENOMINATOR rcx, rsi
	  DENOMINATOR rdx, rdi
	  NUMERATOR rsi, rsi
	  NUMERATOR rdi, rdi
          imul rsi, rdx
	 imul rdi, rcx
	 add rsi, rdi
	 imul rcx, rdx
	  mov rax, rcx
	  mov rdi, rsi
          .gcd_loop:
     and rdi, rdi
     jz .end_gcd_loop
     cqo
     idiv rdi
     mov rax, rdi
     mov rdi, rdx
     jmp .gcd_loop	
     .end_gcd_loop:
	  mov rdi, rax
	  mov rax, rsi
	  cqo
	  idiv rdi
	  mov rsi, rax
	  mov rax, rcx
	  cqo
	  idiv rdi
	  mov rcx, rax
          cmp rcx, 0
          jge .make_rat
          imul rsi, -1
          imul rcx, -1
          .make_rat:
          MAKE_RATIONAL(rax, rsi, rcx)
          .op_return:
         pop rbp
         ret

eq:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .eq_rat
             FLOAT_VAL rsi, rsi
	 FLOAT_VAL rdi, rdi
	 cmp rsi, rdi
             jmp .op_return
          .eq_rat:
             NUMERATOR rcx, rsi
	 NUMERATOR rdx, rdi
	 cmp rcx, rdx
	 jne .false
	 DENOMINATOR rcx, rsi
	 DENOMINATOR rdx, rdi
	 cmp rcx, rdx
         .false:
          .op_return:
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

lt:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov dl, byte [rsi]
             cmp dl, T_FLOAT
	     jne .lt_rat
             FLOAT_VAL rsi, rsi
	 movq xmm0, rsi
	 FLOAT_VAL rdi, rdi
	 movq xmm1, rdi
	 cmpltpd xmm0, xmm1
         movq rsi, xmm0
         cmp rsi, 0
             jmp .op_return
          .lt_rat:
             DENOMINATOR rcx, rsi
	 DENOMINATOR rdx, rdi
	 NUMERATOR rsi, rsi
	 NUMERATOR rdi, rdi
	 imul rsi, rdx
	 imul rdi, rcx
	 cmp rsi, rdi
          .op_return:
      jl .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

string_length:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	STRING_LENGTH rsi, rsi
         MAKE_RATIONAL(rax, rsi, 1)
         pop rbp
         ret

string_ref:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	STRING_ELEMENTS rsi, rsi
         NUMERATOR rdi, rdi
         add rsi, rdi
         mov sil, byte [rsi]
         MAKE_CHAR(rax, sil)
         pop rbp
         ret

string_set:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	mov rdx, PVAR(2)
	STRING_ELEMENTS rsi, rsi
         NUMERATOR rdi, rdi
         add rsi, rdi
         CHAR_VAL rax, rdx
         mov byte [rsi], al
         mov rax, SOB_VOID_ADDRESS
         pop rbp
         ret

make_string:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	NUMERATOR rsi, rsi
         CHAR_VAL rdi, rdi
         and rdi, 255
         MAKE_STRING rax, rsi, dil
         pop rbp
         ret

symbol_to_string:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	SYMBOL_VAL rsi, rsi
	 STRING_LENGTH rcx, rsi
	 STRING_ELEMENTS rdi, rsi
	 push rcx
	 push rdi
	 mov dil, byte [rdi]
	 MAKE_CHAR(rax, dil)
	 push rax
	 MAKE_RATIONAL(rax, rcx, 1)
	 push rax
	 push 2
	 push SOB_NIL_ADDRESS
	 call make_string
	 add rsp, 4*8
	 STRING_ELEMENTS rsi, rax   
	 pop rdi
	 pop rcx
	 cmp rcx, 0
	 je .end
         .loop:
	 lea r8, [rdi+rcx]
	 lea r9, [rsi+rcx]
	 mov bl, byte [r8]
	 mov byte [r9], bl
	 loop .loop
         .end:
         pop rbp
         ret

eq?:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	cmp rsi, rdi
      je .true
       mov rax, SOB_FALSE_ADDRESS
       jmp .return
       .true:
       mov rax, SOB_TRUE_ADDRESS
       .return:
         pop rbp
         ret

char_to_integer:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	CHAR_VAL rsi, rsi
	 and rsi, 255
	 MAKE_RATIONAL(rax, rsi, 1)
         pop rbp
         ret

integer_to_char:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	NUMERATOR rsi, rsi
	 and rsi, 255
	 MAKE_CHAR(rax, sil)
         pop rbp
         ret

exact_to_inexact:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	DENOMINATOR rdi, rsi
	 NUMERATOR rsi, rsi 
	 cvtsi2sd xmm0, rsi
	 cvtsi2sd xmm1, rdi
	 divsd xmm0, xmm1
	 movq rsi, xmm0
	 MAKE_FLOAT(rax, rsi)
         pop rbp
         ret

numerator:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	NUMERATOR rsi, rsi
	 mov rdi, 1
	 MAKE_RATIONAL(rax, rsi, rdi)
         pop rbp
         ret

denominator:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	DENOMINATOR rsi, rsi
	 mov rdi, 1
	 MAKE_RATIONAL(rax, rsi, rdi)
         pop rbp
         ret

gcd:
       push rbp
       mov rbp, rsp 
       mov rsi, PVAR(0)
	mov rdi, PVAR(1)
	xor rdx, rdx
	 NUMERATOR rax, rsi
         NUMERATOR rdi, rdi
         .gcd_loop:
     and rdi, rdi
     jz .end_gcd_loop
     cqo
     idiv rdi
     mov rax, rdi
     mov rdi, rdx
     jmp .gcd_loop	
     .end_gcd_loop:
	 mov rdx, rax
         cmp rdx, 0
         jge .make_result
         neg rdx
         .make_result:
         MAKE_RATIONAL(rax, rdx, 1)
         pop rbp
         ret

cons:
  push rbp
  mov rbp , rsp
  mov qword rbx, [rbp+8*4]  ;rax->arg_0 = obj1
  mov qword rcx, [rbp+8*5]  ;rbx->arg_1 = obj2
  MALLOC rax, 17  ;rax->empty list= [1byte type_tag , 8bytes car ptr , 8bytes cdr ptr]
  mov byte [rax], T_PAIR  ; set TypeTag = T_PAIR
  mov qword [rax+1], rbx  ; set car-> obj1
  mov qword [rax+9], rcx  ; set cdr-> obj2
  leave
  ret

apply:
  push rbp
  mov rbp , rsp
  
  ;anyway-> push magic
  push SOB_NIL_ADDRESS ; push magic

  mov rbx, [rbp+8*4] ; rbx holds the func we wanna apply
  mov rcx,  [rbp+8*3] ;rcx holds argCount(n)
  cmp rcx, 1 ; 
  je .no_arg
  
  ;else-> we have at least the list at the end
  ;push list args
  mov r10, [rbp+8*(4+rcx-1)] ; r10->lst
  mov qword r11, 0; r11= size of list
  cmp r10, SOB_NIL_ADDRESS; if list is empty
  je .end_loop_of_pushes
  ; else-> lst !=nill -> so we need to reverse it and than push each var in it
  ;reverse:
  ;first push by order each var in lst to stack:
  mov qword r12, [r10+1] ;r12->car
  mov qword r13, [r10+1+8] ;r13->cdr
  .loop_of_pushes:
    inc r11
    push qword r12
    cmp r13, SOB_NIL_ADDRESS; if cdr is empty
    je .end_loop_of_pushes
    mov qword r12, [r13+1] ;r12->car
    mov qword r13, [r13+1+8] ;r13->cdr
    jmp .loop_of_pushes
  .end_loop_of_pushes:
  ;now: r11= lst size , stack contains all vars.

  shl r11, 3 ; r11 = 8* lst_size
  MALLOC rax, r11 ; allocate size for lst in heap
  shr r11, 3 ; reset r11 =lst_size
  mov r12, 0 ; idx
  .loop_copy_lst_in_reverse:
    cmp r12, r11 
    jge .end_loop_copy_lst_in_reverse ;jump to end if idx >= lst size
    pop qword [rax +8*r12] ; pop arg from stack and put it in lst[i]
    inc r12
    jmp .loop_copy_lst_in_reverse
  .end_loop_copy_lst_in_reverse:
  ; now rax->reversed lst

  ; now push vars of reversed lst:
  mov r12, 0 ; idx
  .loop_push_reveres_lst:
    cmp r12, r11 
    jge .end_loop_push_reveres_lst ;jump to end if idx >= lst size
    push qword [rax +8*r12] ; pop arg from stack and put it in lst[i]
    inc r12
    jmp .loop_push_reveres_lst
  .end_loop_push_reveres_lst:


  cmp rcx, 2
  je .list_only
  ;else-> we have opt args
  .opt_args:
    mov r12, 1 ; idx
    mov r13, rcx
    sub r13, 2    ; r13= idx of arg_n-2
    .loop_push_opts:
      cmp r12, r13 
      jg .end_loop_push_opts ;jump to end if idx > num of opt args
      push qword [rbp+8*(4+r13)] ; push arg from the end
      dec r13
      jmp .loop_push_opts
    .end_loop_push_opts:

    ;all arg on heap:

    sub rcx, 2
    add rcx, r11  ;rcx = argCount(n) -2 + lstSize
    push rcx  ;push n
    jmp .end_apply

  .list_only:
    push r11 ;push n
    jmp .end_apply
  .no_arg:
    push 0

  .end_apply:
    mov r12, qword [rbx+1]
    push qword r12 ; push env of closure that we are gonna call
    call qword [rbx+9]
    add rsp , 8*1 ; pop env
    pop rbx ; pop arg count
    lea rsp , [rsp + 8*rbx]; pop args
    add rsp , 8 ; pop magic, which is sob_nil

  leave
  ret


car:
  push rbp
  mov rbp , rsp
  ;arg_0= ptr to a list
  ;list is : 1byte type_tag , 8bytes car ptr , 8bytes cdr ptr
  mov qword rax, [rbp+8*4]; rax->lst
  mov qword rax, [rax+1]
  leave
  ret

cdr:
  push rbp
  mov rbp , rsp
  ;arg_0= ptr to a list
  ;list is : 1byte type_tag , 8bytes car ptr , 8bytes cdr ptr
  mov qword rax, [rbp+8*4]; rax->lst
  mov qword rax, [rax+1+8]; rax->cdr
  leave
  ret

set_car:
  push rbp
  mov rbp , rsp
  mov qword rax, [rbp+8*4]  ;rax->arg_0 = ->list= [1byte type_tag , 8bytes car ptr , 8bytes cdr ptr]
  mov qword rbx, [rbp+8*5]  ;rbx->arg_1 = obj
  mov qword [rax+1], rbx; car->obj
  mov qword rax, SOB_VOID_ADDRESS ; set is void
  leave
  ret

set_cdr:
  push rbp
  mov rbp , rsp
  mov qword rax, [rbp+8*4]  ;rax->arg_0 = ->list= [1byte type_tag , 8bytes car ptr , 8bytes cdr ptr]
  mov qword rbx, [rbp+8*5]  ;rbx->arg_1 = obj
  mov qword [rax+1+8], rbx; car->obj
  mov qword rax, SOB_VOID_ADDRESS ; set is void
  leave
  ret